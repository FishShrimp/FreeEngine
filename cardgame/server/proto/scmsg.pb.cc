// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scmsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "scmsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* sc_login_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_login_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_talk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_talk_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_player_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_player_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_battle_action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_battle_action_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_battle_report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_battle_report_reflection_ = NULL;
const ::google::protobuf::Descriptor* scmsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scmsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_scmsg_2eproto() {
  protobuf_AddDesc_scmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "scmsg.proto");
  GOOGLE_CHECK(file != NULL);
  sc_login_res_descriptor_ = file->message_type(0);
  static const int sc_login_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_login_res, res_),
  };
  sc_login_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_login_res_descriptor_,
      sc_login_res::default_instance_,
      sc_login_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_login_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_login_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_login_res));
  sc_talk_descriptor_ = file->message_type(1);
  static const int sc_talk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_talk, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_talk, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_talk, msg_),
  };
  sc_talk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_talk_descriptor_,
      sc_talk::default_instance_,
      sc_talk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_talk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_talk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_talk));
  sc_player_data_descriptor_ = file->message_type(2);
  static const int sc_player_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_player_data, data_),
  };
  sc_player_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_player_data_descriptor_,
      sc_player_data::default_instance_,
      sc_player_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_player_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_player_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_player_data));
  sc_battle_action_descriptor_ = file->message_type(3);
  static const int sc_battle_action_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_battle_action, act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_battle_action, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_battle_action, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_battle_action, value_),
  };
  sc_battle_action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_battle_action_descriptor_,
      sc_battle_action::default_instance_,
      sc_battle_action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_battle_action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_battle_action, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_battle_action));
  sc_battle_report_descriptor_ = file->message_type(4);
  static const int sc_battle_report_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_battle_report, lchar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_battle_report, rchar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_battle_report, actions_),
  };
  sc_battle_report_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_battle_report_descriptor_,
      sc_battle_report::default_instance_,
      sc_battle_report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_battle_report, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_battle_report, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_battle_report));
  scmsg_descriptor_ = file->message_type(5);
  static const int scmsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scmsg, login_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scmsg, talk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scmsg, player_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scmsg, battle_report_),
  };
  scmsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scmsg_descriptor_,
      scmsg::default_instance_,
      scmsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scmsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scmsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scmsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_scmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_login_res_descriptor_, &sc_login_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_talk_descriptor_, &sc_talk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_player_data_descriptor_, &sc_player_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_battle_action_descriptor_, &sc_battle_action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_battle_report_descriptor_, &sc_battle_report::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scmsg_descriptor_, &scmsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_scmsg_2eproto() {
  delete sc_login_res::default_instance_;
  delete sc_login_res_reflection_;
  delete sc_talk::default_instance_;
  delete sc_talk_reflection_;
  delete sc_player_data::default_instance_;
  delete sc_player_data_reflection_;
  delete sc_battle_action::default_instance_;
  delete sc_battle_action_reflection_;
  delete sc_battle_report::default_instance_;
  delete sc_battle_report_reflection_;
  delete scmsg::default_instance_;
  delete scmsg_reflection_;
}

void protobuf_AddDesc_scmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013scmsg.proto\"\033\n\014sc_login_res\022\013\n\003res\030\001 \001"
    "(\005\"2\n\007sc_talk\022\014\n\004from\030\001 \001(\014\022\014\n\004type\030\002 \001("
    "\005\022\013\n\003msg\030\003 \001(\014\"\036\n\016sc_player_data\022\014\n\004data"
    "\030\001 \001(\014\"H\n\020sc_battle_action\022\013\n\003act\030\001 \001(\005\022"
    "\014\n\004from\030\002 \001(\005\022\n\n\002to\030\003 \001(\005\022\r\n\005value\030\004 \001(\005"
    "\"T\n\020sc_battle_report\022\r\n\005lchar\030\001 \003(\005\022\r\n\005r"
    "char\030\002 \003(\005\022\"\n\007actions\030\003 \003(\0132\021.sc_battle_"
    "action\"\221\001\n\005scmsg\022 \n\tlogin_res\030\001 \001(\0132\r.sc"
    "_login_res\022\026\n\004talk\030\002 \001(\0132\010.sc_talk\022$\n\013pl"
    "ayer_data\030\003 \001(\0132\017.sc_player_data\022(\n\rbatt"
    "le_report\030\004 \001(\0132\021.sc_battle_report", 434);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "scmsg.proto", &protobuf_RegisterTypes);
  sc_login_res::default_instance_ = new sc_login_res();
  sc_talk::default_instance_ = new sc_talk();
  sc_player_data::default_instance_ = new sc_player_data();
  sc_battle_action::default_instance_ = new sc_battle_action();
  sc_battle_report::default_instance_ = new sc_battle_report();
  scmsg::default_instance_ = new scmsg();
  sc_login_res::default_instance_->InitAsDefaultInstance();
  sc_talk::default_instance_->InitAsDefaultInstance();
  sc_player_data::default_instance_->InitAsDefaultInstance();
  sc_battle_action::default_instance_->InitAsDefaultInstance();
  sc_battle_report::default_instance_->InitAsDefaultInstance();
  scmsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_scmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_scmsg_2eproto {
  StaticDescriptorInitializer_scmsg_2eproto() {
    protobuf_AddDesc_scmsg_2eproto();
  }
} static_descriptor_initializer_scmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int sc_login_res::kResFieldNumber;
#endif  // !_MSC_VER

sc_login_res::sc_login_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_login_res::InitAsDefaultInstance() {
}

sc_login_res::sc_login_res(const sc_login_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_login_res::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_login_res::~sc_login_res() {
  SharedDtor();
}

void sc_login_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sc_login_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_login_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_login_res_descriptor_;
}

const sc_login_res& sc_login_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scmsg_2eproto();
  return *default_instance_;
}

sc_login_res* sc_login_res::default_instance_ = NULL;

sc_login_res* sc_login_res::New() const {
  return new sc_login_res;
}

void sc_login_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_login_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_login_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_login_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_login_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_login_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_login_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_login_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_login_res::MergeFrom(const sc_login_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_login_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_login_res::CopyFrom(const sc_login_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_login_res::IsInitialized() const {

  return true;
}

void sc_login_res::Swap(sc_login_res* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_login_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_login_res_descriptor_;
  metadata.reflection = sc_login_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_talk::kFromFieldNumber;
const int sc_talk::kTypeFieldNumber;
const int sc_talk::kMsgFieldNumber;
#endif  // !_MSC_VER

sc_talk::sc_talk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_talk::InitAsDefaultInstance() {
}

sc_talk::sc_talk(const sc_talk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_talk::SharedCtor() {
  _cached_size_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_talk::~sc_talk() {
  SharedDtor();
}

void sc_talk::SharedDtor() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void sc_talk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_talk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_talk_descriptor_;
}

const sc_talk& sc_talk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scmsg_2eproto();
  return *default_instance_;
}

sc_talk* sc_talk::default_instance_ = NULL;

sc_talk* sc_talk::New() const {
  return new sc_talk;
}

void sc_talk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_talk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional bytes msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_talk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->from(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional bytes msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_talk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes from = 1;
  if (has_from()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->from(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional bytes msg = 3;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_talk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bytes msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_talk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_talk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_talk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_talk::MergeFrom(const sc_talk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_talk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_talk::CopyFrom(const sc_talk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_talk::IsInitialized() const {

  return true;
}

void sc_talk::Swap(sc_talk* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_talk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_talk_descriptor_;
  metadata.reflection = sc_talk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_player_data::kDataFieldNumber;
#endif  // !_MSC_VER

sc_player_data::sc_player_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_player_data::InitAsDefaultInstance() {
}

sc_player_data::sc_player_data(const sc_player_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_player_data::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_player_data::~sc_player_data() {
  SharedDtor();
}

void sc_player_data::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void sc_player_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_player_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_player_data_descriptor_;
}

const sc_player_data& sc_player_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scmsg_2eproto();
  return *default_instance_;
}

sc_player_data* sc_player_data::default_instance_ = NULL;

sc_player_data* sc_player_data::New() const {
  return new sc_player_data;
}

void sc_player_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_player_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_player_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_player_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_player_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_player_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_player_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_player_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_player_data::MergeFrom(const sc_player_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_player_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_player_data::CopyFrom(const sc_player_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_player_data::IsInitialized() const {

  return true;
}

void sc_player_data::Swap(sc_player_data* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_player_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_player_data_descriptor_;
  metadata.reflection = sc_player_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_battle_action::kActFieldNumber;
const int sc_battle_action::kFromFieldNumber;
const int sc_battle_action::kToFieldNumber;
const int sc_battle_action::kValueFieldNumber;
#endif  // !_MSC_VER

sc_battle_action::sc_battle_action()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_battle_action::InitAsDefaultInstance() {
}

sc_battle_action::sc_battle_action(const sc_battle_action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_battle_action::SharedCtor() {
  _cached_size_ = 0;
  act_ = 0;
  from_ = 0;
  to_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_battle_action::~sc_battle_action() {
  SharedDtor();
}

void sc_battle_action::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sc_battle_action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_battle_action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_battle_action_descriptor_;
}

const sc_battle_action& sc_battle_action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scmsg_2eproto();
  return *default_instance_;
}

sc_battle_action* sc_battle_action::default_instance_ = NULL;

sc_battle_action* sc_battle_action::New() const {
  return new sc_battle_action;
}

void sc_battle_action::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    act_ = 0;
    from_ = 0;
    to_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_battle_action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 act = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_)));
          set_has_act();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from;
        break;
      }

      // optional int32 from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to;
        break;
      }

      // optional int32 to = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional int32 value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_battle_action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 act = 1;
  if (has_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->act(), output);
  }

  // optional int32 from = 2;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->from(), output);
  }

  // optional int32 to = 3;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->to(), output);
  }

  // optional int32 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_battle_action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 act = 1;
  if (has_act()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->act(), target);
  }

  // optional int32 from = 2;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->from(), target);
  }

  // optional int32 to = 3;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->to(), target);
  }

  // optional int32 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_battle_action::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 act = 1;
    if (has_act()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act());
    }

    // optional int32 from = 2;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from());
    }

    // optional int32 to = 3;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to());
    }

    // optional int32 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_battle_action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_battle_action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_battle_action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_battle_action::MergeFrom(const sc_battle_action& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_act()) {
      set_act(from.act());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_battle_action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_battle_action::CopyFrom(const sc_battle_action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_battle_action::IsInitialized() const {

  return true;
}

void sc_battle_action::Swap(sc_battle_action* other) {
  if (other != this) {
    std::swap(act_, other->act_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_battle_action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_battle_action_descriptor_;
  metadata.reflection = sc_battle_action_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_battle_report::kLcharFieldNumber;
const int sc_battle_report::kRcharFieldNumber;
const int sc_battle_report::kActionsFieldNumber;
#endif  // !_MSC_VER

sc_battle_report::sc_battle_report()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_battle_report::InitAsDefaultInstance() {
}

sc_battle_report::sc_battle_report(const sc_battle_report& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_battle_report::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_battle_report::~sc_battle_report() {
  SharedDtor();
}

void sc_battle_report::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sc_battle_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_battle_report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_battle_report_descriptor_;
}

const sc_battle_report& sc_battle_report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scmsg_2eproto();
  return *default_instance_;
}

sc_battle_report* sc_battle_report::default_instance_ = NULL;

sc_battle_report* sc_battle_report::New() const {
  return new sc_battle_report;
}

void sc_battle_report::Clear() {
  lchar_.Clear();
  rchar_.Clear();
  actions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_battle_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 lchar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lchar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_lchar())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lchar())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_lchar;
        if (input->ExpectTag(16)) goto parse_rchar;
        break;
      }

      // repeated int32 rchar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rchar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_rchar())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rchar())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rchar;
        if (input->ExpectTag(26)) goto parse_actions;
        break;
      }

      // repeated .sc_battle_action actions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_actions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_battle_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 lchar = 1;
  for (int i = 0; i < this->lchar_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->lchar(i), output);
  }

  // repeated int32 rchar = 2;
  for (int i = 0; i < this->rchar_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->rchar(i), output);
  }

  // repeated .sc_battle_action actions = 3;
  for (int i = 0; i < this->actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->actions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_battle_report::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 lchar = 1;
  for (int i = 0; i < this->lchar_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->lchar(i), target);
  }

  // repeated int32 rchar = 2;
  for (int i = 0; i < this->rchar_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->rchar(i), target);
  }

  // repeated .sc_battle_action actions = 3;
  for (int i = 0; i < this->actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->actions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_battle_report::ByteSize() const {
  int total_size = 0;

  // repeated int32 lchar = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->lchar_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lchar(i));
    }
    total_size += 1 * this->lchar_size() + data_size;
  }

  // repeated int32 rchar = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->rchar_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rchar(i));
    }
    total_size += 1 * this->rchar_size() + data_size;
  }

  // repeated .sc_battle_action actions = 3;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_battle_report::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_battle_report* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_battle_report*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_battle_report::MergeFrom(const sc_battle_report& from) {
  GOOGLE_CHECK_NE(&from, this);
  lchar_.MergeFrom(from.lchar_);
  rchar_.MergeFrom(from.rchar_);
  actions_.MergeFrom(from.actions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_battle_report::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_battle_report::CopyFrom(const sc_battle_report& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_battle_report::IsInitialized() const {

  return true;
}

void sc_battle_report::Swap(sc_battle_report* other) {
  if (other != this) {
    lchar_.Swap(&other->lchar_);
    rchar_.Swap(&other->rchar_);
    actions_.Swap(&other->actions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_battle_report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_battle_report_descriptor_;
  metadata.reflection = sc_battle_report_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scmsg::kLoginResFieldNumber;
const int scmsg::kTalkFieldNumber;
const int scmsg::kPlayerDataFieldNumber;
const int scmsg::kBattleReportFieldNumber;
#endif  // !_MSC_VER

scmsg::scmsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void scmsg::InitAsDefaultInstance() {
  login_res_ = const_cast< ::sc_login_res*>(&::sc_login_res::default_instance());
  talk_ = const_cast< ::sc_talk*>(&::sc_talk::default_instance());
  player_data_ = const_cast< ::sc_player_data*>(&::sc_player_data::default_instance());
  battle_report_ = const_cast< ::sc_battle_report*>(&::sc_battle_report::default_instance());
}

scmsg::scmsg(const scmsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void scmsg::SharedCtor() {
  _cached_size_ = 0;
  login_res_ = NULL;
  talk_ = NULL;
  player_data_ = NULL;
  battle_report_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scmsg::~scmsg() {
  SharedDtor();
}

void scmsg::SharedDtor() {
  if (this != default_instance_) {
    delete login_res_;
    delete talk_;
    delete player_data_;
    delete battle_report_;
  }
}

void scmsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scmsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scmsg_descriptor_;
}

const scmsg& scmsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scmsg_2eproto();
  return *default_instance_;
}

scmsg* scmsg::default_instance_ = NULL;

scmsg* scmsg::New() const {
  return new scmsg;
}

void scmsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_login_res()) {
      if (login_res_ != NULL) login_res_->::sc_login_res::Clear();
    }
    if (has_talk()) {
      if (talk_ != NULL) talk_->::sc_talk::Clear();
    }
    if (has_player_data()) {
      if (player_data_ != NULL) player_data_->::sc_player_data::Clear();
    }
    if (has_battle_report()) {
      if (battle_report_ != NULL) battle_report_->::sc_battle_report::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scmsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sc_login_res login_res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_talk;
        break;
      }

      // optional .sc_talk talk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_talk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_data;
        break;
      }

      // optional .sc_player_data player_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_battle_report;
        break;
      }

      // optional .sc_battle_report battle_report = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void scmsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sc_login_res login_res = 1;
  if (has_login_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->login_res(), output);
  }

  // optional .sc_talk talk = 2;
  if (has_talk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->talk(), output);
  }

  // optional .sc_player_data player_data = 3;
  if (has_player_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_data(), output);
  }

  // optional .sc_battle_report battle_report = 4;
  if (has_battle_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->battle_report(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* scmsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .sc_login_res login_res = 1;
  if (has_login_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->login_res(), target);
  }

  // optional .sc_talk talk = 2;
  if (has_talk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->talk(), target);
  }

  // optional .sc_player_data player_data = 3;
  if (has_player_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_data(), target);
  }

  // optional .sc_battle_report battle_report = 4;
  if (has_battle_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->battle_report(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int scmsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sc_login_res login_res = 1;
    if (has_login_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_res());
    }

    // optional .sc_talk talk = 2;
    if (has_talk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->talk());
    }

    // optional .sc_player_data player_data = 3;
    if (has_player_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_data());
    }

    // optional .sc_battle_report battle_report = 4;
    if (has_battle_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_report());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scmsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scmsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scmsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scmsg::MergeFrom(const scmsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login_res()) {
      mutable_login_res()->::sc_login_res::MergeFrom(from.login_res());
    }
    if (from.has_talk()) {
      mutable_talk()->::sc_talk::MergeFrom(from.talk());
    }
    if (from.has_player_data()) {
      mutable_player_data()->::sc_player_data::MergeFrom(from.player_data());
    }
    if (from.has_battle_report()) {
      mutable_battle_report()->::sc_battle_report::MergeFrom(from.battle_report());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scmsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scmsg::CopyFrom(const scmsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scmsg::IsInitialized() const {

  return true;
}

void scmsg::Swap(scmsg* other) {
  if (other != this) {
    std::swap(login_res_, other->login_res_);
    std::swap(talk_, other->talk_);
    std::swap(player_data_, other->player_data_);
    std::swap(battle_report_, other->battle_report_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scmsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scmsg_descriptor_;
  metadata.reflection = scmsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
