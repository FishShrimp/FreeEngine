// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csmsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "csmsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* cs_connect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_connect_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_disconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_disconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_login_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_talk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_talk_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_buy_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_buy_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_shop_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_shop_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_charge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_charge_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_pack_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_pack_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_select_teammember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_select_teammember_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_challenge_mission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_challenge_mission_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_friend_add_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_friend_add_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_friend_mobility_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_friend_mobility_reflection_ = NULL;
const ::google::protobuf::Descriptor* csmsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csmsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_csmsg_2eproto() {
  protobuf_AddDesc_csmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "csmsg.proto");
  GOOGLE_CHECK(file != NULL);
  cs_connect_descriptor_ = file->message_type(0);
  static const int cs_connect_offsets_[1] = {
  };
  cs_connect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_connect_descriptor_,
      cs_connect::default_instance_,
      cs_connect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_connect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_connect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_connect));
  cs_disconnect_descriptor_ = file->message_type(1);
  static const int cs_disconnect_offsets_[1] = {
  };
  cs_disconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_disconnect_descriptor_,
      cs_disconnect::default_instance_,
      cs_disconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_disconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_disconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_disconnect));
  cs_login_descriptor_ = file->message_type(2);
  static const int cs_login_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_login, id_),
  };
  cs_login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_login_descriptor_,
      cs_login::default_instance_,
      cs_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_login));
  cs_talk_descriptor_ = file->message_type(3);
  static const int cs_talk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_talk, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_talk, msg_),
  };
  cs_talk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_talk_descriptor_,
      cs_talk::default_instance_,
      cs_talk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_talk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_talk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_talk));
  cs_buy_hero_descriptor_ = file->message_type(4);
  static const int cs_buy_hero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_buy_hero, idx_),
  };
  cs_buy_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_buy_hero_descriptor_,
      cs_buy_hero::default_instance_,
      cs_buy_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_buy_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_buy_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_buy_hero));
  cs_shop_item_descriptor_ = file->message_type(5);
  static const int cs_shop_item_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_shop_item, idx_),
  };
  cs_shop_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_shop_item_descriptor_,
      cs_shop_item::default_instance_,
      cs_shop_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_shop_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_shop_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_shop_item));
  cs_charge_descriptor_ = file->message_type(6);
  static const int cs_charge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_charge, diamond_),
  };
  cs_charge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_charge_descriptor_,
      cs_charge::default_instance_,
      cs_charge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_charge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_charge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_charge));
  cs_pack_hero_descriptor_ = file->message_type(7);
  static const int cs_pack_hero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_pack_hero, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_pack_hero, slot_),
  };
  cs_pack_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_pack_hero_descriptor_,
      cs_pack_hero::default_instance_,
      cs_pack_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_pack_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_pack_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_pack_hero));
  cs_select_teammember_descriptor_ = file->message_type(8);
  static const int cs_select_teammember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_select_teammember, teamslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_select_teammember, packslot_),
  };
  cs_select_teammember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_select_teammember_descriptor_,
      cs_select_teammember::default_instance_,
      cs_select_teammember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_select_teammember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_select_teammember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_select_teammember));
  cs_challenge_mission_descriptor_ = file->message_type(9);
  static const int cs_challenge_mission_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_challenge_mission, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_challenge_mission, level_),
  };
  cs_challenge_mission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_challenge_mission_descriptor_,
      cs_challenge_mission::default_instance_,
      cs_challenge_mission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_challenge_mission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_challenge_mission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_challenge_mission));
  cs_friend_add_descriptor_ = file->message_type(10);
  static const int cs_friend_add_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_friend_add, name_),
  };
  cs_friend_add_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_friend_add_descriptor_,
      cs_friend_add::default_instance_,
      cs_friend_add_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_friend_add, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_friend_add, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_friend_add));
  cs_friend_mobility_descriptor_ = file->message_type(11);
  static const int cs_friend_mobility_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_friend_mobility, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_friend_mobility, idx_),
  };
  cs_friend_mobility_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_friend_mobility_descriptor_,
      cs_friend_mobility::default_instance_,
      cs_friend_mobility_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_friend_mobility, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_friend_mobility, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_friend_mobility));
  csmsg_descriptor_ = file->message_type(12);
  static const int csmsg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csmsg, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csmsg, disconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csmsg, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csmsg, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csmsg, buy_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csmsg, shop_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csmsg, pack_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csmsg, select_teammember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csmsg, challenge_mission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csmsg, talk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csmsg, friend_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csmsg, friend_mobility_),
  };
  csmsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csmsg_descriptor_,
      csmsg::default_instance_,
      csmsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csmsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csmsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csmsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_csmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_connect_descriptor_, &cs_connect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_disconnect_descriptor_, &cs_disconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_login_descriptor_, &cs_login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_talk_descriptor_, &cs_talk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_buy_hero_descriptor_, &cs_buy_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_shop_item_descriptor_, &cs_shop_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_charge_descriptor_, &cs_charge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_pack_hero_descriptor_, &cs_pack_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_select_teammember_descriptor_, &cs_select_teammember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_challenge_mission_descriptor_, &cs_challenge_mission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_friend_add_descriptor_, &cs_friend_add::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_friend_mobility_descriptor_, &cs_friend_mobility::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csmsg_descriptor_, &csmsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_csmsg_2eproto() {
  delete cs_connect::default_instance_;
  delete cs_connect_reflection_;
  delete cs_disconnect::default_instance_;
  delete cs_disconnect_reflection_;
  delete cs_login::default_instance_;
  delete cs_login_reflection_;
  delete cs_talk::default_instance_;
  delete cs_talk_reflection_;
  delete cs_buy_hero::default_instance_;
  delete cs_buy_hero_reflection_;
  delete cs_shop_item::default_instance_;
  delete cs_shop_item_reflection_;
  delete cs_charge::default_instance_;
  delete cs_charge_reflection_;
  delete cs_pack_hero::default_instance_;
  delete cs_pack_hero_reflection_;
  delete cs_select_teammember::default_instance_;
  delete cs_select_teammember_reflection_;
  delete cs_challenge_mission::default_instance_;
  delete cs_challenge_mission_reflection_;
  delete cs_friend_add::default_instance_;
  delete cs_friend_add_reflection_;
  delete cs_friend_mobility::default_instance_;
  delete cs_friend_mobility_reflection_;
  delete csmsg::default_instance_;
  delete csmsg_reflection_;
}

void protobuf_AddDesc_csmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013csmsg.proto\"\014\n\ncs_connect\"\017\n\rcs_discon"
    "nect\"\026\n\010cs_login\022\n\n\002id\030\001 \001(\014\"\"\n\007cs_talk\022"
    "\n\n\002to\030\001 \001(\014\022\013\n\003msg\030\003 \001(\014\"\032\n\013cs_buy_hero\022"
    "\013\n\003idx\030\001 \001(\005\"\033\n\014cs_shop_item\022\013\n\003idx\030\001 \001("
    "\005\"\034\n\tcs_charge\022\017\n\007diamond\030\001 \001(\005\",\n\014cs_pa"
    "ck_hero\022\016\n\006action\030\001 \001(\005\022\014\n\004slot\030\002 \001(\005\":\n"
    "\024cs_select_teammember\022\020\n\010teamslot\030\001 \001(\005\022"
    "\020\n\010packslot\030\002 \001(\005\"3\n\024cs_challenge_missio"
    "n\022\014\n\004type\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\"\035\n\rcs_fri"
    "end_add\022\014\n\004name\030\001 \001(\014\"1\n\022cs_friend_mobil"
    "ity\022\016\n\006action\030\001 \001(\005\022\013\n\003idx\030\002 \001(\005\"\261\003\n\005csm"
    "sg\022\034\n\007connect\030\001 \001(\0132\013.cs_connect\022\"\n\ndisc"
    "onnect\030\002 \001(\0132\016.cs_disconnect\022\030\n\005login\030\003 "
    "\001(\0132\t.cs_login\022\032\n\006charge\030\004 \001(\0132\n.cs_char"
    "ge\022\036\n\010buy_hero\030\005 \001(\0132\014.cs_buy_hero\022 \n\tsh"
    "op_item\030\006 \001(\0132\r.cs_shop_item\022 \n\tpack_her"
    "o\030\007 \001(\0132\r.cs_pack_hero\0220\n\021select_teammem"
    "ber\030\010 \001(\0132\025.cs_select_teammember\0220\n\021chal"
    "lenge_mission\030\t \001(\0132\025.cs_challenge_missi"
    "on\022\026\n\004talk\030\n \001(\0132\010.cs_talk\022\"\n\nfriend_add"
    "\030\013 \001(\0132\016.cs_friend_add\022,\n\017friend_mobilit"
    "y\030\014 \001(\0132\023.cs_friend_mobility", 868);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "csmsg.proto", &protobuf_RegisterTypes);
  cs_connect::default_instance_ = new cs_connect();
  cs_disconnect::default_instance_ = new cs_disconnect();
  cs_login::default_instance_ = new cs_login();
  cs_talk::default_instance_ = new cs_talk();
  cs_buy_hero::default_instance_ = new cs_buy_hero();
  cs_shop_item::default_instance_ = new cs_shop_item();
  cs_charge::default_instance_ = new cs_charge();
  cs_pack_hero::default_instance_ = new cs_pack_hero();
  cs_select_teammember::default_instance_ = new cs_select_teammember();
  cs_challenge_mission::default_instance_ = new cs_challenge_mission();
  cs_friend_add::default_instance_ = new cs_friend_add();
  cs_friend_mobility::default_instance_ = new cs_friend_mobility();
  csmsg::default_instance_ = new csmsg();
  cs_connect::default_instance_->InitAsDefaultInstance();
  cs_disconnect::default_instance_->InitAsDefaultInstance();
  cs_login::default_instance_->InitAsDefaultInstance();
  cs_talk::default_instance_->InitAsDefaultInstance();
  cs_buy_hero::default_instance_->InitAsDefaultInstance();
  cs_shop_item::default_instance_->InitAsDefaultInstance();
  cs_charge::default_instance_->InitAsDefaultInstance();
  cs_pack_hero::default_instance_->InitAsDefaultInstance();
  cs_select_teammember::default_instance_->InitAsDefaultInstance();
  cs_challenge_mission::default_instance_->InitAsDefaultInstance();
  cs_friend_add::default_instance_->InitAsDefaultInstance();
  cs_friend_mobility::default_instance_->InitAsDefaultInstance();
  csmsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_csmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_csmsg_2eproto {
  StaticDescriptorInitializer_csmsg_2eproto() {
    protobuf_AddDesc_csmsg_2eproto();
  }
} static_descriptor_initializer_csmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

cs_connect::cs_connect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_connect::InitAsDefaultInstance() {
}

cs_connect::cs_connect(const cs_connect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_connect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_connect::~cs_connect() {
  SharedDtor();
}

void cs_connect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cs_connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_connect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_connect_descriptor_;
}

const cs_connect& cs_connect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csmsg_2eproto();
  return *default_instance_;
}

cs_connect* cs_connect::default_instance_ = NULL;

cs_connect* cs_connect::New() const {
  return new cs_connect;
}

void cs_connect::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void cs_connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_connect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_connect::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_connect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_connect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_connect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_connect::MergeFrom(const cs_connect& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_connect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_connect::CopyFrom(const cs_connect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_connect::IsInitialized() const {

  return true;
}

void cs_connect::Swap(cs_connect* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_connect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_connect_descriptor_;
  metadata.reflection = cs_connect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

cs_disconnect::cs_disconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_disconnect::InitAsDefaultInstance() {
}

cs_disconnect::cs_disconnect(const cs_disconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_disconnect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_disconnect::~cs_disconnect() {
  SharedDtor();
}

void cs_disconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cs_disconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_disconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_disconnect_descriptor_;
}

const cs_disconnect& cs_disconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csmsg_2eproto();
  return *default_instance_;
}

cs_disconnect* cs_disconnect::default_instance_ = NULL;

cs_disconnect* cs_disconnect::New() const {
  return new cs_disconnect;
}

void cs_disconnect::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_disconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void cs_disconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_disconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_disconnect::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_disconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_disconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_disconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_disconnect::MergeFrom(const cs_disconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_disconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_disconnect::CopyFrom(const cs_disconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_disconnect::IsInitialized() const {

  return true;
}

void cs_disconnect::Swap(cs_disconnect* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_disconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_disconnect_descriptor_;
  metadata.reflection = cs_disconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_login::kIdFieldNumber;
#endif  // !_MSC_VER

cs_login::cs_login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_login::InitAsDefaultInstance() {
}

cs_login::cs_login(const cs_login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_login::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_login::~cs_login() {
  SharedDtor();
}

void cs_login::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void cs_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_login_descriptor_;
}

const cs_login& cs_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csmsg_2eproto();
  return *default_instance_;
}

cs_login* cs_login::default_instance_ = NULL;

cs_login* cs_login::New() const {
  return new cs_login;
}

void cs_login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_login::MergeFrom(const cs_login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_login::CopyFrom(const cs_login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_login::IsInitialized() const {

  return true;
}

void cs_login::Swap(cs_login* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_login_descriptor_;
  metadata.reflection = cs_login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_talk::kToFieldNumber;
const int cs_talk::kMsgFieldNumber;
#endif  // !_MSC_VER

cs_talk::cs_talk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_talk::InitAsDefaultInstance() {
}

cs_talk::cs_talk(const cs_talk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_talk::SharedCtor() {
  _cached_size_ = 0;
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_talk::~cs_talk() {
  SharedDtor();
}

void cs_talk::SharedDtor() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void cs_talk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_talk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_talk_descriptor_;
}

const cs_talk& cs_talk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csmsg_2eproto();
  return *default_instance_;
}

cs_talk* cs_talk::default_instance_ = NULL;

cs_talk* cs_talk::New() const {
  return new cs_talk;
}

void cs_talk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_talk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes to = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional bytes msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_talk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes to = 1;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->to(), output);
  }

  // optional bytes msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_talk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes to = 1;
  if (has_to()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->to(), target);
  }

  // optional bytes msg = 3;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_talk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes to = 1;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to());
    }

    // optional bytes msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_talk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_talk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_talk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_talk::MergeFrom(const cs_talk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_talk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_talk::CopyFrom(const cs_talk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_talk::IsInitialized() const {

  return true;
}

void cs_talk::Swap(cs_talk* other) {
  if (other != this) {
    std::swap(to_, other->to_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_talk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_talk_descriptor_;
  metadata.reflection = cs_talk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_buy_hero::kIdxFieldNumber;
#endif  // !_MSC_VER

cs_buy_hero::cs_buy_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_buy_hero::InitAsDefaultInstance() {
}

cs_buy_hero::cs_buy_hero(const cs_buy_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_buy_hero::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_buy_hero::~cs_buy_hero() {
  SharedDtor();
}

void cs_buy_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cs_buy_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_buy_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_buy_hero_descriptor_;
}

const cs_buy_hero& cs_buy_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csmsg_2eproto();
  return *default_instance_;
}

cs_buy_hero* cs_buy_hero::default_instance_ = NULL;

cs_buy_hero* cs_buy_hero::New() const {
  return new cs_buy_hero;
}

void cs_buy_hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_buy_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_buy_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_buy_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_buy_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_buy_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_buy_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_buy_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_buy_hero::MergeFrom(const cs_buy_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_buy_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_buy_hero::CopyFrom(const cs_buy_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_buy_hero::IsInitialized() const {

  return true;
}

void cs_buy_hero::Swap(cs_buy_hero* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_buy_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_buy_hero_descriptor_;
  metadata.reflection = cs_buy_hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_shop_item::kIdxFieldNumber;
#endif  // !_MSC_VER

cs_shop_item::cs_shop_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_shop_item::InitAsDefaultInstance() {
}

cs_shop_item::cs_shop_item(const cs_shop_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_shop_item::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_shop_item::~cs_shop_item() {
  SharedDtor();
}

void cs_shop_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cs_shop_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_shop_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_shop_item_descriptor_;
}

const cs_shop_item& cs_shop_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csmsg_2eproto();
  return *default_instance_;
}

cs_shop_item* cs_shop_item::default_instance_ = NULL;

cs_shop_item* cs_shop_item::New() const {
  return new cs_shop_item;
}

void cs_shop_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_shop_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_shop_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_shop_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_shop_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_shop_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_shop_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_shop_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_shop_item::MergeFrom(const cs_shop_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_shop_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_shop_item::CopyFrom(const cs_shop_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_shop_item::IsInitialized() const {

  return true;
}

void cs_shop_item::Swap(cs_shop_item* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_shop_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_shop_item_descriptor_;
  metadata.reflection = cs_shop_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_charge::kDiamondFieldNumber;
#endif  // !_MSC_VER

cs_charge::cs_charge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_charge::InitAsDefaultInstance() {
}

cs_charge::cs_charge(const cs_charge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_charge::SharedCtor() {
  _cached_size_ = 0;
  diamond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_charge::~cs_charge() {
  SharedDtor();
}

void cs_charge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cs_charge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_charge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_charge_descriptor_;
}

const cs_charge& cs_charge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csmsg_2eproto();
  return *default_instance_;
}

cs_charge* cs_charge::default_instance_ = NULL;

cs_charge* cs_charge::New() const {
  return new cs_charge;
}

void cs_charge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    diamond_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_charge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 diamond = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_charge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 diamond = 1;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->diamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_charge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 diamond = 1;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->diamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_charge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 diamond = 1;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_charge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_charge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_charge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_charge::MergeFrom(const cs_charge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_charge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_charge::CopyFrom(const cs_charge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_charge::IsInitialized() const {

  return true;
}

void cs_charge::Swap(cs_charge* other) {
  if (other != this) {
    std::swap(diamond_, other->diamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_charge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_charge_descriptor_;
  metadata.reflection = cs_charge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_pack_hero::kActionFieldNumber;
const int cs_pack_hero::kSlotFieldNumber;
#endif  // !_MSC_VER

cs_pack_hero::cs_pack_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_pack_hero::InitAsDefaultInstance() {
}

cs_pack_hero::cs_pack_hero(const cs_pack_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_pack_hero::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_pack_hero::~cs_pack_hero() {
  SharedDtor();
}

void cs_pack_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cs_pack_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_pack_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_pack_hero_descriptor_;
}

const cs_pack_hero& cs_pack_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csmsg_2eproto();
  return *default_instance_;
}

cs_pack_hero* cs_pack_hero::default_instance_ = NULL;

cs_pack_hero* cs_pack_hero::New() const {
  return new cs_pack_hero;
}

void cs_pack_hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_pack_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_pack_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_pack_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action(), target);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_pack_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_pack_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_pack_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_pack_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_pack_hero::MergeFrom(const cs_pack_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_pack_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_pack_hero::CopyFrom(const cs_pack_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_pack_hero::IsInitialized() const {

  return true;
}

void cs_pack_hero::Swap(cs_pack_hero* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_pack_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_pack_hero_descriptor_;
  metadata.reflection = cs_pack_hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_select_teammember::kTeamslotFieldNumber;
const int cs_select_teammember::kPackslotFieldNumber;
#endif  // !_MSC_VER

cs_select_teammember::cs_select_teammember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_select_teammember::InitAsDefaultInstance() {
}

cs_select_teammember::cs_select_teammember(const cs_select_teammember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_select_teammember::SharedCtor() {
  _cached_size_ = 0;
  teamslot_ = 0;
  packslot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_select_teammember::~cs_select_teammember() {
  SharedDtor();
}

void cs_select_teammember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cs_select_teammember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_select_teammember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_select_teammember_descriptor_;
}

const cs_select_teammember& cs_select_teammember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csmsg_2eproto();
  return *default_instance_;
}

cs_select_teammember* cs_select_teammember::default_instance_ = NULL;

cs_select_teammember* cs_select_teammember::New() const {
  return new cs_select_teammember;
}

void cs_select_teammember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamslot_ = 0;
    packslot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_select_teammember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 teamslot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamslot_)));
          set_has_teamslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_packslot;
        break;
      }

      // optional int32 packslot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packslot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packslot_)));
          set_has_packslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_select_teammember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 teamslot = 1;
  if (has_teamslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->teamslot(), output);
  }

  // optional int32 packslot = 2;
  if (has_packslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->packslot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_select_teammember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 teamslot = 1;
  if (has_teamslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->teamslot(), target);
  }

  // optional int32 packslot = 2;
  if (has_packslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->packslot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_select_teammember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 teamslot = 1;
    if (has_teamslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamslot());
    }

    // optional int32 packslot = 2;
    if (has_packslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packslot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_select_teammember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_select_teammember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_select_teammember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_select_teammember::MergeFrom(const cs_select_teammember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamslot()) {
      set_teamslot(from.teamslot());
    }
    if (from.has_packslot()) {
      set_packslot(from.packslot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_select_teammember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_select_teammember::CopyFrom(const cs_select_teammember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_select_teammember::IsInitialized() const {

  return true;
}

void cs_select_teammember::Swap(cs_select_teammember* other) {
  if (other != this) {
    std::swap(teamslot_, other->teamslot_);
    std::swap(packslot_, other->packslot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_select_teammember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_select_teammember_descriptor_;
  metadata.reflection = cs_select_teammember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_challenge_mission::kTypeFieldNumber;
const int cs_challenge_mission::kLevelFieldNumber;
#endif  // !_MSC_VER

cs_challenge_mission::cs_challenge_mission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_challenge_mission::InitAsDefaultInstance() {
}

cs_challenge_mission::cs_challenge_mission(const cs_challenge_mission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_challenge_mission::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_challenge_mission::~cs_challenge_mission() {
  SharedDtor();
}

void cs_challenge_mission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cs_challenge_mission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_challenge_mission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_challenge_mission_descriptor_;
}

const cs_challenge_mission& cs_challenge_mission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csmsg_2eproto();
  return *default_instance_;
}

cs_challenge_mission* cs_challenge_mission::default_instance_ = NULL;

cs_challenge_mission* cs_challenge_mission::New() const {
  return new cs_challenge_mission;
}

void cs_challenge_mission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_challenge_mission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_challenge_mission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_challenge_mission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_challenge_mission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_challenge_mission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_challenge_mission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_challenge_mission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_challenge_mission::MergeFrom(const cs_challenge_mission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_challenge_mission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_challenge_mission::CopyFrom(const cs_challenge_mission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_challenge_mission::IsInitialized() const {

  return true;
}

void cs_challenge_mission::Swap(cs_challenge_mission* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_challenge_mission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_challenge_mission_descriptor_;
  metadata.reflection = cs_challenge_mission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_friend_add::kNameFieldNumber;
#endif  // !_MSC_VER

cs_friend_add::cs_friend_add()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_friend_add::InitAsDefaultInstance() {
}

cs_friend_add::cs_friend_add(const cs_friend_add& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_friend_add::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_friend_add::~cs_friend_add() {
  SharedDtor();
}

void cs_friend_add::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void cs_friend_add::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_friend_add::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_friend_add_descriptor_;
}

const cs_friend_add& cs_friend_add::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csmsg_2eproto();
  return *default_instance_;
}

cs_friend_add* cs_friend_add::default_instance_ = NULL;

cs_friend_add* cs_friend_add::New() const {
  return new cs_friend_add;
}

void cs_friend_add::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_friend_add::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_friend_add::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_friend_add::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_friend_add::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_friend_add::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_friend_add* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_friend_add*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_friend_add::MergeFrom(const cs_friend_add& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_friend_add::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_friend_add::CopyFrom(const cs_friend_add& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_friend_add::IsInitialized() const {

  return true;
}

void cs_friend_add::Swap(cs_friend_add* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_friend_add::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_friend_add_descriptor_;
  metadata.reflection = cs_friend_add_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_friend_mobility::kActionFieldNumber;
const int cs_friend_mobility::kIdxFieldNumber;
#endif  // !_MSC_VER

cs_friend_mobility::cs_friend_mobility()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_friend_mobility::InitAsDefaultInstance() {
}

cs_friend_mobility::cs_friend_mobility(const cs_friend_mobility& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_friend_mobility::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_friend_mobility::~cs_friend_mobility() {
  SharedDtor();
}

void cs_friend_mobility::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cs_friend_mobility::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_friend_mobility::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_friend_mobility_descriptor_;
}

const cs_friend_mobility& cs_friend_mobility::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csmsg_2eproto();
  return *default_instance_;
}

cs_friend_mobility* cs_friend_mobility::default_instance_ = NULL;

cs_friend_mobility* cs_friend_mobility::New() const {
  return new cs_friend_mobility;
}

void cs_friend_mobility::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
    idx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_friend_mobility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idx;
        break;
      }

      // optional int32 idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_friend_mobility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }

  // optional int32 idx = 2;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_friend_mobility::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action(), target);
  }

  // optional int32 idx = 2;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_friend_mobility::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

    // optional int32 idx = 2;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_friend_mobility::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_friend_mobility* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_friend_mobility*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_friend_mobility::MergeFrom(const cs_friend_mobility& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_friend_mobility::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_friend_mobility::CopyFrom(const cs_friend_mobility& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_friend_mobility::IsInitialized() const {

  return true;
}

void cs_friend_mobility::Swap(cs_friend_mobility* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_friend_mobility::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_friend_mobility_descriptor_;
  metadata.reflection = cs_friend_mobility_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int csmsg::kConnectFieldNumber;
const int csmsg::kDisconnectFieldNumber;
const int csmsg::kLoginFieldNumber;
const int csmsg::kChargeFieldNumber;
const int csmsg::kBuyHeroFieldNumber;
const int csmsg::kShopItemFieldNumber;
const int csmsg::kPackHeroFieldNumber;
const int csmsg::kSelectTeammemberFieldNumber;
const int csmsg::kChallengeMissionFieldNumber;
const int csmsg::kTalkFieldNumber;
const int csmsg::kFriendAddFieldNumber;
const int csmsg::kFriendMobilityFieldNumber;
#endif  // !_MSC_VER

csmsg::csmsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void csmsg::InitAsDefaultInstance() {
  connect_ = const_cast< ::cs_connect*>(&::cs_connect::default_instance());
  disconnect_ = const_cast< ::cs_disconnect*>(&::cs_disconnect::default_instance());
  login_ = const_cast< ::cs_login*>(&::cs_login::default_instance());
  charge_ = const_cast< ::cs_charge*>(&::cs_charge::default_instance());
  buy_hero_ = const_cast< ::cs_buy_hero*>(&::cs_buy_hero::default_instance());
  shop_item_ = const_cast< ::cs_shop_item*>(&::cs_shop_item::default_instance());
  pack_hero_ = const_cast< ::cs_pack_hero*>(&::cs_pack_hero::default_instance());
  select_teammember_ = const_cast< ::cs_select_teammember*>(&::cs_select_teammember::default_instance());
  challenge_mission_ = const_cast< ::cs_challenge_mission*>(&::cs_challenge_mission::default_instance());
  talk_ = const_cast< ::cs_talk*>(&::cs_talk::default_instance());
  friend_add_ = const_cast< ::cs_friend_add*>(&::cs_friend_add::default_instance());
  friend_mobility_ = const_cast< ::cs_friend_mobility*>(&::cs_friend_mobility::default_instance());
}

csmsg::csmsg(const csmsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void csmsg::SharedCtor() {
  _cached_size_ = 0;
  connect_ = NULL;
  disconnect_ = NULL;
  login_ = NULL;
  charge_ = NULL;
  buy_hero_ = NULL;
  shop_item_ = NULL;
  pack_hero_ = NULL;
  select_teammember_ = NULL;
  challenge_mission_ = NULL;
  talk_ = NULL;
  friend_add_ = NULL;
  friend_mobility_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csmsg::~csmsg() {
  SharedDtor();
}

void csmsg::SharedDtor() {
  if (this != default_instance_) {
    delete connect_;
    delete disconnect_;
    delete login_;
    delete charge_;
    delete buy_hero_;
    delete shop_item_;
    delete pack_hero_;
    delete select_teammember_;
    delete challenge_mission_;
    delete talk_;
    delete friend_add_;
    delete friend_mobility_;
  }
}

void csmsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csmsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csmsg_descriptor_;
}

const csmsg& csmsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csmsg_2eproto();
  return *default_instance_;
}

csmsg* csmsg::default_instance_ = NULL;

csmsg* csmsg::New() const {
  return new csmsg;
}

void csmsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_connect()) {
      if (connect_ != NULL) connect_->::cs_connect::Clear();
    }
    if (has_disconnect()) {
      if (disconnect_ != NULL) disconnect_->::cs_disconnect::Clear();
    }
    if (has_login()) {
      if (login_ != NULL) login_->::cs_login::Clear();
    }
    if (has_charge()) {
      if (charge_ != NULL) charge_->::cs_charge::Clear();
    }
    if (has_buy_hero()) {
      if (buy_hero_ != NULL) buy_hero_->::cs_buy_hero::Clear();
    }
    if (has_shop_item()) {
      if (shop_item_ != NULL) shop_item_->::cs_shop_item::Clear();
    }
    if (has_pack_hero()) {
      if (pack_hero_ != NULL) pack_hero_->::cs_pack_hero::Clear();
    }
    if (has_select_teammember()) {
      if (select_teammember_ != NULL) select_teammember_->::cs_select_teammember::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_challenge_mission()) {
      if (challenge_mission_ != NULL) challenge_mission_->::cs_challenge_mission::Clear();
    }
    if (has_talk()) {
      if (talk_ != NULL) talk_->::cs_talk::Clear();
    }
    if (has_friend_add()) {
      if (friend_add_ != NULL) friend_add_->::cs_friend_add::Clear();
    }
    if (has_friend_mobility()) {
      if (friend_mobility_ != NULL) friend_mobility_->::cs_friend_mobility::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csmsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cs_connect connect = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_disconnect;
        break;
      }

      // optional .cs_disconnect disconnect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disconnect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disconnect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_login;
        break;
      }

      // optional .cs_login login = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_charge;
        break;
      }

      // optional .cs_charge charge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_buy_hero;
        break;
      }

      // optional .cs_buy_hero buy_hero = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buy_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_shop_item;
        break;
      }

      // optional .cs_shop_item shop_item = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pack_hero;
        break;
      }

      // optional .cs_pack_hero pack_hero = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pack_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pack_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_select_teammember;
        break;
      }

      // optional .cs_select_teammember select_teammember = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_select_teammember:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_select_teammember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_challenge_mission;
        break;
      }

      // optional .cs_challenge_mission challenge_mission = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challenge_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challenge_mission()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_talk;
        break;
      }

      // optional .cs_talk talk = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_talk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_friend_add;
        break;
      }

      // optional .cs_friend_add friend_add = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_add:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_add()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_friend_mobility;
        break;
      }

      // optional .cs_friend_mobility friend_mobility = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_mobility:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_mobility()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void csmsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cs_connect connect = 1;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->connect(), output);
  }

  // optional .cs_disconnect disconnect = 2;
  if (has_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->disconnect(), output);
  }

  // optional .cs_login login = 3;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->login(), output);
  }

  // optional .cs_charge charge = 4;
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->charge(), output);
  }

  // optional .cs_buy_hero buy_hero = 5;
  if (has_buy_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->buy_hero(), output);
  }

  // optional .cs_shop_item shop_item = 6;
  if (has_shop_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->shop_item(), output);
  }

  // optional .cs_pack_hero pack_hero = 7;
  if (has_pack_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pack_hero(), output);
  }

  // optional .cs_select_teammember select_teammember = 8;
  if (has_select_teammember()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->select_teammember(), output);
  }

  // optional .cs_challenge_mission challenge_mission = 9;
  if (has_challenge_mission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->challenge_mission(), output);
  }

  // optional .cs_talk talk = 10;
  if (has_talk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->talk(), output);
  }

  // optional .cs_friend_add friend_add = 11;
  if (has_friend_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->friend_add(), output);
  }

  // optional .cs_friend_mobility friend_mobility = 12;
  if (has_friend_mobility()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->friend_mobility(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* csmsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cs_connect connect = 1;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->connect(), target);
  }

  // optional .cs_disconnect disconnect = 2;
  if (has_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->disconnect(), target);
  }

  // optional .cs_login login = 3;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->login(), target);
  }

  // optional .cs_charge charge = 4;
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->charge(), target);
  }

  // optional .cs_buy_hero buy_hero = 5;
  if (has_buy_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->buy_hero(), target);
  }

  // optional .cs_shop_item shop_item = 6;
  if (has_shop_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->shop_item(), target);
  }

  // optional .cs_pack_hero pack_hero = 7;
  if (has_pack_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pack_hero(), target);
  }

  // optional .cs_select_teammember select_teammember = 8;
  if (has_select_teammember()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->select_teammember(), target);
  }

  // optional .cs_challenge_mission challenge_mission = 9;
  if (has_challenge_mission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->challenge_mission(), target);
  }

  // optional .cs_talk talk = 10;
  if (has_talk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->talk(), target);
  }

  // optional .cs_friend_add friend_add = 11;
  if (has_friend_add()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->friend_add(), target);
  }

  // optional .cs_friend_mobility friend_mobility = 12;
  if (has_friend_mobility()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->friend_mobility(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int csmsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cs_connect connect = 1;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connect());
    }

    // optional .cs_disconnect disconnect = 2;
    if (has_disconnect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disconnect());
    }

    // optional .cs_login login = 3;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }

    // optional .cs_charge charge = 4;
    if (has_charge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charge());
    }

    // optional .cs_buy_hero buy_hero = 5;
    if (has_buy_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buy_hero());
    }

    // optional .cs_shop_item shop_item = 6;
    if (has_shop_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop_item());
    }

    // optional .cs_pack_hero pack_hero = 7;
    if (has_pack_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pack_hero());
    }

    // optional .cs_select_teammember select_teammember = 8;
    if (has_select_teammember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->select_teammember());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .cs_challenge_mission challenge_mission = 9;
    if (has_challenge_mission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challenge_mission());
    }

    // optional .cs_talk talk = 10;
    if (has_talk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->talk());
    }

    // optional .cs_friend_add friend_add = 11;
    if (has_friend_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_add());
    }

    // optional .cs_friend_mobility friend_mobility = 12;
    if (has_friend_mobility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_mobility());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csmsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csmsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csmsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csmsg::MergeFrom(const csmsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connect()) {
      mutable_connect()->::cs_connect::MergeFrom(from.connect());
    }
    if (from.has_disconnect()) {
      mutable_disconnect()->::cs_disconnect::MergeFrom(from.disconnect());
    }
    if (from.has_login()) {
      mutable_login()->::cs_login::MergeFrom(from.login());
    }
    if (from.has_charge()) {
      mutable_charge()->::cs_charge::MergeFrom(from.charge());
    }
    if (from.has_buy_hero()) {
      mutable_buy_hero()->::cs_buy_hero::MergeFrom(from.buy_hero());
    }
    if (from.has_shop_item()) {
      mutable_shop_item()->::cs_shop_item::MergeFrom(from.shop_item());
    }
    if (from.has_pack_hero()) {
      mutable_pack_hero()->::cs_pack_hero::MergeFrom(from.pack_hero());
    }
    if (from.has_select_teammember()) {
      mutable_select_teammember()->::cs_select_teammember::MergeFrom(from.select_teammember());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_challenge_mission()) {
      mutable_challenge_mission()->::cs_challenge_mission::MergeFrom(from.challenge_mission());
    }
    if (from.has_talk()) {
      mutable_talk()->::cs_talk::MergeFrom(from.talk());
    }
    if (from.has_friend_add()) {
      mutable_friend_add()->::cs_friend_add::MergeFrom(from.friend_add());
    }
    if (from.has_friend_mobility()) {
      mutable_friend_mobility()->::cs_friend_mobility::MergeFrom(from.friend_mobility());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csmsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csmsg::CopyFrom(const csmsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csmsg::IsInitialized() const {

  return true;
}

void csmsg::Swap(csmsg* other) {
  if (other != this) {
    std::swap(connect_, other->connect_);
    std::swap(disconnect_, other->disconnect_);
    std::swap(login_, other->login_);
    std::swap(charge_, other->charge_);
    std::swap(buy_hero_, other->buy_hero_);
    std::swap(shop_item_, other->shop_item_);
    std::swap(pack_hero_, other->pack_hero_);
    std::swap(select_teammember_, other->select_teammember_);
    std::swap(challenge_mission_, other->challenge_mission_);
    std::swap(talk_, other->talk_);
    std::swap(friend_add_, other->friend_add_);
    std::swap(friend_mobility_, other->friend_mobility_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csmsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csmsg_descriptor_;
  metadata.reflection = csmsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
