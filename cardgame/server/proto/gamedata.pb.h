// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gamedata.proto

#ifndef PROTOBUF_gamedata_2eproto__INCLUDED
#define PROTOBUF_gamedata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gamedata_2eproto();
void protobuf_AssignDesc_gamedata_2eproto();
void protobuf_ShutdownFile_gamedata_2eproto();

class PlayerSummaryProto;
class _GuildGuildMemberProto;
class GuildProto;
class FriendInfoProto;
class BaseInfoProto;
class SysInfoProto;
class CardProto;
class _PackageSlotProto;
class PackageProto;
class _TeamInfoTeamMemberProto;
class TeamInfoProto;
class _PlayerDataFriendsProto;
class PlayerDataProto;

// ===================================================================

class PlayerSummaryProto : public ::google::protobuf::Message {
 public:
  PlayerSummaryProto();
  virtual ~PlayerSummaryProto();

  PlayerSummaryProto(const PlayerSummaryProto& from);

  inline PlayerSummaryProto& operator=(const PlayerSummaryProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSummaryProto& default_instance();

  void Swap(PlayerSummaryProto* other);

  // implements Message ----------------------------------------------

  PlayerSummaryProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerSummaryProto& from);
  void MergeFrom(const PlayerSummaryProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional bytes Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional bytes Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:PlayerSummaryProto)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gamedata_2eproto();
  friend void protobuf_AssignDesc_gamedata_2eproto();
  friend void protobuf_ShutdownFile_gamedata_2eproto();

  void InitAsDefaultInstance();
  static PlayerSummaryProto* default_instance_;
};
// -------------------------------------------------------------------

class _GuildGuildMemberProto : public ::google::protobuf::Message {
 public:
  _GuildGuildMemberProto();
  virtual ~_GuildGuildMemberProto();

  _GuildGuildMemberProto(const _GuildGuildMemberProto& from);

  inline _GuildGuildMemberProto& operator=(const _GuildGuildMemberProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const _GuildGuildMemberProto& default_instance();

  void Swap(_GuildGuildMemberProto* other);

  // implements Message ----------------------------------------------

  _GuildGuildMemberProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _GuildGuildMemberProto& from);
  void MergeFrom(const _GuildGuildMemberProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PlayerSummaryProto _v0 = 1;
  inline bool has__v0() const;
  inline void clear__v0();
  static const int kV0FieldNumber = 1;
  inline const ::PlayerSummaryProto& _v0() const;
  inline ::PlayerSummaryProto* mutable__v0();
  inline ::PlayerSummaryProto* release__v0();
  inline void set_allocated__v0(::PlayerSummaryProto* _v0);

  // optional .PlayerSummaryProto _v1 = 2;
  inline bool has__v1() const;
  inline void clear__v1();
  static const int kV1FieldNumber = 2;
  inline const ::PlayerSummaryProto& _v1() const;
  inline ::PlayerSummaryProto* mutable__v1();
  inline ::PlayerSummaryProto* release__v1();
  inline void set_allocated__v1(::PlayerSummaryProto* _v1);

  // optional .PlayerSummaryProto _v2 = 3;
  inline bool has__v2() const;
  inline void clear__v2();
  static const int kV2FieldNumber = 3;
  inline const ::PlayerSummaryProto& _v2() const;
  inline ::PlayerSummaryProto* mutable__v2();
  inline ::PlayerSummaryProto* release__v2();
  inline void set_allocated__v2(::PlayerSummaryProto* _v2);

  // optional .PlayerSummaryProto _v3 = 4;
  inline bool has__v3() const;
  inline void clear__v3();
  static const int kV3FieldNumber = 4;
  inline const ::PlayerSummaryProto& _v3() const;
  inline ::PlayerSummaryProto* mutable__v3();
  inline ::PlayerSummaryProto* release__v3();
  inline void set_allocated__v3(::PlayerSummaryProto* _v3);

  // optional .PlayerSummaryProto _v4 = 5;
  inline bool has__v4() const;
  inline void clear__v4();
  static const int kV4FieldNumber = 5;
  inline const ::PlayerSummaryProto& _v4() const;
  inline ::PlayerSummaryProto* mutable__v4();
  inline ::PlayerSummaryProto* release__v4();
  inline void set_allocated__v4(::PlayerSummaryProto* _v4);

  // optional .PlayerSummaryProto _v5 = 6;
  inline bool has__v5() const;
  inline void clear__v5();
  static const int kV5FieldNumber = 6;
  inline const ::PlayerSummaryProto& _v5() const;
  inline ::PlayerSummaryProto* mutable__v5();
  inline ::PlayerSummaryProto* release__v5();
  inline void set_allocated__v5(::PlayerSummaryProto* _v5);

  // optional .PlayerSummaryProto _v6 = 7;
  inline bool has__v6() const;
  inline void clear__v6();
  static const int kV6FieldNumber = 7;
  inline const ::PlayerSummaryProto& _v6() const;
  inline ::PlayerSummaryProto* mutable__v6();
  inline ::PlayerSummaryProto* release__v6();
  inline void set_allocated__v6(::PlayerSummaryProto* _v6);

  // optional .PlayerSummaryProto _v7 = 8;
  inline bool has__v7() const;
  inline void clear__v7();
  static const int kV7FieldNumber = 8;
  inline const ::PlayerSummaryProto& _v7() const;
  inline ::PlayerSummaryProto* mutable__v7();
  inline ::PlayerSummaryProto* release__v7();
  inline void set_allocated__v7(::PlayerSummaryProto* _v7);

  // optional .PlayerSummaryProto _v8 = 9;
  inline bool has__v8() const;
  inline void clear__v8();
  static const int kV8FieldNumber = 9;
  inline const ::PlayerSummaryProto& _v8() const;
  inline ::PlayerSummaryProto* mutable__v8();
  inline ::PlayerSummaryProto* release__v8();
  inline void set_allocated__v8(::PlayerSummaryProto* _v8);

  // optional .PlayerSummaryProto _v9 = 10;
  inline bool has__v9() const;
  inline void clear__v9();
  static const int kV9FieldNumber = 10;
  inline const ::PlayerSummaryProto& _v9() const;
  inline ::PlayerSummaryProto* mutable__v9();
  inline ::PlayerSummaryProto* release__v9();
  inline void set_allocated__v9(::PlayerSummaryProto* _v9);

  // optional .PlayerSummaryProto _v10 = 11;
  inline bool has__v10() const;
  inline void clear__v10();
  static const int kV10FieldNumber = 11;
  inline const ::PlayerSummaryProto& _v10() const;
  inline ::PlayerSummaryProto* mutable__v10();
  inline ::PlayerSummaryProto* release__v10();
  inline void set_allocated__v10(::PlayerSummaryProto* _v10);

  // optional .PlayerSummaryProto _v11 = 12;
  inline bool has__v11() const;
  inline void clear__v11();
  static const int kV11FieldNumber = 12;
  inline const ::PlayerSummaryProto& _v11() const;
  inline ::PlayerSummaryProto* mutable__v11();
  inline ::PlayerSummaryProto* release__v11();
  inline void set_allocated__v11(::PlayerSummaryProto* _v11);

  // optional .PlayerSummaryProto _v12 = 13;
  inline bool has__v12() const;
  inline void clear__v12();
  static const int kV12FieldNumber = 13;
  inline const ::PlayerSummaryProto& _v12() const;
  inline ::PlayerSummaryProto* mutable__v12();
  inline ::PlayerSummaryProto* release__v12();
  inline void set_allocated__v12(::PlayerSummaryProto* _v12);

  // optional .PlayerSummaryProto _v13 = 14;
  inline bool has__v13() const;
  inline void clear__v13();
  static const int kV13FieldNumber = 14;
  inline const ::PlayerSummaryProto& _v13() const;
  inline ::PlayerSummaryProto* mutable__v13();
  inline ::PlayerSummaryProto* release__v13();
  inline void set_allocated__v13(::PlayerSummaryProto* _v13);

  // optional .PlayerSummaryProto _v14 = 15;
  inline bool has__v14() const;
  inline void clear__v14();
  static const int kV14FieldNumber = 15;
  inline const ::PlayerSummaryProto& _v14() const;
  inline ::PlayerSummaryProto* mutable__v14();
  inline ::PlayerSummaryProto* release__v14();
  inline void set_allocated__v14(::PlayerSummaryProto* _v14);

  // optional .PlayerSummaryProto _v15 = 16;
  inline bool has__v15() const;
  inline void clear__v15();
  static const int kV15FieldNumber = 16;
  inline const ::PlayerSummaryProto& _v15() const;
  inline ::PlayerSummaryProto* mutable__v15();
  inline ::PlayerSummaryProto* release__v15();
  inline void set_allocated__v15(::PlayerSummaryProto* _v15);

  // optional .PlayerSummaryProto _v16 = 17;
  inline bool has__v16() const;
  inline void clear__v16();
  static const int kV16FieldNumber = 17;
  inline const ::PlayerSummaryProto& _v16() const;
  inline ::PlayerSummaryProto* mutable__v16();
  inline ::PlayerSummaryProto* release__v16();
  inline void set_allocated__v16(::PlayerSummaryProto* _v16);

  // optional .PlayerSummaryProto _v17 = 18;
  inline bool has__v17() const;
  inline void clear__v17();
  static const int kV17FieldNumber = 18;
  inline const ::PlayerSummaryProto& _v17() const;
  inline ::PlayerSummaryProto* mutable__v17();
  inline ::PlayerSummaryProto* release__v17();
  inline void set_allocated__v17(::PlayerSummaryProto* _v17);

  // optional .PlayerSummaryProto _v18 = 19;
  inline bool has__v18() const;
  inline void clear__v18();
  static const int kV18FieldNumber = 19;
  inline const ::PlayerSummaryProto& _v18() const;
  inline ::PlayerSummaryProto* mutable__v18();
  inline ::PlayerSummaryProto* release__v18();
  inline void set_allocated__v18(::PlayerSummaryProto* _v18);

  // optional .PlayerSummaryProto _v19 = 20;
  inline bool has__v19() const;
  inline void clear__v19();
  static const int kV19FieldNumber = 20;
  inline const ::PlayerSummaryProto& _v19() const;
  inline ::PlayerSummaryProto* mutable__v19();
  inline ::PlayerSummaryProto* release__v19();
  inline void set_allocated__v19(::PlayerSummaryProto* _v19);

  // optional .PlayerSummaryProto _v20 = 21;
  inline bool has__v20() const;
  inline void clear__v20();
  static const int kV20FieldNumber = 21;
  inline const ::PlayerSummaryProto& _v20() const;
  inline ::PlayerSummaryProto* mutable__v20();
  inline ::PlayerSummaryProto* release__v20();
  inline void set_allocated__v20(::PlayerSummaryProto* _v20);

  // optional .PlayerSummaryProto _v21 = 22;
  inline bool has__v21() const;
  inline void clear__v21();
  static const int kV21FieldNumber = 22;
  inline const ::PlayerSummaryProto& _v21() const;
  inline ::PlayerSummaryProto* mutable__v21();
  inline ::PlayerSummaryProto* release__v21();
  inline void set_allocated__v21(::PlayerSummaryProto* _v21);

  // optional .PlayerSummaryProto _v22 = 23;
  inline bool has__v22() const;
  inline void clear__v22();
  static const int kV22FieldNumber = 23;
  inline const ::PlayerSummaryProto& _v22() const;
  inline ::PlayerSummaryProto* mutable__v22();
  inline ::PlayerSummaryProto* release__v22();
  inline void set_allocated__v22(::PlayerSummaryProto* _v22);

  // optional .PlayerSummaryProto _v23 = 24;
  inline bool has__v23() const;
  inline void clear__v23();
  static const int kV23FieldNumber = 24;
  inline const ::PlayerSummaryProto& _v23() const;
  inline ::PlayerSummaryProto* mutable__v23();
  inline ::PlayerSummaryProto* release__v23();
  inline void set_allocated__v23(::PlayerSummaryProto* _v23);

  // optional .PlayerSummaryProto _v24 = 25;
  inline bool has__v24() const;
  inline void clear__v24();
  static const int kV24FieldNumber = 25;
  inline const ::PlayerSummaryProto& _v24() const;
  inline ::PlayerSummaryProto* mutable__v24();
  inline ::PlayerSummaryProto* release__v24();
  inline void set_allocated__v24(::PlayerSummaryProto* _v24);

  // optional .PlayerSummaryProto _v25 = 26;
  inline bool has__v25() const;
  inline void clear__v25();
  static const int kV25FieldNumber = 26;
  inline const ::PlayerSummaryProto& _v25() const;
  inline ::PlayerSummaryProto* mutable__v25();
  inline ::PlayerSummaryProto* release__v25();
  inline void set_allocated__v25(::PlayerSummaryProto* _v25);

  // optional .PlayerSummaryProto _v26 = 27;
  inline bool has__v26() const;
  inline void clear__v26();
  static const int kV26FieldNumber = 27;
  inline const ::PlayerSummaryProto& _v26() const;
  inline ::PlayerSummaryProto* mutable__v26();
  inline ::PlayerSummaryProto* release__v26();
  inline void set_allocated__v26(::PlayerSummaryProto* _v26);

  // optional .PlayerSummaryProto _v27 = 28;
  inline bool has__v27() const;
  inline void clear__v27();
  static const int kV27FieldNumber = 28;
  inline const ::PlayerSummaryProto& _v27() const;
  inline ::PlayerSummaryProto* mutable__v27();
  inline ::PlayerSummaryProto* release__v27();
  inline void set_allocated__v27(::PlayerSummaryProto* _v27);

  // optional .PlayerSummaryProto _v28 = 29;
  inline bool has__v28() const;
  inline void clear__v28();
  static const int kV28FieldNumber = 29;
  inline const ::PlayerSummaryProto& _v28() const;
  inline ::PlayerSummaryProto* mutable__v28();
  inline ::PlayerSummaryProto* release__v28();
  inline void set_allocated__v28(::PlayerSummaryProto* _v28);

  // optional .PlayerSummaryProto _v29 = 30;
  inline bool has__v29() const;
  inline void clear__v29();
  static const int kV29FieldNumber = 30;
  inline const ::PlayerSummaryProto& _v29() const;
  inline ::PlayerSummaryProto* mutable__v29();
  inline ::PlayerSummaryProto* release__v29();
  inline void set_allocated__v29(::PlayerSummaryProto* _v29);

  // @@protoc_insertion_point(class_scope:_GuildGuildMemberProto)
 private:
  inline void set_has__v0();
  inline void clear_has__v0();
  inline void set_has__v1();
  inline void clear_has__v1();
  inline void set_has__v2();
  inline void clear_has__v2();
  inline void set_has__v3();
  inline void clear_has__v3();
  inline void set_has__v4();
  inline void clear_has__v4();
  inline void set_has__v5();
  inline void clear_has__v5();
  inline void set_has__v6();
  inline void clear_has__v6();
  inline void set_has__v7();
  inline void clear_has__v7();
  inline void set_has__v8();
  inline void clear_has__v8();
  inline void set_has__v9();
  inline void clear_has__v9();
  inline void set_has__v10();
  inline void clear_has__v10();
  inline void set_has__v11();
  inline void clear_has__v11();
  inline void set_has__v12();
  inline void clear_has__v12();
  inline void set_has__v13();
  inline void clear_has__v13();
  inline void set_has__v14();
  inline void clear_has__v14();
  inline void set_has__v15();
  inline void clear_has__v15();
  inline void set_has__v16();
  inline void clear_has__v16();
  inline void set_has__v17();
  inline void clear_has__v17();
  inline void set_has__v18();
  inline void clear_has__v18();
  inline void set_has__v19();
  inline void clear_has__v19();
  inline void set_has__v20();
  inline void clear_has__v20();
  inline void set_has__v21();
  inline void clear_has__v21();
  inline void set_has__v22();
  inline void clear_has__v22();
  inline void set_has__v23();
  inline void clear_has__v23();
  inline void set_has__v24();
  inline void clear_has__v24();
  inline void set_has__v25();
  inline void clear_has__v25();
  inline void set_has__v26();
  inline void clear_has__v26();
  inline void set_has__v27();
  inline void clear_has__v27();
  inline void set_has__v28();
  inline void clear_has__v28();
  inline void set_has__v29();
  inline void clear_has__v29();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PlayerSummaryProto* _v0_;
  ::PlayerSummaryProto* _v1_;
  ::PlayerSummaryProto* _v2_;
  ::PlayerSummaryProto* _v3_;
  ::PlayerSummaryProto* _v4_;
  ::PlayerSummaryProto* _v5_;
  ::PlayerSummaryProto* _v6_;
  ::PlayerSummaryProto* _v7_;
  ::PlayerSummaryProto* _v8_;
  ::PlayerSummaryProto* _v9_;
  ::PlayerSummaryProto* _v10_;
  ::PlayerSummaryProto* _v11_;
  ::PlayerSummaryProto* _v12_;
  ::PlayerSummaryProto* _v13_;
  ::PlayerSummaryProto* _v14_;
  ::PlayerSummaryProto* _v15_;
  ::PlayerSummaryProto* _v16_;
  ::PlayerSummaryProto* _v17_;
  ::PlayerSummaryProto* _v18_;
  ::PlayerSummaryProto* _v19_;
  ::PlayerSummaryProto* _v20_;
  ::PlayerSummaryProto* _v21_;
  ::PlayerSummaryProto* _v22_;
  ::PlayerSummaryProto* _v23_;
  ::PlayerSummaryProto* _v24_;
  ::PlayerSummaryProto* _v25_;
  ::PlayerSummaryProto* _v26_;
  ::PlayerSummaryProto* _v27_;
  ::PlayerSummaryProto* _v28_;
  ::PlayerSummaryProto* _v29_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(30 + 31) / 32];

  friend void  protobuf_AddDesc_gamedata_2eproto();
  friend void protobuf_AssignDesc_gamedata_2eproto();
  friend void protobuf_ShutdownFile_gamedata_2eproto();

  void InitAsDefaultInstance();
  static _GuildGuildMemberProto* default_instance_;
};
// -------------------------------------------------------------------

class GuildProto : public ::google::protobuf::Message {
 public:
  GuildProto();
  virtual ~GuildProto();

  GuildProto(const GuildProto& from);

  inline GuildProto& operator=(const GuildProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildProto& default_instance();

  void Swap(GuildProto* other);

  // implements Message ----------------------------------------------

  GuildProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildProto& from);
  void MergeFrom(const GuildProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional ._GuildGuildMemberProto GuildMember = 5;
  inline bool has_guildmember() const;
  inline void clear_guildmember();
  static const int kGuildMemberFieldNumber = 5;
  inline const ::_GuildGuildMemberProto& guildmember() const;
  inline ::_GuildGuildMemberProto* mutable_guildmember();
  inline ::_GuildGuildMemberProto* release_guildmember();
  inline void set_allocated_guildmember(::_GuildGuildMemberProto* guildmember);

  // optional bytes Name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 Level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 Chairman = 2;
  inline bool has_chairman() const;
  inline void clear_chairman();
  static const int kChairmanFieldNumber = 2;
  inline ::google::protobuf::int32 chairman() const;
  inline void set_chairman(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildProto)
 private:
  inline void set_has_guildmember();
  inline void clear_has_guildmember();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_chairman();
  inline void clear_has_chairman();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::_GuildGuildMemberProto* guildmember_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 chairman_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gamedata_2eproto();
  friend void protobuf_AssignDesc_gamedata_2eproto();
  friend void protobuf_ShutdownFile_gamedata_2eproto();

  void InitAsDefaultInstance();
  static GuildProto* default_instance_;
};
// -------------------------------------------------------------------

class FriendInfoProto : public ::google::protobuf::Message {
 public:
  FriendInfoProto();
  virtual ~FriendInfoProto();

  FriendInfoProto(const FriendInfoProto& from);

  inline FriendInfoProto& operator=(const FriendInfoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendInfoProto& default_instance();

  void Swap(FriendInfoProto* other);

  // implements Message ----------------------------------------------

  FriendInfoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendInfoProto& from);
  void MergeFrom(const FriendInfoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PlayerSummaryProto Info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::PlayerSummaryProto& info() const;
  inline ::PlayerSummaryProto* mutable_info();
  inline ::PlayerSummaryProto* release_info();
  inline void set_allocated_info(::PlayerSummaryProto* info);

  // optional int32 Mobility = 2;
  inline bool has_mobility() const;
  inline void clear_mobility();
  static const int kMobilityFieldNumber = 2;
  inline ::google::protobuf::int32 mobility() const;
  inline void set_mobility(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FriendInfoProto)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_mobility();
  inline void clear_has_mobility();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PlayerSummaryProto* info_;
  ::google::protobuf::int32 mobility_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gamedata_2eproto();
  friend void protobuf_AssignDesc_gamedata_2eproto();
  friend void protobuf_ShutdownFile_gamedata_2eproto();

  void InitAsDefaultInstance();
  static FriendInfoProto* default_instance_;
};
// -------------------------------------------------------------------

class BaseInfoProto : public ::google::protobuf::Message {
 public:
  BaseInfoProto();
  virtual ~BaseInfoProto();

  BaseInfoProto(const BaseInfoProto& from);

  inline BaseInfoProto& operator=(const BaseInfoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseInfoProto& default_instance();

  void Swap(BaseInfoProto* other);

  // implements Message ----------------------------------------------

  BaseInfoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseInfoProto& from);
  void MergeFrom(const BaseInfoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 EliteLine = 9;
  inline bool has_eliteline() const;
  inline void clear_eliteline();
  static const int kEliteLineFieldNumber = 9;
  inline ::google::protobuf::int32 eliteline() const;
  inline void set_eliteline(::google::protobuf::int32 value);

  // optional bytes Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 Level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 MainLine = 8;
  inline bool has_mainline() const;
  inline void clear_mainline();
  static const int kMainLineFieldNumber = 8;
  inline ::google::protobuf::int32 mainline() const;
  inline void set_mainline(::google::protobuf::int32 value);

  // optional int32 Exp = 7;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 7;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 OffTime = 10;
  inline bool has_offtime() const;
  inline void clear_offtime();
  static const int kOffTimeFieldNumber = 10;
  inline ::google::protobuf::int32 offtime() const;
  inline void set_offtime(::google::protobuf::int32 value);

  // optional int32 Diamond = 4;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 4;
  inline ::google::protobuf::int32 diamond() const;
  inline void set_diamond(::google::protobuf::int32 value);

  // optional int32 Gold = 5;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 5;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // optional int32 Mobility = 6;
  inline bool has_mobility() const;
  inline void clear_mobility();
  static const int kMobilityFieldNumber = 6;
  inline ::google::protobuf::int32 mobility() const;
  inline void set_mobility(::google::protobuf::int32 value);

  // optional int32 HeroLine = 11;
  inline bool has_heroline() const;
  inline void clear_heroline();
  static const int kHeroLineFieldNumber = 11;
  inline ::google::protobuf::int32 heroline() const;
  inline void set_heroline(::google::protobuf::int32 value);

  // optional bytes Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:BaseInfoProto)
 private:
  inline void set_has_eliteline();
  inline void clear_has_eliteline();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_mainline();
  inline void clear_has_mainline();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_offtime();
  inline void clear_has_offtime();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_mobility();
  inline void clear_has_mobility();
  inline void set_has_heroline();
  inline void clear_has_heroline();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 eliteline_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 mainline_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 offtime_;
  ::google::protobuf::int32 diamond_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 mobility_;
  ::std::string* id_;
  ::google::protobuf::int32 heroline_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_gamedata_2eproto();
  friend void protobuf_AssignDesc_gamedata_2eproto();
  friend void protobuf_ShutdownFile_gamedata_2eproto();

  void InitAsDefaultInstance();
  static BaseInfoProto* default_instance_;
};
// -------------------------------------------------------------------

class SysInfoProto : public ::google::protobuf::Message {
 public:
  SysInfoProto();
  virtual ~SysInfoProto();

  SysInfoProto(const SysInfoProto& from);

  inline SysInfoProto& operator=(const SysInfoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SysInfoProto& default_instance();

  void Swap(SysInfoProto* other);

  // implements Message ----------------------------------------------

  SysInfoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SysInfoProto& from);
  void MergeFrom(const SysInfoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes ServerName = 2;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServerNameFieldNumber = 2;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const void* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // optional int32 ServerTime = 1;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServerTimeFieldNumber = 1;
  inline ::google::protobuf::int32 servertime() const;
  inline void set_servertime(::google::protobuf::int32 value);

  // optional int32 OnlinePlayer = 3;
  inline bool has_onlineplayer() const;
  inline void clear_onlineplayer();
  static const int kOnlinePlayerFieldNumber = 3;
  inline ::google::protobuf::int32 onlineplayer() const;
  inline void set_onlineplayer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SysInfoProto)
 private:
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_servertime();
  inline void clear_has_servertime();
  inline void set_has_onlineplayer();
  inline void clear_has_onlineplayer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* servername_;
  ::google::protobuf::int32 servertime_;
  ::google::protobuf::int32 onlineplayer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gamedata_2eproto();
  friend void protobuf_AssignDesc_gamedata_2eproto();
  friend void protobuf_ShutdownFile_gamedata_2eproto();

  void InitAsDefaultInstance();
  static SysInfoProto* default_instance_;
};
// -------------------------------------------------------------------

class CardProto : public ::google::protobuf::Message {
 public:
  CardProto();
  virtual ~CardProto();

  CardProto(const CardProto& from);

  inline CardProto& operator=(const CardProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CardProto& default_instance();

  void Swap(CardProto* other);

  // implements Message ----------------------------------------------

  CardProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardProto& from);
  void MergeFrom(const CardProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 LeaderSkill = 3;
  inline bool has_leaderskill() const;
  inline void clear_leaderskill();
  static const int kLeaderSkillFieldNumber = 3;
  inline ::google::protobuf::int32 leaderskill() const;
  inline void set_leaderskill(::google::protobuf::int32 value);

  // optional int32 Level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CardProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_leaderskill();
  inline void clear_has_leaderskill();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 leaderskill_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gamedata_2eproto();
  friend void protobuf_AssignDesc_gamedata_2eproto();
  friend void protobuf_ShutdownFile_gamedata_2eproto();

  void InitAsDefaultInstance();
  static CardProto* default_instance_;
};
// -------------------------------------------------------------------

class _PackageSlotProto : public ::google::protobuf::Message {
 public:
  _PackageSlotProto();
  virtual ~_PackageSlotProto();

  _PackageSlotProto(const _PackageSlotProto& from);

  inline _PackageSlotProto& operator=(const _PackageSlotProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const _PackageSlotProto& default_instance();

  void Swap(_PackageSlotProto* other);

  // implements Message ----------------------------------------------

  _PackageSlotProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _PackageSlotProto& from);
  void MergeFrom(const _PackageSlotProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CardProto _v0 = 1;
  inline bool has__v0() const;
  inline void clear__v0();
  static const int kV0FieldNumber = 1;
  inline const ::CardProto& _v0() const;
  inline ::CardProto* mutable__v0();
  inline ::CardProto* release__v0();
  inline void set_allocated__v0(::CardProto* _v0);

  // optional .CardProto _v1 = 2;
  inline bool has__v1() const;
  inline void clear__v1();
  static const int kV1FieldNumber = 2;
  inline const ::CardProto& _v1() const;
  inline ::CardProto* mutable__v1();
  inline ::CardProto* release__v1();
  inline void set_allocated__v1(::CardProto* _v1);

  // optional .CardProto _v2 = 3;
  inline bool has__v2() const;
  inline void clear__v2();
  static const int kV2FieldNumber = 3;
  inline const ::CardProto& _v2() const;
  inline ::CardProto* mutable__v2();
  inline ::CardProto* release__v2();
  inline void set_allocated__v2(::CardProto* _v2);

  // optional .CardProto _v3 = 4;
  inline bool has__v3() const;
  inline void clear__v3();
  static const int kV3FieldNumber = 4;
  inline const ::CardProto& _v3() const;
  inline ::CardProto* mutable__v3();
  inline ::CardProto* release__v3();
  inline void set_allocated__v3(::CardProto* _v3);

  // optional .CardProto _v4 = 5;
  inline bool has__v4() const;
  inline void clear__v4();
  static const int kV4FieldNumber = 5;
  inline const ::CardProto& _v4() const;
  inline ::CardProto* mutable__v4();
  inline ::CardProto* release__v4();
  inline void set_allocated__v4(::CardProto* _v4);

  // optional .CardProto _v5 = 6;
  inline bool has__v5() const;
  inline void clear__v5();
  static const int kV5FieldNumber = 6;
  inline const ::CardProto& _v5() const;
  inline ::CardProto* mutable__v5();
  inline ::CardProto* release__v5();
  inline void set_allocated__v5(::CardProto* _v5);

  // optional .CardProto _v6 = 7;
  inline bool has__v6() const;
  inline void clear__v6();
  static const int kV6FieldNumber = 7;
  inline const ::CardProto& _v6() const;
  inline ::CardProto* mutable__v6();
  inline ::CardProto* release__v6();
  inline void set_allocated__v6(::CardProto* _v6);

  // optional .CardProto _v7 = 8;
  inline bool has__v7() const;
  inline void clear__v7();
  static const int kV7FieldNumber = 8;
  inline const ::CardProto& _v7() const;
  inline ::CardProto* mutable__v7();
  inline ::CardProto* release__v7();
  inline void set_allocated__v7(::CardProto* _v7);

  // optional .CardProto _v8 = 9;
  inline bool has__v8() const;
  inline void clear__v8();
  static const int kV8FieldNumber = 9;
  inline const ::CardProto& _v8() const;
  inline ::CardProto* mutable__v8();
  inline ::CardProto* release__v8();
  inline void set_allocated__v8(::CardProto* _v8);

  // optional .CardProto _v9 = 10;
  inline bool has__v9() const;
  inline void clear__v9();
  static const int kV9FieldNumber = 10;
  inline const ::CardProto& _v9() const;
  inline ::CardProto* mutable__v9();
  inline ::CardProto* release__v9();
  inline void set_allocated__v9(::CardProto* _v9);

  // optional .CardProto _v10 = 11;
  inline bool has__v10() const;
  inline void clear__v10();
  static const int kV10FieldNumber = 11;
  inline const ::CardProto& _v10() const;
  inline ::CardProto* mutable__v10();
  inline ::CardProto* release__v10();
  inline void set_allocated__v10(::CardProto* _v10);

  // optional .CardProto _v11 = 12;
  inline bool has__v11() const;
  inline void clear__v11();
  static const int kV11FieldNumber = 12;
  inline const ::CardProto& _v11() const;
  inline ::CardProto* mutable__v11();
  inline ::CardProto* release__v11();
  inline void set_allocated__v11(::CardProto* _v11);

  // optional .CardProto _v12 = 13;
  inline bool has__v12() const;
  inline void clear__v12();
  static const int kV12FieldNumber = 13;
  inline const ::CardProto& _v12() const;
  inline ::CardProto* mutable__v12();
  inline ::CardProto* release__v12();
  inline void set_allocated__v12(::CardProto* _v12);

  // optional .CardProto _v13 = 14;
  inline bool has__v13() const;
  inline void clear__v13();
  static const int kV13FieldNumber = 14;
  inline const ::CardProto& _v13() const;
  inline ::CardProto* mutable__v13();
  inline ::CardProto* release__v13();
  inline void set_allocated__v13(::CardProto* _v13);

  // optional .CardProto _v14 = 15;
  inline bool has__v14() const;
  inline void clear__v14();
  static const int kV14FieldNumber = 15;
  inline const ::CardProto& _v14() const;
  inline ::CardProto* mutable__v14();
  inline ::CardProto* release__v14();
  inline void set_allocated__v14(::CardProto* _v14);

  // optional .CardProto _v15 = 16;
  inline bool has__v15() const;
  inline void clear__v15();
  static const int kV15FieldNumber = 16;
  inline const ::CardProto& _v15() const;
  inline ::CardProto* mutable__v15();
  inline ::CardProto* release__v15();
  inline void set_allocated__v15(::CardProto* _v15);

  // optional .CardProto _v16 = 17;
  inline bool has__v16() const;
  inline void clear__v16();
  static const int kV16FieldNumber = 17;
  inline const ::CardProto& _v16() const;
  inline ::CardProto* mutable__v16();
  inline ::CardProto* release__v16();
  inline void set_allocated__v16(::CardProto* _v16);

  // optional .CardProto _v17 = 18;
  inline bool has__v17() const;
  inline void clear__v17();
  static const int kV17FieldNumber = 18;
  inline const ::CardProto& _v17() const;
  inline ::CardProto* mutable__v17();
  inline ::CardProto* release__v17();
  inline void set_allocated__v17(::CardProto* _v17);

  // optional .CardProto _v18 = 19;
  inline bool has__v18() const;
  inline void clear__v18();
  static const int kV18FieldNumber = 19;
  inline const ::CardProto& _v18() const;
  inline ::CardProto* mutable__v18();
  inline ::CardProto* release__v18();
  inline void set_allocated__v18(::CardProto* _v18);

  // optional .CardProto _v19 = 20;
  inline bool has__v19() const;
  inline void clear__v19();
  static const int kV19FieldNumber = 20;
  inline const ::CardProto& _v19() const;
  inline ::CardProto* mutable__v19();
  inline ::CardProto* release__v19();
  inline void set_allocated__v19(::CardProto* _v19);

  // optional .CardProto _v20 = 21;
  inline bool has__v20() const;
  inline void clear__v20();
  static const int kV20FieldNumber = 21;
  inline const ::CardProto& _v20() const;
  inline ::CardProto* mutable__v20();
  inline ::CardProto* release__v20();
  inline void set_allocated__v20(::CardProto* _v20);

  // optional .CardProto _v21 = 22;
  inline bool has__v21() const;
  inline void clear__v21();
  static const int kV21FieldNumber = 22;
  inline const ::CardProto& _v21() const;
  inline ::CardProto* mutable__v21();
  inline ::CardProto* release__v21();
  inline void set_allocated__v21(::CardProto* _v21);

  // optional .CardProto _v22 = 23;
  inline bool has__v22() const;
  inline void clear__v22();
  static const int kV22FieldNumber = 23;
  inline const ::CardProto& _v22() const;
  inline ::CardProto* mutable__v22();
  inline ::CardProto* release__v22();
  inline void set_allocated__v22(::CardProto* _v22);

  // optional .CardProto _v23 = 24;
  inline bool has__v23() const;
  inline void clear__v23();
  static const int kV23FieldNumber = 24;
  inline const ::CardProto& _v23() const;
  inline ::CardProto* mutable__v23();
  inline ::CardProto* release__v23();
  inline void set_allocated__v23(::CardProto* _v23);

  // optional .CardProto _v24 = 25;
  inline bool has__v24() const;
  inline void clear__v24();
  static const int kV24FieldNumber = 25;
  inline const ::CardProto& _v24() const;
  inline ::CardProto* mutable__v24();
  inline ::CardProto* release__v24();
  inline void set_allocated__v24(::CardProto* _v24);

  // optional .CardProto _v25 = 26;
  inline bool has__v25() const;
  inline void clear__v25();
  static const int kV25FieldNumber = 26;
  inline const ::CardProto& _v25() const;
  inline ::CardProto* mutable__v25();
  inline ::CardProto* release__v25();
  inline void set_allocated__v25(::CardProto* _v25);

  // optional .CardProto _v26 = 27;
  inline bool has__v26() const;
  inline void clear__v26();
  static const int kV26FieldNumber = 27;
  inline const ::CardProto& _v26() const;
  inline ::CardProto* mutable__v26();
  inline ::CardProto* release__v26();
  inline void set_allocated__v26(::CardProto* _v26);

  // optional .CardProto _v27 = 28;
  inline bool has__v27() const;
  inline void clear__v27();
  static const int kV27FieldNumber = 28;
  inline const ::CardProto& _v27() const;
  inline ::CardProto* mutable__v27();
  inline ::CardProto* release__v27();
  inline void set_allocated__v27(::CardProto* _v27);

  // optional .CardProto _v28 = 29;
  inline bool has__v28() const;
  inline void clear__v28();
  static const int kV28FieldNumber = 29;
  inline const ::CardProto& _v28() const;
  inline ::CardProto* mutable__v28();
  inline ::CardProto* release__v28();
  inline void set_allocated__v28(::CardProto* _v28);

  // optional .CardProto _v29 = 30;
  inline bool has__v29() const;
  inline void clear__v29();
  static const int kV29FieldNumber = 30;
  inline const ::CardProto& _v29() const;
  inline ::CardProto* mutable__v29();
  inline ::CardProto* release__v29();
  inline void set_allocated__v29(::CardProto* _v29);

  // optional .CardProto _v30 = 31;
  inline bool has__v30() const;
  inline void clear__v30();
  static const int kV30FieldNumber = 31;
  inline const ::CardProto& _v30() const;
  inline ::CardProto* mutable__v30();
  inline ::CardProto* release__v30();
  inline void set_allocated__v30(::CardProto* _v30);

  // optional .CardProto _v31 = 32;
  inline bool has__v31() const;
  inline void clear__v31();
  static const int kV31FieldNumber = 32;
  inline const ::CardProto& _v31() const;
  inline ::CardProto* mutable__v31();
  inline ::CardProto* release__v31();
  inline void set_allocated__v31(::CardProto* _v31);

  // optional .CardProto _v32 = 33;
  inline bool has__v32() const;
  inline void clear__v32();
  static const int kV32FieldNumber = 33;
  inline const ::CardProto& _v32() const;
  inline ::CardProto* mutable__v32();
  inline ::CardProto* release__v32();
  inline void set_allocated__v32(::CardProto* _v32);

  // optional .CardProto _v33 = 34;
  inline bool has__v33() const;
  inline void clear__v33();
  static const int kV33FieldNumber = 34;
  inline const ::CardProto& _v33() const;
  inline ::CardProto* mutable__v33();
  inline ::CardProto* release__v33();
  inline void set_allocated__v33(::CardProto* _v33);

  // optional .CardProto _v34 = 35;
  inline bool has__v34() const;
  inline void clear__v34();
  static const int kV34FieldNumber = 35;
  inline const ::CardProto& _v34() const;
  inline ::CardProto* mutable__v34();
  inline ::CardProto* release__v34();
  inline void set_allocated__v34(::CardProto* _v34);

  // optional .CardProto _v35 = 36;
  inline bool has__v35() const;
  inline void clear__v35();
  static const int kV35FieldNumber = 36;
  inline const ::CardProto& _v35() const;
  inline ::CardProto* mutable__v35();
  inline ::CardProto* release__v35();
  inline void set_allocated__v35(::CardProto* _v35);

  // optional .CardProto _v36 = 37;
  inline bool has__v36() const;
  inline void clear__v36();
  static const int kV36FieldNumber = 37;
  inline const ::CardProto& _v36() const;
  inline ::CardProto* mutable__v36();
  inline ::CardProto* release__v36();
  inline void set_allocated__v36(::CardProto* _v36);

  // optional .CardProto _v37 = 38;
  inline bool has__v37() const;
  inline void clear__v37();
  static const int kV37FieldNumber = 38;
  inline const ::CardProto& _v37() const;
  inline ::CardProto* mutable__v37();
  inline ::CardProto* release__v37();
  inline void set_allocated__v37(::CardProto* _v37);

  // optional .CardProto _v38 = 39;
  inline bool has__v38() const;
  inline void clear__v38();
  static const int kV38FieldNumber = 39;
  inline const ::CardProto& _v38() const;
  inline ::CardProto* mutable__v38();
  inline ::CardProto* release__v38();
  inline void set_allocated__v38(::CardProto* _v38);

  // optional .CardProto _v39 = 40;
  inline bool has__v39() const;
  inline void clear__v39();
  static const int kV39FieldNumber = 40;
  inline const ::CardProto& _v39() const;
  inline ::CardProto* mutable__v39();
  inline ::CardProto* release__v39();
  inline void set_allocated__v39(::CardProto* _v39);

  // optional .CardProto _v40 = 41;
  inline bool has__v40() const;
  inline void clear__v40();
  static const int kV40FieldNumber = 41;
  inline const ::CardProto& _v40() const;
  inline ::CardProto* mutable__v40();
  inline ::CardProto* release__v40();
  inline void set_allocated__v40(::CardProto* _v40);

  // optional .CardProto _v41 = 42;
  inline bool has__v41() const;
  inline void clear__v41();
  static const int kV41FieldNumber = 42;
  inline const ::CardProto& _v41() const;
  inline ::CardProto* mutable__v41();
  inline ::CardProto* release__v41();
  inline void set_allocated__v41(::CardProto* _v41);

  // optional .CardProto _v42 = 43;
  inline bool has__v42() const;
  inline void clear__v42();
  static const int kV42FieldNumber = 43;
  inline const ::CardProto& _v42() const;
  inline ::CardProto* mutable__v42();
  inline ::CardProto* release__v42();
  inline void set_allocated__v42(::CardProto* _v42);

  // optional .CardProto _v43 = 44;
  inline bool has__v43() const;
  inline void clear__v43();
  static const int kV43FieldNumber = 44;
  inline const ::CardProto& _v43() const;
  inline ::CardProto* mutable__v43();
  inline ::CardProto* release__v43();
  inline void set_allocated__v43(::CardProto* _v43);

  // optional .CardProto _v44 = 45;
  inline bool has__v44() const;
  inline void clear__v44();
  static const int kV44FieldNumber = 45;
  inline const ::CardProto& _v44() const;
  inline ::CardProto* mutable__v44();
  inline ::CardProto* release__v44();
  inline void set_allocated__v44(::CardProto* _v44);

  // optional .CardProto _v45 = 46;
  inline bool has__v45() const;
  inline void clear__v45();
  static const int kV45FieldNumber = 46;
  inline const ::CardProto& _v45() const;
  inline ::CardProto* mutable__v45();
  inline ::CardProto* release__v45();
  inline void set_allocated__v45(::CardProto* _v45);

  // optional .CardProto _v46 = 47;
  inline bool has__v46() const;
  inline void clear__v46();
  static const int kV46FieldNumber = 47;
  inline const ::CardProto& _v46() const;
  inline ::CardProto* mutable__v46();
  inline ::CardProto* release__v46();
  inline void set_allocated__v46(::CardProto* _v46);

  // optional .CardProto _v47 = 48;
  inline bool has__v47() const;
  inline void clear__v47();
  static const int kV47FieldNumber = 48;
  inline const ::CardProto& _v47() const;
  inline ::CardProto* mutable__v47();
  inline ::CardProto* release__v47();
  inline void set_allocated__v47(::CardProto* _v47);

  // optional .CardProto _v48 = 49;
  inline bool has__v48() const;
  inline void clear__v48();
  static const int kV48FieldNumber = 49;
  inline const ::CardProto& _v48() const;
  inline ::CardProto* mutable__v48();
  inline ::CardProto* release__v48();
  inline void set_allocated__v48(::CardProto* _v48);

  // optional .CardProto _v49 = 50;
  inline bool has__v49() const;
  inline void clear__v49();
  static const int kV49FieldNumber = 50;
  inline const ::CardProto& _v49() const;
  inline ::CardProto* mutable__v49();
  inline ::CardProto* release__v49();
  inline void set_allocated__v49(::CardProto* _v49);

  // optional .CardProto _v50 = 51;
  inline bool has__v50() const;
  inline void clear__v50();
  static const int kV50FieldNumber = 51;
  inline const ::CardProto& _v50() const;
  inline ::CardProto* mutable__v50();
  inline ::CardProto* release__v50();
  inline void set_allocated__v50(::CardProto* _v50);

  // optional .CardProto _v51 = 52;
  inline bool has__v51() const;
  inline void clear__v51();
  static const int kV51FieldNumber = 52;
  inline const ::CardProto& _v51() const;
  inline ::CardProto* mutable__v51();
  inline ::CardProto* release__v51();
  inline void set_allocated__v51(::CardProto* _v51);

  // optional .CardProto _v52 = 53;
  inline bool has__v52() const;
  inline void clear__v52();
  static const int kV52FieldNumber = 53;
  inline const ::CardProto& _v52() const;
  inline ::CardProto* mutable__v52();
  inline ::CardProto* release__v52();
  inline void set_allocated__v52(::CardProto* _v52);

  // optional .CardProto _v53 = 54;
  inline bool has__v53() const;
  inline void clear__v53();
  static const int kV53FieldNumber = 54;
  inline const ::CardProto& _v53() const;
  inline ::CardProto* mutable__v53();
  inline ::CardProto* release__v53();
  inline void set_allocated__v53(::CardProto* _v53);

  // optional .CardProto _v54 = 55;
  inline bool has__v54() const;
  inline void clear__v54();
  static const int kV54FieldNumber = 55;
  inline const ::CardProto& _v54() const;
  inline ::CardProto* mutable__v54();
  inline ::CardProto* release__v54();
  inline void set_allocated__v54(::CardProto* _v54);

  // optional .CardProto _v55 = 56;
  inline bool has__v55() const;
  inline void clear__v55();
  static const int kV55FieldNumber = 56;
  inline const ::CardProto& _v55() const;
  inline ::CardProto* mutable__v55();
  inline ::CardProto* release__v55();
  inline void set_allocated__v55(::CardProto* _v55);

  // optional .CardProto _v56 = 57;
  inline bool has__v56() const;
  inline void clear__v56();
  static const int kV56FieldNumber = 57;
  inline const ::CardProto& _v56() const;
  inline ::CardProto* mutable__v56();
  inline ::CardProto* release__v56();
  inline void set_allocated__v56(::CardProto* _v56);

  // optional .CardProto _v57 = 58;
  inline bool has__v57() const;
  inline void clear__v57();
  static const int kV57FieldNumber = 58;
  inline const ::CardProto& _v57() const;
  inline ::CardProto* mutable__v57();
  inline ::CardProto* release__v57();
  inline void set_allocated__v57(::CardProto* _v57);

  // optional .CardProto _v58 = 59;
  inline bool has__v58() const;
  inline void clear__v58();
  static const int kV58FieldNumber = 59;
  inline const ::CardProto& _v58() const;
  inline ::CardProto* mutable__v58();
  inline ::CardProto* release__v58();
  inline void set_allocated__v58(::CardProto* _v58);

  // optional .CardProto _v59 = 60;
  inline bool has__v59() const;
  inline void clear__v59();
  static const int kV59FieldNumber = 60;
  inline const ::CardProto& _v59() const;
  inline ::CardProto* mutable__v59();
  inline ::CardProto* release__v59();
  inline void set_allocated__v59(::CardProto* _v59);

  // @@protoc_insertion_point(class_scope:_PackageSlotProto)
 private:
  inline void set_has__v0();
  inline void clear_has__v0();
  inline void set_has__v1();
  inline void clear_has__v1();
  inline void set_has__v2();
  inline void clear_has__v2();
  inline void set_has__v3();
  inline void clear_has__v3();
  inline void set_has__v4();
  inline void clear_has__v4();
  inline void set_has__v5();
  inline void clear_has__v5();
  inline void set_has__v6();
  inline void clear_has__v6();
  inline void set_has__v7();
  inline void clear_has__v7();
  inline void set_has__v8();
  inline void clear_has__v8();
  inline void set_has__v9();
  inline void clear_has__v9();
  inline void set_has__v10();
  inline void clear_has__v10();
  inline void set_has__v11();
  inline void clear_has__v11();
  inline void set_has__v12();
  inline void clear_has__v12();
  inline void set_has__v13();
  inline void clear_has__v13();
  inline void set_has__v14();
  inline void clear_has__v14();
  inline void set_has__v15();
  inline void clear_has__v15();
  inline void set_has__v16();
  inline void clear_has__v16();
  inline void set_has__v17();
  inline void clear_has__v17();
  inline void set_has__v18();
  inline void clear_has__v18();
  inline void set_has__v19();
  inline void clear_has__v19();
  inline void set_has__v20();
  inline void clear_has__v20();
  inline void set_has__v21();
  inline void clear_has__v21();
  inline void set_has__v22();
  inline void clear_has__v22();
  inline void set_has__v23();
  inline void clear_has__v23();
  inline void set_has__v24();
  inline void clear_has__v24();
  inline void set_has__v25();
  inline void clear_has__v25();
  inline void set_has__v26();
  inline void clear_has__v26();
  inline void set_has__v27();
  inline void clear_has__v27();
  inline void set_has__v28();
  inline void clear_has__v28();
  inline void set_has__v29();
  inline void clear_has__v29();
  inline void set_has__v30();
  inline void clear_has__v30();
  inline void set_has__v31();
  inline void clear_has__v31();
  inline void set_has__v32();
  inline void clear_has__v32();
  inline void set_has__v33();
  inline void clear_has__v33();
  inline void set_has__v34();
  inline void clear_has__v34();
  inline void set_has__v35();
  inline void clear_has__v35();
  inline void set_has__v36();
  inline void clear_has__v36();
  inline void set_has__v37();
  inline void clear_has__v37();
  inline void set_has__v38();
  inline void clear_has__v38();
  inline void set_has__v39();
  inline void clear_has__v39();
  inline void set_has__v40();
  inline void clear_has__v40();
  inline void set_has__v41();
  inline void clear_has__v41();
  inline void set_has__v42();
  inline void clear_has__v42();
  inline void set_has__v43();
  inline void clear_has__v43();
  inline void set_has__v44();
  inline void clear_has__v44();
  inline void set_has__v45();
  inline void clear_has__v45();
  inline void set_has__v46();
  inline void clear_has__v46();
  inline void set_has__v47();
  inline void clear_has__v47();
  inline void set_has__v48();
  inline void clear_has__v48();
  inline void set_has__v49();
  inline void clear_has__v49();
  inline void set_has__v50();
  inline void clear_has__v50();
  inline void set_has__v51();
  inline void clear_has__v51();
  inline void set_has__v52();
  inline void clear_has__v52();
  inline void set_has__v53();
  inline void clear_has__v53();
  inline void set_has__v54();
  inline void clear_has__v54();
  inline void set_has__v55();
  inline void clear_has__v55();
  inline void set_has__v56();
  inline void clear_has__v56();
  inline void set_has__v57();
  inline void clear_has__v57();
  inline void set_has__v58();
  inline void clear_has__v58();
  inline void set_has__v59();
  inline void clear_has__v59();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CardProto* _v0_;
  ::CardProto* _v1_;
  ::CardProto* _v2_;
  ::CardProto* _v3_;
  ::CardProto* _v4_;
  ::CardProto* _v5_;
  ::CardProto* _v6_;
  ::CardProto* _v7_;
  ::CardProto* _v8_;
  ::CardProto* _v9_;
  ::CardProto* _v10_;
  ::CardProto* _v11_;
  ::CardProto* _v12_;
  ::CardProto* _v13_;
  ::CardProto* _v14_;
  ::CardProto* _v15_;
  ::CardProto* _v16_;
  ::CardProto* _v17_;
  ::CardProto* _v18_;
  ::CardProto* _v19_;
  ::CardProto* _v20_;
  ::CardProto* _v21_;
  ::CardProto* _v22_;
  ::CardProto* _v23_;
  ::CardProto* _v24_;
  ::CardProto* _v25_;
  ::CardProto* _v26_;
  ::CardProto* _v27_;
  ::CardProto* _v28_;
  ::CardProto* _v29_;
  ::CardProto* _v30_;
  ::CardProto* _v31_;
  ::CardProto* _v32_;
  ::CardProto* _v33_;
  ::CardProto* _v34_;
  ::CardProto* _v35_;
  ::CardProto* _v36_;
  ::CardProto* _v37_;
  ::CardProto* _v38_;
  ::CardProto* _v39_;
  ::CardProto* _v40_;
  ::CardProto* _v41_;
  ::CardProto* _v42_;
  ::CardProto* _v43_;
  ::CardProto* _v44_;
  ::CardProto* _v45_;
  ::CardProto* _v46_;
  ::CardProto* _v47_;
  ::CardProto* _v48_;
  ::CardProto* _v49_;
  ::CardProto* _v50_;
  ::CardProto* _v51_;
  ::CardProto* _v52_;
  ::CardProto* _v53_;
  ::CardProto* _v54_;
  ::CardProto* _v55_;
  ::CardProto* _v56_;
  ::CardProto* _v57_;
  ::CardProto* _v58_;
  ::CardProto* _v59_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(60 + 31) / 32];

  friend void  protobuf_AddDesc_gamedata_2eproto();
  friend void protobuf_AssignDesc_gamedata_2eproto();
  friend void protobuf_ShutdownFile_gamedata_2eproto();

  void InitAsDefaultInstance();
  static _PackageSlotProto* default_instance_;
};
// -------------------------------------------------------------------

class PackageProto : public ::google::protobuf::Message {
 public:
  PackageProto();
  virtual ~PackageProto();

  PackageProto(const PackageProto& from);

  inline PackageProto& operator=(const PackageProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageProto& default_instance();

  void Swap(PackageProto* other);

  // implements Message ----------------------------------------------

  PackageProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PackageProto& from);
  void MergeFrom(const PackageProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional ._PackageSlotProto Slot = 1;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 1;
  inline const ::_PackageSlotProto& slot() const;
  inline ::_PackageSlotProto* mutable_slot();
  inline ::_PackageSlotProto* release_slot();
  inline void set_allocated_slot(::_PackageSlotProto* slot);

  // @@protoc_insertion_point(class_scope:PackageProto)
 private:
  inline void set_has_slot();
  inline void clear_has_slot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::_PackageSlotProto* slot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gamedata_2eproto();
  friend void protobuf_AssignDesc_gamedata_2eproto();
  friend void protobuf_ShutdownFile_gamedata_2eproto();

  void InitAsDefaultInstance();
  static PackageProto* default_instance_;
};
// -------------------------------------------------------------------

class _TeamInfoTeamMemberProto : public ::google::protobuf::Message {
 public:
  _TeamInfoTeamMemberProto();
  virtual ~_TeamInfoTeamMemberProto();

  _TeamInfoTeamMemberProto(const _TeamInfoTeamMemberProto& from);

  inline _TeamInfoTeamMemberProto& operator=(const _TeamInfoTeamMemberProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const _TeamInfoTeamMemberProto& default_instance();

  void Swap(_TeamInfoTeamMemberProto* other);

  // implements Message ----------------------------------------------

  _TeamInfoTeamMemberProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _TeamInfoTeamMemberProto& from);
  void MergeFrom(const _TeamInfoTeamMemberProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CardProto _v0 = 1;
  inline bool has__v0() const;
  inline void clear__v0();
  static const int kV0FieldNumber = 1;
  inline const ::CardProto& _v0() const;
  inline ::CardProto* mutable__v0();
  inline ::CardProto* release__v0();
  inline void set_allocated__v0(::CardProto* _v0);

  // optional .CardProto _v1 = 2;
  inline bool has__v1() const;
  inline void clear__v1();
  static const int kV1FieldNumber = 2;
  inline const ::CardProto& _v1() const;
  inline ::CardProto* mutable__v1();
  inline ::CardProto* release__v1();
  inline void set_allocated__v1(::CardProto* _v1);

  // optional .CardProto _v2 = 3;
  inline bool has__v2() const;
  inline void clear__v2();
  static const int kV2FieldNumber = 3;
  inline const ::CardProto& _v2() const;
  inline ::CardProto* mutable__v2();
  inline ::CardProto* release__v2();
  inline void set_allocated__v2(::CardProto* _v2);

  // optional .CardProto _v3 = 4;
  inline bool has__v3() const;
  inline void clear__v3();
  static const int kV3FieldNumber = 4;
  inline const ::CardProto& _v3() const;
  inline ::CardProto* mutable__v3();
  inline ::CardProto* release__v3();
  inline void set_allocated__v3(::CardProto* _v3);

  // optional .CardProto _v4 = 5;
  inline bool has__v4() const;
  inline void clear__v4();
  static const int kV4FieldNumber = 5;
  inline const ::CardProto& _v4() const;
  inline ::CardProto* mutable__v4();
  inline ::CardProto* release__v4();
  inline void set_allocated__v4(::CardProto* _v4);

  // @@protoc_insertion_point(class_scope:_TeamInfoTeamMemberProto)
 private:
  inline void set_has__v0();
  inline void clear_has__v0();
  inline void set_has__v1();
  inline void clear_has__v1();
  inline void set_has__v2();
  inline void clear_has__v2();
  inline void set_has__v3();
  inline void clear_has__v3();
  inline void set_has__v4();
  inline void clear_has__v4();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CardProto* _v0_;
  ::CardProto* _v1_;
  ::CardProto* _v2_;
  ::CardProto* _v3_;
  ::CardProto* _v4_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gamedata_2eproto();
  friend void protobuf_AssignDesc_gamedata_2eproto();
  friend void protobuf_ShutdownFile_gamedata_2eproto();

  void InitAsDefaultInstance();
  static _TeamInfoTeamMemberProto* default_instance_;
};
// -------------------------------------------------------------------

class TeamInfoProto : public ::google::protobuf::Message {
 public:
  TeamInfoProto();
  virtual ~TeamInfoProto();

  TeamInfoProto(const TeamInfoProto& from);

  inline TeamInfoProto& operator=(const TeamInfoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamInfoProto& default_instance();

  void Swap(TeamInfoProto* other);

  // implements Message ----------------------------------------------

  TeamInfoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamInfoProto& from);
  void MergeFrom(const TeamInfoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional ._TeamInfoTeamMemberProto TeamMember = 1;
  inline bool has_teammember() const;
  inline void clear_teammember();
  static const int kTeamMemberFieldNumber = 1;
  inline const ::_TeamInfoTeamMemberProto& teammember() const;
  inline ::_TeamInfoTeamMemberProto* mutable_teammember();
  inline ::_TeamInfoTeamMemberProto* release_teammember();
  inline void set_allocated_teammember(::_TeamInfoTeamMemberProto* teammember);

  // @@protoc_insertion_point(class_scope:TeamInfoProto)
 private:
  inline void set_has_teammember();
  inline void clear_has_teammember();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::_TeamInfoTeamMemberProto* teammember_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gamedata_2eproto();
  friend void protobuf_AssignDesc_gamedata_2eproto();
  friend void protobuf_ShutdownFile_gamedata_2eproto();

  void InitAsDefaultInstance();
  static TeamInfoProto* default_instance_;
};
// -------------------------------------------------------------------

class _PlayerDataFriendsProto : public ::google::protobuf::Message {
 public:
  _PlayerDataFriendsProto();
  virtual ~_PlayerDataFriendsProto();

  _PlayerDataFriendsProto(const _PlayerDataFriendsProto& from);

  inline _PlayerDataFriendsProto& operator=(const _PlayerDataFriendsProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const _PlayerDataFriendsProto& default_instance();

  void Swap(_PlayerDataFriendsProto* other);

  // implements Message ----------------------------------------------

  _PlayerDataFriendsProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const _PlayerDataFriendsProto& from);
  void MergeFrom(const _PlayerDataFriendsProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FriendInfoProto _v0 = 1;
  inline bool has__v0() const;
  inline void clear__v0();
  static const int kV0FieldNumber = 1;
  inline const ::FriendInfoProto& _v0() const;
  inline ::FriendInfoProto* mutable__v0();
  inline ::FriendInfoProto* release__v0();
  inline void set_allocated__v0(::FriendInfoProto* _v0);

  // optional .FriendInfoProto _v1 = 2;
  inline bool has__v1() const;
  inline void clear__v1();
  static const int kV1FieldNumber = 2;
  inline const ::FriendInfoProto& _v1() const;
  inline ::FriendInfoProto* mutable__v1();
  inline ::FriendInfoProto* release__v1();
  inline void set_allocated__v1(::FriendInfoProto* _v1);

  // optional .FriendInfoProto _v2 = 3;
  inline bool has__v2() const;
  inline void clear__v2();
  static const int kV2FieldNumber = 3;
  inline const ::FriendInfoProto& _v2() const;
  inline ::FriendInfoProto* mutable__v2();
  inline ::FriendInfoProto* release__v2();
  inline void set_allocated__v2(::FriendInfoProto* _v2);

  // optional .FriendInfoProto _v3 = 4;
  inline bool has__v3() const;
  inline void clear__v3();
  static const int kV3FieldNumber = 4;
  inline const ::FriendInfoProto& _v3() const;
  inline ::FriendInfoProto* mutable__v3();
  inline ::FriendInfoProto* release__v3();
  inline void set_allocated__v3(::FriendInfoProto* _v3);

  // optional .FriendInfoProto _v4 = 5;
  inline bool has__v4() const;
  inline void clear__v4();
  static const int kV4FieldNumber = 5;
  inline const ::FriendInfoProto& _v4() const;
  inline ::FriendInfoProto* mutable__v4();
  inline ::FriendInfoProto* release__v4();
  inline void set_allocated__v4(::FriendInfoProto* _v4);

  // optional .FriendInfoProto _v5 = 6;
  inline bool has__v5() const;
  inline void clear__v5();
  static const int kV5FieldNumber = 6;
  inline const ::FriendInfoProto& _v5() const;
  inline ::FriendInfoProto* mutable__v5();
  inline ::FriendInfoProto* release__v5();
  inline void set_allocated__v5(::FriendInfoProto* _v5);

  // optional .FriendInfoProto _v6 = 7;
  inline bool has__v6() const;
  inline void clear__v6();
  static const int kV6FieldNumber = 7;
  inline const ::FriendInfoProto& _v6() const;
  inline ::FriendInfoProto* mutable__v6();
  inline ::FriendInfoProto* release__v6();
  inline void set_allocated__v6(::FriendInfoProto* _v6);

  // optional .FriendInfoProto _v7 = 8;
  inline bool has__v7() const;
  inline void clear__v7();
  static const int kV7FieldNumber = 8;
  inline const ::FriendInfoProto& _v7() const;
  inline ::FriendInfoProto* mutable__v7();
  inline ::FriendInfoProto* release__v7();
  inline void set_allocated__v7(::FriendInfoProto* _v7);

  // optional .FriendInfoProto _v8 = 9;
  inline bool has__v8() const;
  inline void clear__v8();
  static const int kV8FieldNumber = 9;
  inline const ::FriendInfoProto& _v8() const;
  inline ::FriendInfoProto* mutable__v8();
  inline ::FriendInfoProto* release__v8();
  inline void set_allocated__v8(::FriendInfoProto* _v8);

  // optional .FriendInfoProto _v9 = 10;
  inline bool has__v9() const;
  inline void clear__v9();
  static const int kV9FieldNumber = 10;
  inline const ::FriendInfoProto& _v9() const;
  inline ::FriendInfoProto* mutable__v9();
  inline ::FriendInfoProto* release__v9();
  inline void set_allocated__v9(::FriendInfoProto* _v9);

  // optional .FriendInfoProto _v10 = 11;
  inline bool has__v10() const;
  inline void clear__v10();
  static const int kV10FieldNumber = 11;
  inline const ::FriendInfoProto& _v10() const;
  inline ::FriendInfoProto* mutable__v10();
  inline ::FriendInfoProto* release__v10();
  inline void set_allocated__v10(::FriendInfoProto* _v10);

  // optional .FriendInfoProto _v11 = 12;
  inline bool has__v11() const;
  inline void clear__v11();
  static const int kV11FieldNumber = 12;
  inline const ::FriendInfoProto& _v11() const;
  inline ::FriendInfoProto* mutable__v11();
  inline ::FriendInfoProto* release__v11();
  inline void set_allocated__v11(::FriendInfoProto* _v11);

  // optional .FriendInfoProto _v12 = 13;
  inline bool has__v12() const;
  inline void clear__v12();
  static const int kV12FieldNumber = 13;
  inline const ::FriendInfoProto& _v12() const;
  inline ::FriendInfoProto* mutable__v12();
  inline ::FriendInfoProto* release__v12();
  inline void set_allocated__v12(::FriendInfoProto* _v12);

  // optional .FriendInfoProto _v13 = 14;
  inline bool has__v13() const;
  inline void clear__v13();
  static const int kV13FieldNumber = 14;
  inline const ::FriendInfoProto& _v13() const;
  inline ::FriendInfoProto* mutable__v13();
  inline ::FriendInfoProto* release__v13();
  inline void set_allocated__v13(::FriendInfoProto* _v13);

  // optional .FriendInfoProto _v14 = 15;
  inline bool has__v14() const;
  inline void clear__v14();
  static const int kV14FieldNumber = 15;
  inline const ::FriendInfoProto& _v14() const;
  inline ::FriendInfoProto* mutable__v14();
  inline ::FriendInfoProto* release__v14();
  inline void set_allocated__v14(::FriendInfoProto* _v14);

  // optional .FriendInfoProto _v15 = 16;
  inline bool has__v15() const;
  inline void clear__v15();
  static const int kV15FieldNumber = 16;
  inline const ::FriendInfoProto& _v15() const;
  inline ::FriendInfoProto* mutable__v15();
  inline ::FriendInfoProto* release__v15();
  inline void set_allocated__v15(::FriendInfoProto* _v15);

  // optional .FriendInfoProto _v16 = 17;
  inline bool has__v16() const;
  inline void clear__v16();
  static const int kV16FieldNumber = 17;
  inline const ::FriendInfoProto& _v16() const;
  inline ::FriendInfoProto* mutable__v16();
  inline ::FriendInfoProto* release__v16();
  inline void set_allocated__v16(::FriendInfoProto* _v16);

  // optional .FriendInfoProto _v17 = 18;
  inline bool has__v17() const;
  inline void clear__v17();
  static const int kV17FieldNumber = 18;
  inline const ::FriendInfoProto& _v17() const;
  inline ::FriendInfoProto* mutable__v17();
  inline ::FriendInfoProto* release__v17();
  inline void set_allocated__v17(::FriendInfoProto* _v17);

  // optional .FriendInfoProto _v18 = 19;
  inline bool has__v18() const;
  inline void clear__v18();
  static const int kV18FieldNumber = 19;
  inline const ::FriendInfoProto& _v18() const;
  inline ::FriendInfoProto* mutable__v18();
  inline ::FriendInfoProto* release__v18();
  inline void set_allocated__v18(::FriendInfoProto* _v18);

  // optional .FriendInfoProto _v19 = 20;
  inline bool has__v19() const;
  inline void clear__v19();
  static const int kV19FieldNumber = 20;
  inline const ::FriendInfoProto& _v19() const;
  inline ::FriendInfoProto* mutable__v19();
  inline ::FriendInfoProto* release__v19();
  inline void set_allocated__v19(::FriendInfoProto* _v19);

  // optional .FriendInfoProto _v20 = 21;
  inline bool has__v20() const;
  inline void clear__v20();
  static const int kV20FieldNumber = 21;
  inline const ::FriendInfoProto& _v20() const;
  inline ::FriendInfoProto* mutable__v20();
  inline ::FriendInfoProto* release__v20();
  inline void set_allocated__v20(::FriendInfoProto* _v20);

  // optional .FriendInfoProto _v21 = 22;
  inline bool has__v21() const;
  inline void clear__v21();
  static const int kV21FieldNumber = 22;
  inline const ::FriendInfoProto& _v21() const;
  inline ::FriendInfoProto* mutable__v21();
  inline ::FriendInfoProto* release__v21();
  inline void set_allocated__v21(::FriendInfoProto* _v21);

  // optional .FriendInfoProto _v22 = 23;
  inline bool has__v22() const;
  inline void clear__v22();
  static const int kV22FieldNumber = 23;
  inline const ::FriendInfoProto& _v22() const;
  inline ::FriendInfoProto* mutable__v22();
  inline ::FriendInfoProto* release__v22();
  inline void set_allocated__v22(::FriendInfoProto* _v22);

  // optional .FriendInfoProto _v23 = 24;
  inline bool has__v23() const;
  inline void clear__v23();
  static const int kV23FieldNumber = 24;
  inline const ::FriendInfoProto& _v23() const;
  inline ::FriendInfoProto* mutable__v23();
  inline ::FriendInfoProto* release__v23();
  inline void set_allocated__v23(::FriendInfoProto* _v23);

  // optional .FriendInfoProto _v24 = 25;
  inline bool has__v24() const;
  inline void clear__v24();
  static const int kV24FieldNumber = 25;
  inline const ::FriendInfoProto& _v24() const;
  inline ::FriendInfoProto* mutable__v24();
  inline ::FriendInfoProto* release__v24();
  inline void set_allocated__v24(::FriendInfoProto* _v24);

  // optional .FriendInfoProto _v25 = 26;
  inline bool has__v25() const;
  inline void clear__v25();
  static const int kV25FieldNumber = 26;
  inline const ::FriendInfoProto& _v25() const;
  inline ::FriendInfoProto* mutable__v25();
  inline ::FriendInfoProto* release__v25();
  inline void set_allocated__v25(::FriendInfoProto* _v25);

  // optional .FriendInfoProto _v26 = 27;
  inline bool has__v26() const;
  inline void clear__v26();
  static const int kV26FieldNumber = 27;
  inline const ::FriendInfoProto& _v26() const;
  inline ::FriendInfoProto* mutable__v26();
  inline ::FriendInfoProto* release__v26();
  inline void set_allocated__v26(::FriendInfoProto* _v26);

  // optional .FriendInfoProto _v27 = 28;
  inline bool has__v27() const;
  inline void clear__v27();
  static const int kV27FieldNumber = 28;
  inline const ::FriendInfoProto& _v27() const;
  inline ::FriendInfoProto* mutable__v27();
  inline ::FriendInfoProto* release__v27();
  inline void set_allocated__v27(::FriendInfoProto* _v27);

  // optional .FriendInfoProto _v28 = 29;
  inline bool has__v28() const;
  inline void clear__v28();
  static const int kV28FieldNumber = 29;
  inline const ::FriendInfoProto& _v28() const;
  inline ::FriendInfoProto* mutable__v28();
  inline ::FriendInfoProto* release__v28();
  inline void set_allocated__v28(::FriendInfoProto* _v28);

  // optional .FriendInfoProto _v29 = 30;
  inline bool has__v29() const;
  inline void clear__v29();
  static const int kV29FieldNumber = 30;
  inline const ::FriendInfoProto& _v29() const;
  inline ::FriendInfoProto* mutable__v29();
  inline ::FriendInfoProto* release__v29();
  inline void set_allocated__v29(::FriendInfoProto* _v29);

  // @@protoc_insertion_point(class_scope:_PlayerDataFriendsProto)
 private:
  inline void set_has__v0();
  inline void clear_has__v0();
  inline void set_has__v1();
  inline void clear_has__v1();
  inline void set_has__v2();
  inline void clear_has__v2();
  inline void set_has__v3();
  inline void clear_has__v3();
  inline void set_has__v4();
  inline void clear_has__v4();
  inline void set_has__v5();
  inline void clear_has__v5();
  inline void set_has__v6();
  inline void clear_has__v6();
  inline void set_has__v7();
  inline void clear_has__v7();
  inline void set_has__v8();
  inline void clear_has__v8();
  inline void set_has__v9();
  inline void clear_has__v9();
  inline void set_has__v10();
  inline void clear_has__v10();
  inline void set_has__v11();
  inline void clear_has__v11();
  inline void set_has__v12();
  inline void clear_has__v12();
  inline void set_has__v13();
  inline void clear_has__v13();
  inline void set_has__v14();
  inline void clear_has__v14();
  inline void set_has__v15();
  inline void clear_has__v15();
  inline void set_has__v16();
  inline void clear_has__v16();
  inline void set_has__v17();
  inline void clear_has__v17();
  inline void set_has__v18();
  inline void clear_has__v18();
  inline void set_has__v19();
  inline void clear_has__v19();
  inline void set_has__v20();
  inline void clear_has__v20();
  inline void set_has__v21();
  inline void clear_has__v21();
  inline void set_has__v22();
  inline void clear_has__v22();
  inline void set_has__v23();
  inline void clear_has__v23();
  inline void set_has__v24();
  inline void clear_has__v24();
  inline void set_has__v25();
  inline void clear_has__v25();
  inline void set_has__v26();
  inline void clear_has__v26();
  inline void set_has__v27();
  inline void clear_has__v27();
  inline void set_has__v28();
  inline void clear_has__v28();
  inline void set_has__v29();
  inline void clear_has__v29();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::FriendInfoProto* _v0_;
  ::FriendInfoProto* _v1_;
  ::FriendInfoProto* _v2_;
  ::FriendInfoProto* _v3_;
  ::FriendInfoProto* _v4_;
  ::FriendInfoProto* _v5_;
  ::FriendInfoProto* _v6_;
  ::FriendInfoProto* _v7_;
  ::FriendInfoProto* _v8_;
  ::FriendInfoProto* _v9_;
  ::FriendInfoProto* _v10_;
  ::FriendInfoProto* _v11_;
  ::FriendInfoProto* _v12_;
  ::FriendInfoProto* _v13_;
  ::FriendInfoProto* _v14_;
  ::FriendInfoProto* _v15_;
  ::FriendInfoProto* _v16_;
  ::FriendInfoProto* _v17_;
  ::FriendInfoProto* _v18_;
  ::FriendInfoProto* _v19_;
  ::FriendInfoProto* _v20_;
  ::FriendInfoProto* _v21_;
  ::FriendInfoProto* _v22_;
  ::FriendInfoProto* _v23_;
  ::FriendInfoProto* _v24_;
  ::FriendInfoProto* _v25_;
  ::FriendInfoProto* _v26_;
  ::FriendInfoProto* _v27_;
  ::FriendInfoProto* _v28_;
  ::FriendInfoProto* _v29_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(30 + 31) / 32];

  friend void  protobuf_AddDesc_gamedata_2eproto();
  friend void protobuf_AssignDesc_gamedata_2eproto();
  friend void protobuf_ShutdownFile_gamedata_2eproto();

  void InitAsDefaultInstance();
  static _PlayerDataFriendsProto* default_instance_;
};
// -------------------------------------------------------------------

class PlayerDataProto : public ::google::protobuf::Message {
 public:
  PlayerDataProto();
  virtual ~PlayerDataProto();

  PlayerDataProto(const PlayerDataProto& from);

  inline PlayerDataProto& operator=(const PlayerDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerDataProto& default_instance();

  void Swap(PlayerDataProto* other);

  // implements Message ----------------------------------------------

  PlayerDataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerDataProto& from);
  void MergeFrom(const PlayerDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional ._PlayerDataFriendsProto Friends = 5;
  inline bool has_friends() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 5;
  inline const ::_PlayerDataFriendsProto& friends() const;
  inline ::_PlayerDataFriendsProto* mutable_friends();
  inline ::_PlayerDataFriendsProto* release_friends();
  inline void set_allocated_friends(::_PlayerDataFriendsProto* friends);

  // optional .TeamInfoProto TeamInfo = 3;
  inline bool has_teaminfo() const;
  inline void clear_teaminfo();
  static const int kTeamInfoFieldNumber = 3;
  inline const ::TeamInfoProto& teaminfo() const;
  inline ::TeamInfoProto* mutable_teaminfo();
  inline ::TeamInfoProto* release_teaminfo();
  inline void set_allocated_teaminfo(::TeamInfoProto* teaminfo);

  // optional .SysInfoProto SysInfo = 1;
  inline bool has_sysinfo() const;
  inline void clear_sysinfo();
  static const int kSysInfoFieldNumber = 1;
  inline const ::SysInfoProto& sysinfo() const;
  inline ::SysInfoProto* mutable_sysinfo();
  inline ::SysInfoProto* release_sysinfo();
  inline void set_allocated_sysinfo(::SysInfoProto* sysinfo);

  // optional .PackageProto Package = 4;
  inline bool has_package() const;
  inline void clear_package();
  static const int kPackageFieldNumber = 4;
  inline const ::PackageProto& package() const;
  inline ::PackageProto* mutable_package();
  inline ::PackageProto* release_package();
  inline void set_allocated_package(::PackageProto* package);

  // optional .BaseInfoProto BaseInfo = 2;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 2;
  inline const ::BaseInfoProto& baseinfo() const;
  inline ::BaseInfoProto* mutable_baseinfo();
  inline ::BaseInfoProto* release_baseinfo();
  inline void set_allocated_baseinfo(::BaseInfoProto* baseinfo);

  // @@protoc_insertion_point(class_scope:PlayerDataProto)
 private:
  inline void set_has_friends();
  inline void clear_has_friends();
  inline void set_has_teaminfo();
  inline void clear_has_teaminfo();
  inline void set_has_sysinfo();
  inline void clear_has_sysinfo();
  inline void set_has_package();
  inline void clear_has_package();
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::_PlayerDataFriendsProto* friends_;
  ::TeamInfoProto* teaminfo_;
  ::SysInfoProto* sysinfo_;
  ::PackageProto* package_;
  ::BaseInfoProto* baseinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gamedata_2eproto();
  friend void protobuf_AssignDesc_gamedata_2eproto();
  friend void protobuf_ShutdownFile_gamedata_2eproto();

  void InitAsDefaultInstance();
  static PlayerDataProto* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerSummaryProto

// optional int32 Level = 3;
inline bool PlayerSummaryProto::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerSummaryProto::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerSummaryProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerSummaryProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PlayerSummaryProto::level() const {
  return level_;
}
inline void PlayerSummaryProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional bytes Id = 1;
inline bool PlayerSummaryProto::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerSummaryProto::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerSummaryProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerSummaryProto::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& PlayerSummaryProto::id() const {
  return *id_;
}
inline void PlayerSummaryProto::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void PlayerSummaryProto::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void PlayerSummaryProto::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerSummaryProto::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* PlayerSummaryProto::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerSummaryProto::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes Name = 2;
inline bool PlayerSummaryProto::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerSummaryProto::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerSummaryProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerSummaryProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerSummaryProto::name() const {
  return *name_;
}
inline void PlayerSummaryProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerSummaryProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerSummaryProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerSummaryProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayerSummaryProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerSummaryProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// _GuildGuildMemberProto

// optional .PlayerSummaryProto _v0 = 1;
inline bool _GuildGuildMemberProto::has__v0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _GuildGuildMemberProto::clear_has__v0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _GuildGuildMemberProto::clear__v0() {
  if (_v0_ != NULL) _v0_->::PlayerSummaryProto::Clear();
  clear_has__v0();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v0() const {
  return _v0_ != NULL ? *_v0_ : *default_instance_->_v0_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v0() {
  set_has__v0();
  if (_v0_ == NULL) _v0_ = new ::PlayerSummaryProto;
  return _v0_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v0() {
  clear_has__v0();
  ::PlayerSummaryProto* temp = _v0_;
  _v0_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v0(::PlayerSummaryProto* _v0) {
  delete _v0_;
  _v0_ = _v0;
  if (_v0) {
    set_has__v0();
  } else {
    clear_has__v0();
  }
}

// optional .PlayerSummaryProto _v1 = 2;
inline bool _GuildGuildMemberProto::has__v1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _GuildGuildMemberProto::clear_has__v1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _GuildGuildMemberProto::clear__v1() {
  if (_v1_ != NULL) _v1_->::PlayerSummaryProto::Clear();
  clear_has__v1();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v1() const {
  return _v1_ != NULL ? *_v1_ : *default_instance_->_v1_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v1() {
  set_has__v1();
  if (_v1_ == NULL) _v1_ = new ::PlayerSummaryProto;
  return _v1_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v1() {
  clear_has__v1();
  ::PlayerSummaryProto* temp = _v1_;
  _v1_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v1(::PlayerSummaryProto* _v1) {
  delete _v1_;
  _v1_ = _v1;
  if (_v1) {
    set_has__v1();
  } else {
    clear_has__v1();
  }
}

// optional .PlayerSummaryProto _v2 = 3;
inline bool _GuildGuildMemberProto::has__v2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _GuildGuildMemberProto::clear_has__v2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _GuildGuildMemberProto::clear__v2() {
  if (_v2_ != NULL) _v2_->::PlayerSummaryProto::Clear();
  clear_has__v2();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v2() const {
  return _v2_ != NULL ? *_v2_ : *default_instance_->_v2_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v2() {
  set_has__v2();
  if (_v2_ == NULL) _v2_ = new ::PlayerSummaryProto;
  return _v2_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v2() {
  clear_has__v2();
  ::PlayerSummaryProto* temp = _v2_;
  _v2_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v2(::PlayerSummaryProto* _v2) {
  delete _v2_;
  _v2_ = _v2;
  if (_v2) {
    set_has__v2();
  } else {
    clear_has__v2();
  }
}

// optional .PlayerSummaryProto _v3 = 4;
inline bool _GuildGuildMemberProto::has__v3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _GuildGuildMemberProto::clear_has__v3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _GuildGuildMemberProto::clear__v3() {
  if (_v3_ != NULL) _v3_->::PlayerSummaryProto::Clear();
  clear_has__v3();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v3() const {
  return _v3_ != NULL ? *_v3_ : *default_instance_->_v3_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v3() {
  set_has__v3();
  if (_v3_ == NULL) _v3_ = new ::PlayerSummaryProto;
  return _v3_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v3() {
  clear_has__v3();
  ::PlayerSummaryProto* temp = _v3_;
  _v3_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v3(::PlayerSummaryProto* _v3) {
  delete _v3_;
  _v3_ = _v3;
  if (_v3) {
    set_has__v3();
  } else {
    clear_has__v3();
  }
}

// optional .PlayerSummaryProto _v4 = 5;
inline bool _GuildGuildMemberProto::has__v4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _GuildGuildMemberProto::clear_has__v4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _GuildGuildMemberProto::clear__v4() {
  if (_v4_ != NULL) _v4_->::PlayerSummaryProto::Clear();
  clear_has__v4();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v4() const {
  return _v4_ != NULL ? *_v4_ : *default_instance_->_v4_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v4() {
  set_has__v4();
  if (_v4_ == NULL) _v4_ = new ::PlayerSummaryProto;
  return _v4_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v4() {
  clear_has__v4();
  ::PlayerSummaryProto* temp = _v4_;
  _v4_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v4(::PlayerSummaryProto* _v4) {
  delete _v4_;
  _v4_ = _v4;
  if (_v4) {
    set_has__v4();
  } else {
    clear_has__v4();
  }
}

// optional .PlayerSummaryProto _v5 = 6;
inline bool _GuildGuildMemberProto::has__v5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v5() {
  _has_bits_[0] |= 0x00000020u;
}
inline void _GuildGuildMemberProto::clear_has__v5() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void _GuildGuildMemberProto::clear__v5() {
  if (_v5_ != NULL) _v5_->::PlayerSummaryProto::Clear();
  clear_has__v5();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v5() const {
  return _v5_ != NULL ? *_v5_ : *default_instance_->_v5_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v5() {
  set_has__v5();
  if (_v5_ == NULL) _v5_ = new ::PlayerSummaryProto;
  return _v5_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v5() {
  clear_has__v5();
  ::PlayerSummaryProto* temp = _v5_;
  _v5_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v5(::PlayerSummaryProto* _v5) {
  delete _v5_;
  _v5_ = _v5;
  if (_v5) {
    set_has__v5();
  } else {
    clear_has__v5();
  }
}

// optional .PlayerSummaryProto _v6 = 7;
inline bool _GuildGuildMemberProto::has__v6() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v6() {
  _has_bits_[0] |= 0x00000040u;
}
inline void _GuildGuildMemberProto::clear_has__v6() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void _GuildGuildMemberProto::clear__v6() {
  if (_v6_ != NULL) _v6_->::PlayerSummaryProto::Clear();
  clear_has__v6();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v6() const {
  return _v6_ != NULL ? *_v6_ : *default_instance_->_v6_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v6() {
  set_has__v6();
  if (_v6_ == NULL) _v6_ = new ::PlayerSummaryProto;
  return _v6_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v6() {
  clear_has__v6();
  ::PlayerSummaryProto* temp = _v6_;
  _v6_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v6(::PlayerSummaryProto* _v6) {
  delete _v6_;
  _v6_ = _v6;
  if (_v6) {
    set_has__v6();
  } else {
    clear_has__v6();
  }
}

// optional .PlayerSummaryProto _v7 = 8;
inline bool _GuildGuildMemberProto::has__v7() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v7() {
  _has_bits_[0] |= 0x00000080u;
}
inline void _GuildGuildMemberProto::clear_has__v7() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void _GuildGuildMemberProto::clear__v7() {
  if (_v7_ != NULL) _v7_->::PlayerSummaryProto::Clear();
  clear_has__v7();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v7() const {
  return _v7_ != NULL ? *_v7_ : *default_instance_->_v7_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v7() {
  set_has__v7();
  if (_v7_ == NULL) _v7_ = new ::PlayerSummaryProto;
  return _v7_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v7() {
  clear_has__v7();
  ::PlayerSummaryProto* temp = _v7_;
  _v7_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v7(::PlayerSummaryProto* _v7) {
  delete _v7_;
  _v7_ = _v7;
  if (_v7) {
    set_has__v7();
  } else {
    clear_has__v7();
  }
}

// optional .PlayerSummaryProto _v8 = 9;
inline bool _GuildGuildMemberProto::has__v8() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v8() {
  _has_bits_[0] |= 0x00000100u;
}
inline void _GuildGuildMemberProto::clear_has__v8() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void _GuildGuildMemberProto::clear__v8() {
  if (_v8_ != NULL) _v8_->::PlayerSummaryProto::Clear();
  clear_has__v8();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v8() const {
  return _v8_ != NULL ? *_v8_ : *default_instance_->_v8_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v8() {
  set_has__v8();
  if (_v8_ == NULL) _v8_ = new ::PlayerSummaryProto;
  return _v8_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v8() {
  clear_has__v8();
  ::PlayerSummaryProto* temp = _v8_;
  _v8_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v8(::PlayerSummaryProto* _v8) {
  delete _v8_;
  _v8_ = _v8;
  if (_v8) {
    set_has__v8();
  } else {
    clear_has__v8();
  }
}

// optional .PlayerSummaryProto _v9 = 10;
inline bool _GuildGuildMemberProto::has__v9() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v9() {
  _has_bits_[0] |= 0x00000200u;
}
inline void _GuildGuildMemberProto::clear_has__v9() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void _GuildGuildMemberProto::clear__v9() {
  if (_v9_ != NULL) _v9_->::PlayerSummaryProto::Clear();
  clear_has__v9();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v9() const {
  return _v9_ != NULL ? *_v9_ : *default_instance_->_v9_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v9() {
  set_has__v9();
  if (_v9_ == NULL) _v9_ = new ::PlayerSummaryProto;
  return _v9_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v9() {
  clear_has__v9();
  ::PlayerSummaryProto* temp = _v9_;
  _v9_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v9(::PlayerSummaryProto* _v9) {
  delete _v9_;
  _v9_ = _v9;
  if (_v9) {
    set_has__v9();
  } else {
    clear_has__v9();
  }
}

// optional .PlayerSummaryProto _v10 = 11;
inline bool _GuildGuildMemberProto::has__v10() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v10() {
  _has_bits_[0] |= 0x00000400u;
}
inline void _GuildGuildMemberProto::clear_has__v10() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void _GuildGuildMemberProto::clear__v10() {
  if (_v10_ != NULL) _v10_->::PlayerSummaryProto::Clear();
  clear_has__v10();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v10() const {
  return _v10_ != NULL ? *_v10_ : *default_instance_->_v10_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v10() {
  set_has__v10();
  if (_v10_ == NULL) _v10_ = new ::PlayerSummaryProto;
  return _v10_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v10() {
  clear_has__v10();
  ::PlayerSummaryProto* temp = _v10_;
  _v10_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v10(::PlayerSummaryProto* _v10) {
  delete _v10_;
  _v10_ = _v10;
  if (_v10) {
    set_has__v10();
  } else {
    clear_has__v10();
  }
}

// optional .PlayerSummaryProto _v11 = 12;
inline bool _GuildGuildMemberProto::has__v11() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v11() {
  _has_bits_[0] |= 0x00000800u;
}
inline void _GuildGuildMemberProto::clear_has__v11() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void _GuildGuildMemberProto::clear__v11() {
  if (_v11_ != NULL) _v11_->::PlayerSummaryProto::Clear();
  clear_has__v11();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v11() const {
  return _v11_ != NULL ? *_v11_ : *default_instance_->_v11_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v11() {
  set_has__v11();
  if (_v11_ == NULL) _v11_ = new ::PlayerSummaryProto;
  return _v11_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v11() {
  clear_has__v11();
  ::PlayerSummaryProto* temp = _v11_;
  _v11_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v11(::PlayerSummaryProto* _v11) {
  delete _v11_;
  _v11_ = _v11;
  if (_v11) {
    set_has__v11();
  } else {
    clear_has__v11();
  }
}

// optional .PlayerSummaryProto _v12 = 13;
inline bool _GuildGuildMemberProto::has__v12() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v12() {
  _has_bits_[0] |= 0x00001000u;
}
inline void _GuildGuildMemberProto::clear_has__v12() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void _GuildGuildMemberProto::clear__v12() {
  if (_v12_ != NULL) _v12_->::PlayerSummaryProto::Clear();
  clear_has__v12();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v12() const {
  return _v12_ != NULL ? *_v12_ : *default_instance_->_v12_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v12() {
  set_has__v12();
  if (_v12_ == NULL) _v12_ = new ::PlayerSummaryProto;
  return _v12_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v12() {
  clear_has__v12();
  ::PlayerSummaryProto* temp = _v12_;
  _v12_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v12(::PlayerSummaryProto* _v12) {
  delete _v12_;
  _v12_ = _v12;
  if (_v12) {
    set_has__v12();
  } else {
    clear_has__v12();
  }
}

// optional .PlayerSummaryProto _v13 = 14;
inline bool _GuildGuildMemberProto::has__v13() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v13() {
  _has_bits_[0] |= 0x00002000u;
}
inline void _GuildGuildMemberProto::clear_has__v13() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void _GuildGuildMemberProto::clear__v13() {
  if (_v13_ != NULL) _v13_->::PlayerSummaryProto::Clear();
  clear_has__v13();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v13() const {
  return _v13_ != NULL ? *_v13_ : *default_instance_->_v13_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v13() {
  set_has__v13();
  if (_v13_ == NULL) _v13_ = new ::PlayerSummaryProto;
  return _v13_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v13() {
  clear_has__v13();
  ::PlayerSummaryProto* temp = _v13_;
  _v13_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v13(::PlayerSummaryProto* _v13) {
  delete _v13_;
  _v13_ = _v13;
  if (_v13) {
    set_has__v13();
  } else {
    clear_has__v13();
  }
}

// optional .PlayerSummaryProto _v14 = 15;
inline bool _GuildGuildMemberProto::has__v14() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v14() {
  _has_bits_[0] |= 0x00004000u;
}
inline void _GuildGuildMemberProto::clear_has__v14() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void _GuildGuildMemberProto::clear__v14() {
  if (_v14_ != NULL) _v14_->::PlayerSummaryProto::Clear();
  clear_has__v14();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v14() const {
  return _v14_ != NULL ? *_v14_ : *default_instance_->_v14_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v14() {
  set_has__v14();
  if (_v14_ == NULL) _v14_ = new ::PlayerSummaryProto;
  return _v14_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v14() {
  clear_has__v14();
  ::PlayerSummaryProto* temp = _v14_;
  _v14_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v14(::PlayerSummaryProto* _v14) {
  delete _v14_;
  _v14_ = _v14;
  if (_v14) {
    set_has__v14();
  } else {
    clear_has__v14();
  }
}

// optional .PlayerSummaryProto _v15 = 16;
inline bool _GuildGuildMemberProto::has__v15() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v15() {
  _has_bits_[0] |= 0x00008000u;
}
inline void _GuildGuildMemberProto::clear_has__v15() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void _GuildGuildMemberProto::clear__v15() {
  if (_v15_ != NULL) _v15_->::PlayerSummaryProto::Clear();
  clear_has__v15();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v15() const {
  return _v15_ != NULL ? *_v15_ : *default_instance_->_v15_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v15() {
  set_has__v15();
  if (_v15_ == NULL) _v15_ = new ::PlayerSummaryProto;
  return _v15_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v15() {
  clear_has__v15();
  ::PlayerSummaryProto* temp = _v15_;
  _v15_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v15(::PlayerSummaryProto* _v15) {
  delete _v15_;
  _v15_ = _v15;
  if (_v15) {
    set_has__v15();
  } else {
    clear_has__v15();
  }
}

// optional .PlayerSummaryProto _v16 = 17;
inline bool _GuildGuildMemberProto::has__v16() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v16() {
  _has_bits_[0] |= 0x00010000u;
}
inline void _GuildGuildMemberProto::clear_has__v16() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void _GuildGuildMemberProto::clear__v16() {
  if (_v16_ != NULL) _v16_->::PlayerSummaryProto::Clear();
  clear_has__v16();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v16() const {
  return _v16_ != NULL ? *_v16_ : *default_instance_->_v16_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v16() {
  set_has__v16();
  if (_v16_ == NULL) _v16_ = new ::PlayerSummaryProto;
  return _v16_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v16() {
  clear_has__v16();
  ::PlayerSummaryProto* temp = _v16_;
  _v16_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v16(::PlayerSummaryProto* _v16) {
  delete _v16_;
  _v16_ = _v16;
  if (_v16) {
    set_has__v16();
  } else {
    clear_has__v16();
  }
}

// optional .PlayerSummaryProto _v17 = 18;
inline bool _GuildGuildMemberProto::has__v17() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v17() {
  _has_bits_[0] |= 0x00020000u;
}
inline void _GuildGuildMemberProto::clear_has__v17() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void _GuildGuildMemberProto::clear__v17() {
  if (_v17_ != NULL) _v17_->::PlayerSummaryProto::Clear();
  clear_has__v17();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v17() const {
  return _v17_ != NULL ? *_v17_ : *default_instance_->_v17_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v17() {
  set_has__v17();
  if (_v17_ == NULL) _v17_ = new ::PlayerSummaryProto;
  return _v17_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v17() {
  clear_has__v17();
  ::PlayerSummaryProto* temp = _v17_;
  _v17_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v17(::PlayerSummaryProto* _v17) {
  delete _v17_;
  _v17_ = _v17;
  if (_v17) {
    set_has__v17();
  } else {
    clear_has__v17();
  }
}

// optional .PlayerSummaryProto _v18 = 19;
inline bool _GuildGuildMemberProto::has__v18() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v18() {
  _has_bits_[0] |= 0x00040000u;
}
inline void _GuildGuildMemberProto::clear_has__v18() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void _GuildGuildMemberProto::clear__v18() {
  if (_v18_ != NULL) _v18_->::PlayerSummaryProto::Clear();
  clear_has__v18();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v18() const {
  return _v18_ != NULL ? *_v18_ : *default_instance_->_v18_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v18() {
  set_has__v18();
  if (_v18_ == NULL) _v18_ = new ::PlayerSummaryProto;
  return _v18_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v18() {
  clear_has__v18();
  ::PlayerSummaryProto* temp = _v18_;
  _v18_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v18(::PlayerSummaryProto* _v18) {
  delete _v18_;
  _v18_ = _v18;
  if (_v18) {
    set_has__v18();
  } else {
    clear_has__v18();
  }
}

// optional .PlayerSummaryProto _v19 = 20;
inline bool _GuildGuildMemberProto::has__v19() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v19() {
  _has_bits_[0] |= 0x00080000u;
}
inline void _GuildGuildMemberProto::clear_has__v19() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void _GuildGuildMemberProto::clear__v19() {
  if (_v19_ != NULL) _v19_->::PlayerSummaryProto::Clear();
  clear_has__v19();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v19() const {
  return _v19_ != NULL ? *_v19_ : *default_instance_->_v19_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v19() {
  set_has__v19();
  if (_v19_ == NULL) _v19_ = new ::PlayerSummaryProto;
  return _v19_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v19() {
  clear_has__v19();
  ::PlayerSummaryProto* temp = _v19_;
  _v19_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v19(::PlayerSummaryProto* _v19) {
  delete _v19_;
  _v19_ = _v19;
  if (_v19) {
    set_has__v19();
  } else {
    clear_has__v19();
  }
}

// optional .PlayerSummaryProto _v20 = 21;
inline bool _GuildGuildMemberProto::has__v20() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v20() {
  _has_bits_[0] |= 0x00100000u;
}
inline void _GuildGuildMemberProto::clear_has__v20() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void _GuildGuildMemberProto::clear__v20() {
  if (_v20_ != NULL) _v20_->::PlayerSummaryProto::Clear();
  clear_has__v20();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v20() const {
  return _v20_ != NULL ? *_v20_ : *default_instance_->_v20_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v20() {
  set_has__v20();
  if (_v20_ == NULL) _v20_ = new ::PlayerSummaryProto;
  return _v20_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v20() {
  clear_has__v20();
  ::PlayerSummaryProto* temp = _v20_;
  _v20_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v20(::PlayerSummaryProto* _v20) {
  delete _v20_;
  _v20_ = _v20;
  if (_v20) {
    set_has__v20();
  } else {
    clear_has__v20();
  }
}

// optional .PlayerSummaryProto _v21 = 22;
inline bool _GuildGuildMemberProto::has__v21() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v21() {
  _has_bits_[0] |= 0x00200000u;
}
inline void _GuildGuildMemberProto::clear_has__v21() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void _GuildGuildMemberProto::clear__v21() {
  if (_v21_ != NULL) _v21_->::PlayerSummaryProto::Clear();
  clear_has__v21();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v21() const {
  return _v21_ != NULL ? *_v21_ : *default_instance_->_v21_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v21() {
  set_has__v21();
  if (_v21_ == NULL) _v21_ = new ::PlayerSummaryProto;
  return _v21_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v21() {
  clear_has__v21();
  ::PlayerSummaryProto* temp = _v21_;
  _v21_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v21(::PlayerSummaryProto* _v21) {
  delete _v21_;
  _v21_ = _v21;
  if (_v21) {
    set_has__v21();
  } else {
    clear_has__v21();
  }
}

// optional .PlayerSummaryProto _v22 = 23;
inline bool _GuildGuildMemberProto::has__v22() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v22() {
  _has_bits_[0] |= 0x00400000u;
}
inline void _GuildGuildMemberProto::clear_has__v22() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void _GuildGuildMemberProto::clear__v22() {
  if (_v22_ != NULL) _v22_->::PlayerSummaryProto::Clear();
  clear_has__v22();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v22() const {
  return _v22_ != NULL ? *_v22_ : *default_instance_->_v22_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v22() {
  set_has__v22();
  if (_v22_ == NULL) _v22_ = new ::PlayerSummaryProto;
  return _v22_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v22() {
  clear_has__v22();
  ::PlayerSummaryProto* temp = _v22_;
  _v22_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v22(::PlayerSummaryProto* _v22) {
  delete _v22_;
  _v22_ = _v22;
  if (_v22) {
    set_has__v22();
  } else {
    clear_has__v22();
  }
}

// optional .PlayerSummaryProto _v23 = 24;
inline bool _GuildGuildMemberProto::has__v23() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v23() {
  _has_bits_[0] |= 0x00800000u;
}
inline void _GuildGuildMemberProto::clear_has__v23() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void _GuildGuildMemberProto::clear__v23() {
  if (_v23_ != NULL) _v23_->::PlayerSummaryProto::Clear();
  clear_has__v23();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v23() const {
  return _v23_ != NULL ? *_v23_ : *default_instance_->_v23_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v23() {
  set_has__v23();
  if (_v23_ == NULL) _v23_ = new ::PlayerSummaryProto;
  return _v23_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v23() {
  clear_has__v23();
  ::PlayerSummaryProto* temp = _v23_;
  _v23_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v23(::PlayerSummaryProto* _v23) {
  delete _v23_;
  _v23_ = _v23;
  if (_v23) {
    set_has__v23();
  } else {
    clear_has__v23();
  }
}

// optional .PlayerSummaryProto _v24 = 25;
inline bool _GuildGuildMemberProto::has__v24() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v24() {
  _has_bits_[0] |= 0x01000000u;
}
inline void _GuildGuildMemberProto::clear_has__v24() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void _GuildGuildMemberProto::clear__v24() {
  if (_v24_ != NULL) _v24_->::PlayerSummaryProto::Clear();
  clear_has__v24();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v24() const {
  return _v24_ != NULL ? *_v24_ : *default_instance_->_v24_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v24() {
  set_has__v24();
  if (_v24_ == NULL) _v24_ = new ::PlayerSummaryProto;
  return _v24_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v24() {
  clear_has__v24();
  ::PlayerSummaryProto* temp = _v24_;
  _v24_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v24(::PlayerSummaryProto* _v24) {
  delete _v24_;
  _v24_ = _v24;
  if (_v24) {
    set_has__v24();
  } else {
    clear_has__v24();
  }
}

// optional .PlayerSummaryProto _v25 = 26;
inline bool _GuildGuildMemberProto::has__v25() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v25() {
  _has_bits_[0] |= 0x02000000u;
}
inline void _GuildGuildMemberProto::clear_has__v25() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void _GuildGuildMemberProto::clear__v25() {
  if (_v25_ != NULL) _v25_->::PlayerSummaryProto::Clear();
  clear_has__v25();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v25() const {
  return _v25_ != NULL ? *_v25_ : *default_instance_->_v25_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v25() {
  set_has__v25();
  if (_v25_ == NULL) _v25_ = new ::PlayerSummaryProto;
  return _v25_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v25() {
  clear_has__v25();
  ::PlayerSummaryProto* temp = _v25_;
  _v25_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v25(::PlayerSummaryProto* _v25) {
  delete _v25_;
  _v25_ = _v25;
  if (_v25) {
    set_has__v25();
  } else {
    clear_has__v25();
  }
}

// optional .PlayerSummaryProto _v26 = 27;
inline bool _GuildGuildMemberProto::has__v26() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v26() {
  _has_bits_[0] |= 0x04000000u;
}
inline void _GuildGuildMemberProto::clear_has__v26() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void _GuildGuildMemberProto::clear__v26() {
  if (_v26_ != NULL) _v26_->::PlayerSummaryProto::Clear();
  clear_has__v26();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v26() const {
  return _v26_ != NULL ? *_v26_ : *default_instance_->_v26_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v26() {
  set_has__v26();
  if (_v26_ == NULL) _v26_ = new ::PlayerSummaryProto;
  return _v26_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v26() {
  clear_has__v26();
  ::PlayerSummaryProto* temp = _v26_;
  _v26_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v26(::PlayerSummaryProto* _v26) {
  delete _v26_;
  _v26_ = _v26;
  if (_v26) {
    set_has__v26();
  } else {
    clear_has__v26();
  }
}

// optional .PlayerSummaryProto _v27 = 28;
inline bool _GuildGuildMemberProto::has__v27() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v27() {
  _has_bits_[0] |= 0x08000000u;
}
inline void _GuildGuildMemberProto::clear_has__v27() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void _GuildGuildMemberProto::clear__v27() {
  if (_v27_ != NULL) _v27_->::PlayerSummaryProto::Clear();
  clear_has__v27();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v27() const {
  return _v27_ != NULL ? *_v27_ : *default_instance_->_v27_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v27() {
  set_has__v27();
  if (_v27_ == NULL) _v27_ = new ::PlayerSummaryProto;
  return _v27_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v27() {
  clear_has__v27();
  ::PlayerSummaryProto* temp = _v27_;
  _v27_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v27(::PlayerSummaryProto* _v27) {
  delete _v27_;
  _v27_ = _v27;
  if (_v27) {
    set_has__v27();
  } else {
    clear_has__v27();
  }
}

// optional .PlayerSummaryProto _v28 = 29;
inline bool _GuildGuildMemberProto::has__v28() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v28() {
  _has_bits_[0] |= 0x10000000u;
}
inline void _GuildGuildMemberProto::clear_has__v28() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void _GuildGuildMemberProto::clear__v28() {
  if (_v28_ != NULL) _v28_->::PlayerSummaryProto::Clear();
  clear_has__v28();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v28() const {
  return _v28_ != NULL ? *_v28_ : *default_instance_->_v28_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v28() {
  set_has__v28();
  if (_v28_ == NULL) _v28_ = new ::PlayerSummaryProto;
  return _v28_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v28() {
  clear_has__v28();
  ::PlayerSummaryProto* temp = _v28_;
  _v28_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v28(::PlayerSummaryProto* _v28) {
  delete _v28_;
  _v28_ = _v28;
  if (_v28) {
    set_has__v28();
  } else {
    clear_has__v28();
  }
}

// optional .PlayerSummaryProto _v29 = 30;
inline bool _GuildGuildMemberProto::has__v29() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void _GuildGuildMemberProto::set_has__v29() {
  _has_bits_[0] |= 0x20000000u;
}
inline void _GuildGuildMemberProto::clear_has__v29() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void _GuildGuildMemberProto::clear__v29() {
  if (_v29_ != NULL) _v29_->::PlayerSummaryProto::Clear();
  clear_has__v29();
}
inline const ::PlayerSummaryProto& _GuildGuildMemberProto::_v29() const {
  return _v29_ != NULL ? *_v29_ : *default_instance_->_v29_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::mutable__v29() {
  set_has__v29();
  if (_v29_ == NULL) _v29_ = new ::PlayerSummaryProto;
  return _v29_;
}
inline ::PlayerSummaryProto* _GuildGuildMemberProto::release__v29() {
  clear_has__v29();
  ::PlayerSummaryProto* temp = _v29_;
  _v29_ = NULL;
  return temp;
}
inline void _GuildGuildMemberProto::set_allocated__v29(::PlayerSummaryProto* _v29) {
  delete _v29_;
  _v29_ = _v29;
  if (_v29) {
    set_has__v29();
  } else {
    clear_has__v29();
  }
}

// -------------------------------------------------------------------

// GuildProto

// optional ._GuildGuildMemberProto GuildMember = 5;
inline bool GuildProto::has_guildmember() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildProto::set_has_guildmember() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildProto::clear_has_guildmember() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildProto::clear_guildmember() {
  if (guildmember_ != NULL) guildmember_->::_GuildGuildMemberProto::Clear();
  clear_has_guildmember();
}
inline const ::_GuildGuildMemberProto& GuildProto::guildmember() const {
  return guildmember_ != NULL ? *guildmember_ : *default_instance_->guildmember_;
}
inline ::_GuildGuildMemberProto* GuildProto::mutable_guildmember() {
  set_has_guildmember();
  if (guildmember_ == NULL) guildmember_ = new ::_GuildGuildMemberProto;
  return guildmember_;
}
inline ::_GuildGuildMemberProto* GuildProto::release_guildmember() {
  clear_has_guildmember();
  ::_GuildGuildMemberProto* temp = guildmember_;
  guildmember_ = NULL;
  return temp;
}
inline void GuildProto::set_allocated_guildmember(::_GuildGuildMemberProto* guildmember) {
  delete guildmember_;
  guildmember_ = guildmember;
  if (guildmember) {
    set_has_guildmember();
  } else {
    clear_has_guildmember();
  }
}

// optional bytes Name = 3;
inline bool GuildProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GuildProto::name() const {
  return *name_;
}
inline void GuildProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GuildProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GuildProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GuildProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Level = 4;
inline bool GuildProto::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildProto::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 GuildProto::level() const {
  return level_;
}
inline void GuildProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 Id = 1;
inline bool GuildProto::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildProto::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GuildProto::id() const {
  return id_;
}
inline void GuildProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 Chairman = 2;
inline bool GuildProto::has_chairman() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildProto::set_has_chairman() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildProto::clear_has_chairman() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildProto::clear_chairman() {
  chairman_ = 0;
  clear_has_chairman();
}
inline ::google::protobuf::int32 GuildProto::chairman() const {
  return chairman_;
}
inline void GuildProto::set_chairman(::google::protobuf::int32 value) {
  set_has_chairman();
  chairman_ = value;
}

// -------------------------------------------------------------------

// FriendInfoProto

// optional .PlayerSummaryProto Info = 1;
inline bool FriendInfoProto::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendInfoProto::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendInfoProto::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendInfoProto::clear_info() {
  if (info_ != NULL) info_->::PlayerSummaryProto::Clear();
  clear_has_info();
}
inline const ::PlayerSummaryProto& FriendInfoProto::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PlayerSummaryProto* FriendInfoProto::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PlayerSummaryProto;
  return info_;
}
inline ::PlayerSummaryProto* FriendInfoProto::release_info() {
  clear_has_info();
  ::PlayerSummaryProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void FriendInfoProto::set_allocated_info(::PlayerSummaryProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional int32 Mobility = 2;
inline bool FriendInfoProto::has_mobility() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendInfoProto::set_has_mobility() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendInfoProto::clear_has_mobility() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendInfoProto::clear_mobility() {
  mobility_ = 0;
  clear_has_mobility();
}
inline ::google::protobuf::int32 FriendInfoProto::mobility() const {
  return mobility_;
}
inline void FriendInfoProto::set_mobility(::google::protobuf::int32 value) {
  set_has_mobility();
  mobility_ = value;
}

// -------------------------------------------------------------------

// BaseInfoProto

// optional int32 EliteLine = 9;
inline bool BaseInfoProto::has_eliteline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseInfoProto::set_has_eliteline() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseInfoProto::clear_has_eliteline() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseInfoProto::clear_eliteline() {
  eliteline_ = 0;
  clear_has_eliteline();
}
inline ::google::protobuf::int32 BaseInfoProto::eliteline() const {
  return eliteline_;
}
inline void BaseInfoProto::set_eliteline(::google::protobuf::int32 value) {
  set_has_eliteline();
  eliteline_ = value;
}

// optional bytes Name = 2;
inline bool BaseInfoProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseInfoProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseInfoProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseInfoProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BaseInfoProto::name() const {
  return *name_;
}
inline void BaseInfoProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BaseInfoProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BaseInfoProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BaseInfoProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BaseInfoProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BaseInfoProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Level = 3;
inline bool BaseInfoProto::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BaseInfoProto::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BaseInfoProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BaseInfoProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 BaseInfoProto::level() const {
  return level_;
}
inline void BaseInfoProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 MainLine = 8;
inline bool BaseInfoProto::has_mainline() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BaseInfoProto::set_has_mainline() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BaseInfoProto::clear_has_mainline() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BaseInfoProto::clear_mainline() {
  mainline_ = 0;
  clear_has_mainline();
}
inline ::google::protobuf::int32 BaseInfoProto::mainline() const {
  return mainline_;
}
inline void BaseInfoProto::set_mainline(::google::protobuf::int32 value) {
  set_has_mainline();
  mainline_ = value;
}

// optional int32 Exp = 7;
inline bool BaseInfoProto::has_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BaseInfoProto::set_has_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BaseInfoProto::clear_has_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BaseInfoProto::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 BaseInfoProto::exp() const {
  return exp_;
}
inline void BaseInfoProto::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 OffTime = 10;
inline bool BaseInfoProto::has_offtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BaseInfoProto::set_has_offtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BaseInfoProto::clear_has_offtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BaseInfoProto::clear_offtime() {
  offtime_ = 0;
  clear_has_offtime();
}
inline ::google::protobuf::int32 BaseInfoProto::offtime() const {
  return offtime_;
}
inline void BaseInfoProto::set_offtime(::google::protobuf::int32 value) {
  set_has_offtime();
  offtime_ = value;
}

// optional int32 Diamond = 4;
inline bool BaseInfoProto::has_diamond() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BaseInfoProto::set_has_diamond() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BaseInfoProto::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BaseInfoProto::clear_diamond() {
  diamond_ = 0;
  clear_has_diamond();
}
inline ::google::protobuf::int32 BaseInfoProto::diamond() const {
  return diamond_;
}
inline void BaseInfoProto::set_diamond(::google::protobuf::int32 value) {
  set_has_diamond();
  diamond_ = value;
}

// optional int32 Gold = 5;
inline bool BaseInfoProto::has_gold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BaseInfoProto::set_has_gold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BaseInfoProto::clear_has_gold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BaseInfoProto::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 BaseInfoProto::gold() const {
  return gold_;
}
inline void BaseInfoProto::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 Mobility = 6;
inline bool BaseInfoProto::has_mobility() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BaseInfoProto::set_has_mobility() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BaseInfoProto::clear_has_mobility() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BaseInfoProto::clear_mobility() {
  mobility_ = 0;
  clear_has_mobility();
}
inline ::google::protobuf::int32 BaseInfoProto::mobility() const {
  return mobility_;
}
inline void BaseInfoProto::set_mobility(::google::protobuf::int32 value) {
  set_has_mobility();
  mobility_ = value;
}

// optional int32 HeroLine = 11;
inline bool BaseInfoProto::has_heroline() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BaseInfoProto::set_has_heroline() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BaseInfoProto::clear_has_heroline() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BaseInfoProto::clear_heroline() {
  heroline_ = 0;
  clear_has_heroline();
}
inline ::google::protobuf::int32 BaseInfoProto::heroline() const {
  return heroline_;
}
inline void BaseInfoProto::set_heroline(::google::protobuf::int32 value) {
  set_has_heroline();
  heroline_ = value;
}

// optional bytes Id = 1;
inline bool BaseInfoProto::has_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BaseInfoProto::set_has_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BaseInfoProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BaseInfoProto::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BaseInfoProto::id() const {
  return *id_;
}
inline void BaseInfoProto::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BaseInfoProto::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BaseInfoProto::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BaseInfoProto::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BaseInfoProto::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BaseInfoProto::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SysInfoProto

// optional bytes ServerName = 2;
inline bool SysInfoProto::has_servername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SysInfoProto::set_has_servername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SysInfoProto::clear_has_servername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SysInfoProto::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& SysInfoProto::servername() const {
  return *servername_;
}
inline void SysInfoProto::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void SysInfoProto::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void SysInfoProto::set_servername(const void* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SysInfoProto::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* SysInfoProto::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SysInfoProto::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ServerTime = 1;
inline bool SysInfoProto::has_servertime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SysInfoProto::set_has_servertime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SysInfoProto::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SysInfoProto::clear_servertime() {
  servertime_ = 0;
  clear_has_servertime();
}
inline ::google::protobuf::int32 SysInfoProto::servertime() const {
  return servertime_;
}
inline void SysInfoProto::set_servertime(::google::protobuf::int32 value) {
  set_has_servertime();
  servertime_ = value;
}

// optional int32 OnlinePlayer = 3;
inline bool SysInfoProto::has_onlineplayer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SysInfoProto::set_has_onlineplayer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SysInfoProto::clear_has_onlineplayer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SysInfoProto::clear_onlineplayer() {
  onlineplayer_ = 0;
  clear_has_onlineplayer();
}
inline ::google::protobuf::int32 SysInfoProto::onlineplayer() const {
  return onlineplayer_;
}
inline void SysInfoProto::set_onlineplayer(::google::protobuf::int32 value) {
  set_has_onlineplayer();
  onlineplayer_ = value;
}

// -------------------------------------------------------------------

// CardProto

// optional int32 Id = 1;
inline bool CardProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CardProto::id() const {
  return id_;
}
inline void CardProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 LeaderSkill = 3;
inline bool CardProto::has_leaderskill() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CardProto::set_has_leaderskill() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CardProto::clear_has_leaderskill() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CardProto::clear_leaderskill() {
  leaderskill_ = 0;
  clear_has_leaderskill();
}
inline ::google::protobuf::int32 CardProto::leaderskill() const {
  return leaderskill_;
}
inline void CardProto::set_leaderskill(::google::protobuf::int32 value) {
  set_has_leaderskill();
  leaderskill_ = value;
}

// optional int32 Level = 2;
inline bool CardProto::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CardProto::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CardProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CardProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 CardProto::level() const {
  return level_;
}
inline void CardProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// _PackageSlotProto

// optional .CardProto _v0 = 1;
inline bool _PackageSlotProto::has__v0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _PackageSlotProto::set_has__v0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _PackageSlotProto::clear_has__v0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _PackageSlotProto::clear__v0() {
  if (_v0_ != NULL) _v0_->::CardProto::Clear();
  clear_has__v0();
}
inline const ::CardProto& _PackageSlotProto::_v0() const {
  return _v0_ != NULL ? *_v0_ : *default_instance_->_v0_;
}
inline ::CardProto* _PackageSlotProto::mutable__v0() {
  set_has__v0();
  if (_v0_ == NULL) _v0_ = new ::CardProto;
  return _v0_;
}
inline ::CardProto* _PackageSlotProto::release__v0() {
  clear_has__v0();
  ::CardProto* temp = _v0_;
  _v0_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v0(::CardProto* _v0) {
  delete _v0_;
  _v0_ = _v0;
  if (_v0) {
    set_has__v0();
  } else {
    clear_has__v0();
  }
}

// optional .CardProto _v1 = 2;
inline bool _PackageSlotProto::has__v1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _PackageSlotProto::set_has__v1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _PackageSlotProto::clear_has__v1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _PackageSlotProto::clear__v1() {
  if (_v1_ != NULL) _v1_->::CardProto::Clear();
  clear_has__v1();
}
inline const ::CardProto& _PackageSlotProto::_v1() const {
  return _v1_ != NULL ? *_v1_ : *default_instance_->_v1_;
}
inline ::CardProto* _PackageSlotProto::mutable__v1() {
  set_has__v1();
  if (_v1_ == NULL) _v1_ = new ::CardProto;
  return _v1_;
}
inline ::CardProto* _PackageSlotProto::release__v1() {
  clear_has__v1();
  ::CardProto* temp = _v1_;
  _v1_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v1(::CardProto* _v1) {
  delete _v1_;
  _v1_ = _v1;
  if (_v1) {
    set_has__v1();
  } else {
    clear_has__v1();
  }
}

// optional .CardProto _v2 = 3;
inline bool _PackageSlotProto::has__v2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _PackageSlotProto::set_has__v2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _PackageSlotProto::clear_has__v2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _PackageSlotProto::clear__v2() {
  if (_v2_ != NULL) _v2_->::CardProto::Clear();
  clear_has__v2();
}
inline const ::CardProto& _PackageSlotProto::_v2() const {
  return _v2_ != NULL ? *_v2_ : *default_instance_->_v2_;
}
inline ::CardProto* _PackageSlotProto::mutable__v2() {
  set_has__v2();
  if (_v2_ == NULL) _v2_ = new ::CardProto;
  return _v2_;
}
inline ::CardProto* _PackageSlotProto::release__v2() {
  clear_has__v2();
  ::CardProto* temp = _v2_;
  _v2_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v2(::CardProto* _v2) {
  delete _v2_;
  _v2_ = _v2;
  if (_v2) {
    set_has__v2();
  } else {
    clear_has__v2();
  }
}

// optional .CardProto _v3 = 4;
inline bool _PackageSlotProto::has__v3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _PackageSlotProto::set_has__v3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _PackageSlotProto::clear_has__v3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _PackageSlotProto::clear__v3() {
  if (_v3_ != NULL) _v3_->::CardProto::Clear();
  clear_has__v3();
}
inline const ::CardProto& _PackageSlotProto::_v3() const {
  return _v3_ != NULL ? *_v3_ : *default_instance_->_v3_;
}
inline ::CardProto* _PackageSlotProto::mutable__v3() {
  set_has__v3();
  if (_v3_ == NULL) _v3_ = new ::CardProto;
  return _v3_;
}
inline ::CardProto* _PackageSlotProto::release__v3() {
  clear_has__v3();
  ::CardProto* temp = _v3_;
  _v3_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v3(::CardProto* _v3) {
  delete _v3_;
  _v3_ = _v3;
  if (_v3) {
    set_has__v3();
  } else {
    clear_has__v3();
  }
}

// optional .CardProto _v4 = 5;
inline bool _PackageSlotProto::has__v4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _PackageSlotProto::set_has__v4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _PackageSlotProto::clear_has__v4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _PackageSlotProto::clear__v4() {
  if (_v4_ != NULL) _v4_->::CardProto::Clear();
  clear_has__v4();
}
inline const ::CardProto& _PackageSlotProto::_v4() const {
  return _v4_ != NULL ? *_v4_ : *default_instance_->_v4_;
}
inline ::CardProto* _PackageSlotProto::mutable__v4() {
  set_has__v4();
  if (_v4_ == NULL) _v4_ = new ::CardProto;
  return _v4_;
}
inline ::CardProto* _PackageSlotProto::release__v4() {
  clear_has__v4();
  ::CardProto* temp = _v4_;
  _v4_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v4(::CardProto* _v4) {
  delete _v4_;
  _v4_ = _v4;
  if (_v4) {
    set_has__v4();
  } else {
    clear_has__v4();
  }
}

// optional .CardProto _v5 = 6;
inline bool _PackageSlotProto::has__v5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void _PackageSlotProto::set_has__v5() {
  _has_bits_[0] |= 0x00000020u;
}
inline void _PackageSlotProto::clear_has__v5() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void _PackageSlotProto::clear__v5() {
  if (_v5_ != NULL) _v5_->::CardProto::Clear();
  clear_has__v5();
}
inline const ::CardProto& _PackageSlotProto::_v5() const {
  return _v5_ != NULL ? *_v5_ : *default_instance_->_v5_;
}
inline ::CardProto* _PackageSlotProto::mutable__v5() {
  set_has__v5();
  if (_v5_ == NULL) _v5_ = new ::CardProto;
  return _v5_;
}
inline ::CardProto* _PackageSlotProto::release__v5() {
  clear_has__v5();
  ::CardProto* temp = _v5_;
  _v5_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v5(::CardProto* _v5) {
  delete _v5_;
  _v5_ = _v5;
  if (_v5) {
    set_has__v5();
  } else {
    clear_has__v5();
  }
}

// optional .CardProto _v6 = 7;
inline bool _PackageSlotProto::has__v6() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void _PackageSlotProto::set_has__v6() {
  _has_bits_[0] |= 0x00000040u;
}
inline void _PackageSlotProto::clear_has__v6() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void _PackageSlotProto::clear__v6() {
  if (_v6_ != NULL) _v6_->::CardProto::Clear();
  clear_has__v6();
}
inline const ::CardProto& _PackageSlotProto::_v6() const {
  return _v6_ != NULL ? *_v6_ : *default_instance_->_v6_;
}
inline ::CardProto* _PackageSlotProto::mutable__v6() {
  set_has__v6();
  if (_v6_ == NULL) _v6_ = new ::CardProto;
  return _v6_;
}
inline ::CardProto* _PackageSlotProto::release__v6() {
  clear_has__v6();
  ::CardProto* temp = _v6_;
  _v6_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v6(::CardProto* _v6) {
  delete _v6_;
  _v6_ = _v6;
  if (_v6) {
    set_has__v6();
  } else {
    clear_has__v6();
  }
}

// optional .CardProto _v7 = 8;
inline bool _PackageSlotProto::has__v7() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void _PackageSlotProto::set_has__v7() {
  _has_bits_[0] |= 0x00000080u;
}
inline void _PackageSlotProto::clear_has__v7() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void _PackageSlotProto::clear__v7() {
  if (_v7_ != NULL) _v7_->::CardProto::Clear();
  clear_has__v7();
}
inline const ::CardProto& _PackageSlotProto::_v7() const {
  return _v7_ != NULL ? *_v7_ : *default_instance_->_v7_;
}
inline ::CardProto* _PackageSlotProto::mutable__v7() {
  set_has__v7();
  if (_v7_ == NULL) _v7_ = new ::CardProto;
  return _v7_;
}
inline ::CardProto* _PackageSlotProto::release__v7() {
  clear_has__v7();
  ::CardProto* temp = _v7_;
  _v7_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v7(::CardProto* _v7) {
  delete _v7_;
  _v7_ = _v7;
  if (_v7) {
    set_has__v7();
  } else {
    clear_has__v7();
  }
}

// optional .CardProto _v8 = 9;
inline bool _PackageSlotProto::has__v8() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void _PackageSlotProto::set_has__v8() {
  _has_bits_[0] |= 0x00000100u;
}
inline void _PackageSlotProto::clear_has__v8() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void _PackageSlotProto::clear__v8() {
  if (_v8_ != NULL) _v8_->::CardProto::Clear();
  clear_has__v8();
}
inline const ::CardProto& _PackageSlotProto::_v8() const {
  return _v8_ != NULL ? *_v8_ : *default_instance_->_v8_;
}
inline ::CardProto* _PackageSlotProto::mutable__v8() {
  set_has__v8();
  if (_v8_ == NULL) _v8_ = new ::CardProto;
  return _v8_;
}
inline ::CardProto* _PackageSlotProto::release__v8() {
  clear_has__v8();
  ::CardProto* temp = _v8_;
  _v8_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v8(::CardProto* _v8) {
  delete _v8_;
  _v8_ = _v8;
  if (_v8) {
    set_has__v8();
  } else {
    clear_has__v8();
  }
}

// optional .CardProto _v9 = 10;
inline bool _PackageSlotProto::has__v9() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void _PackageSlotProto::set_has__v9() {
  _has_bits_[0] |= 0x00000200u;
}
inline void _PackageSlotProto::clear_has__v9() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void _PackageSlotProto::clear__v9() {
  if (_v9_ != NULL) _v9_->::CardProto::Clear();
  clear_has__v9();
}
inline const ::CardProto& _PackageSlotProto::_v9() const {
  return _v9_ != NULL ? *_v9_ : *default_instance_->_v9_;
}
inline ::CardProto* _PackageSlotProto::mutable__v9() {
  set_has__v9();
  if (_v9_ == NULL) _v9_ = new ::CardProto;
  return _v9_;
}
inline ::CardProto* _PackageSlotProto::release__v9() {
  clear_has__v9();
  ::CardProto* temp = _v9_;
  _v9_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v9(::CardProto* _v9) {
  delete _v9_;
  _v9_ = _v9;
  if (_v9) {
    set_has__v9();
  } else {
    clear_has__v9();
  }
}

// optional .CardProto _v10 = 11;
inline bool _PackageSlotProto::has__v10() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void _PackageSlotProto::set_has__v10() {
  _has_bits_[0] |= 0x00000400u;
}
inline void _PackageSlotProto::clear_has__v10() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void _PackageSlotProto::clear__v10() {
  if (_v10_ != NULL) _v10_->::CardProto::Clear();
  clear_has__v10();
}
inline const ::CardProto& _PackageSlotProto::_v10() const {
  return _v10_ != NULL ? *_v10_ : *default_instance_->_v10_;
}
inline ::CardProto* _PackageSlotProto::mutable__v10() {
  set_has__v10();
  if (_v10_ == NULL) _v10_ = new ::CardProto;
  return _v10_;
}
inline ::CardProto* _PackageSlotProto::release__v10() {
  clear_has__v10();
  ::CardProto* temp = _v10_;
  _v10_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v10(::CardProto* _v10) {
  delete _v10_;
  _v10_ = _v10;
  if (_v10) {
    set_has__v10();
  } else {
    clear_has__v10();
  }
}

// optional .CardProto _v11 = 12;
inline bool _PackageSlotProto::has__v11() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void _PackageSlotProto::set_has__v11() {
  _has_bits_[0] |= 0x00000800u;
}
inline void _PackageSlotProto::clear_has__v11() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void _PackageSlotProto::clear__v11() {
  if (_v11_ != NULL) _v11_->::CardProto::Clear();
  clear_has__v11();
}
inline const ::CardProto& _PackageSlotProto::_v11() const {
  return _v11_ != NULL ? *_v11_ : *default_instance_->_v11_;
}
inline ::CardProto* _PackageSlotProto::mutable__v11() {
  set_has__v11();
  if (_v11_ == NULL) _v11_ = new ::CardProto;
  return _v11_;
}
inline ::CardProto* _PackageSlotProto::release__v11() {
  clear_has__v11();
  ::CardProto* temp = _v11_;
  _v11_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v11(::CardProto* _v11) {
  delete _v11_;
  _v11_ = _v11;
  if (_v11) {
    set_has__v11();
  } else {
    clear_has__v11();
  }
}

// optional .CardProto _v12 = 13;
inline bool _PackageSlotProto::has__v12() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void _PackageSlotProto::set_has__v12() {
  _has_bits_[0] |= 0x00001000u;
}
inline void _PackageSlotProto::clear_has__v12() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void _PackageSlotProto::clear__v12() {
  if (_v12_ != NULL) _v12_->::CardProto::Clear();
  clear_has__v12();
}
inline const ::CardProto& _PackageSlotProto::_v12() const {
  return _v12_ != NULL ? *_v12_ : *default_instance_->_v12_;
}
inline ::CardProto* _PackageSlotProto::mutable__v12() {
  set_has__v12();
  if (_v12_ == NULL) _v12_ = new ::CardProto;
  return _v12_;
}
inline ::CardProto* _PackageSlotProto::release__v12() {
  clear_has__v12();
  ::CardProto* temp = _v12_;
  _v12_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v12(::CardProto* _v12) {
  delete _v12_;
  _v12_ = _v12;
  if (_v12) {
    set_has__v12();
  } else {
    clear_has__v12();
  }
}

// optional .CardProto _v13 = 14;
inline bool _PackageSlotProto::has__v13() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void _PackageSlotProto::set_has__v13() {
  _has_bits_[0] |= 0x00002000u;
}
inline void _PackageSlotProto::clear_has__v13() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void _PackageSlotProto::clear__v13() {
  if (_v13_ != NULL) _v13_->::CardProto::Clear();
  clear_has__v13();
}
inline const ::CardProto& _PackageSlotProto::_v13() const {
  return _v13_ != NULL ? *_v13_ : *default_instance_->_v13_;
}
inline ::CardProto* _PackageSlotProto::mutable__v13() {
  set_has__v13();
  if (_v13_ == NULL) _v13_ = new ::CardProto;
  return _v13_;
}
inline ::CardProto* _PackageSlotProto::release__v13() {
  clear_has__v13();
  ::CardProto* temp = _v13_;
  _v13_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v13(::CardProto* _v13) {
  delete _v13_;
  _v13_ = _v13;
  if (_v13) {
    set_has__v13();
  } else {
    clear_has__v13();
  }
}

// optional .CardProto _v14 = 15;
inline bool _PackageSlotProto::has__v14() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void _PackageSlotProto::set_has__v14() {
  _has_bits_[0] |= 0x00004000u;
}
inline void _PackageSlotProto::clear_has__v14() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void _PackageSlotProto::clear__v14() {
  if (_v14_ != NULL) _v14_->::CardProto::Clear();
  clear_has__v14();
}
inline const ::CardProto& _PackageSlotProto::_v14() const {
  return _v14_ != NULL ? *_v14_ : *default_instance_->_v14_;
}
inline ::CardProto* _PackageSlotProto::mutable__v14() {
  set_has__v14();
  if (_v14_ == NULL) _v14_ = new ::CardProto;
  return _v14_;
}
inline ::CardProto* _PackageSlotProto::release__v14() {
  clear_has__v14();
  ::CardProto* temp = _v14_;
  _v14_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v14(::CardProto* _v14) {
  delete _v14_;
  _v14_ = _v14;
  if (_v14) {
    set_has__v14();
  } else {
    clear_has__v14();
  }
}

// optional .CardProto _v15 = 16;
inline bool _PackageSlotProto::has__v15() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void _PackageSlotProto::set_has__v15() {
  _has_bits_[0] |= 0x00008000u;
}
inline void _PackageSlotProto::clear_has__v15() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void _PackageSlotProto::clear__v15() {
  if (_v15_ != NULL) _v15_->::CardProto::Clear();
  clear_has__v15();
}
inline const ::CardProto& _PackageSlotProto::_v15() const {
  return _v15_ != NULL ? *_v15_ : *default_instance_->_v15_;
}
inline ::CardProto* _PackageSlotProto::mutable__v15() {
  set_has__v15();
  if (_v15_ == NULL) _v15_ = new ::CardProto;
  return _v15_;
}
inline ::CardProto* _PackageSlotProto::release__v15() {
  clear_has__v15();
  ::CardProto* temp = _v15_;
  _v15_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v15(::CardProto* _v15) {
  delete _v15_;
  _v15_ = _v15;
  if (_v15) {
    set_has__v15();
  } else {
    clear_has__v15();
  }
}

// optional .CardProto _v16 = 17;
inline bool _PackageSlotProto::has__v16() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void _PackageSlotProto::set_has__v16() {
  _has_bits_[0] |= 0x00010000u;
}
inline void _PackageSlotProto::clear_has__v16() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void _PackageSlotProto::clear__v16() {
  if (_v16_ != NULL) _v16_->::CardProto::Clear();
  clear_has__v16();
}
inline const ::CardProto& _PackageSlotProto::_v16() const {
  return _v16_ != NULL ? *_v16_ : *default_instance_->_v16_;
}
inline ::CardProto* _PackageSlotProto::mutable__v16() {
  set_has__v16();
  if (_v16_ == NULL) _v16_ = new ::CardProto;
  return _v16_;
}
inline ::CardProto* _PackageSlotProto::release__v16() {
  clear_has__v16();
  ::CardProto* temp = _v16_;
  _v16_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v16(::CardProto* _v16) {
  delete _v16_;
  _v16_ = _v16;
  if (_v16) {
    set_has__v16();
  } else {
    clear_has__v16();
  }
}

// optional .CardProto _v17 = 18;
inline bool _PackageSlotProto::has__v17() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void _PackageSlotProto::set_has__v17() {
  _has_bits_[0] |= 0x00020000u;
}
inline void _PackageSlotProto::clear_has__v17() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void _PackageSlotProto::clear__v17() {
  if (_v17_ != NULL) _v17_->::CardProto::Clear();
  clear_has__v17();
}
inline const ::CardProto& _PackageSlotProto::_v17() const {
  return _v17_ != NULL ? *_v17_ : *default_instance_->_v17_;
}
inline ::CardProto* _PackageSlotProto::mutable__v17() {
  set_has__v17();
  if (_v17_ == NULL) _v17_ = new ::CardProto;
  return _v17_;
}
inline ::CardProto* _PackageSlotProto::release__v17() {
  clear_has__v17();
  ::CardProto* temp = _v17_;
  _v17_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v17(::CardProto* _v17) {
  delete _v17_;
  _v17_ = _v17;
  if (_v17) {
    set_has__v17();
  } else {
    clear_has__v17();
  }
}

// optional .CardProto _v18 = 19;
inline bool _PackageSlotProto::has__v18() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void _PackageSlotProto::set_has__v18() {
  _has_bits_[0] |= 0x00040000u;
}
inline void _PackageSlotProto::clear_has__v18() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void _PackageSlotProto::clear__v18() {
  if (_v18_ != NULL) _v18_->::CardProto::Clear();
  clear_has__v18();
}
inline const ::CardProto& _PackageSlotProto::_v18() const {
  return _v18_ != NULL ? *_v18_ : *default_instance_->_v18_;
}
inline ::CardProto* _PackageSlotProto::mutable__v18() {
  set_has__v18();
  if (_v18_ == NULL) _v18_ = new ::CardProto;
  return _v18_;
}
inline ::CardProto* _PackageSlotProto::release__v18() {
  clear_has__v18();
  ::CardProto* temp = _v18_;
  _v18_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v18(::CardProto* _v18) {
  delete _v18_;
  _v18_ = _v18;
  if (_v18) {
    set_has__v18();
  } else {
    clear_has__v18();
  }
}

// optional .CardProto _v19 = 20;
inline bool _PackageSlotProto::has__v19() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void _PackageSlotProto::set_has__v19() {
  _has_bits_[0] |= 0x00080000u;
}
inline void _PackageSlotProto::clear_has__v19() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void _PackageSlotProto::clear__v19() {
  if (_v19_ != NULL) _v19_->::CardProto::Clear();
  clear_has__v19();
}
inline const ::CardProto& _PackageSlotProto::_v19() const {
  return _v19_ != NULL ? *_v19_ : *default_instance_->_v19_;
}
inline ::CardProto* _PackageSlotProto::mutable__v19() {
  set_has__v19();
  if (_v19_ == NULL) _v19_ = new ::CardProto;
  return _v19_;
}
inline ::CardProto* _PackageSlotProto::release__v19() {
  clear_has__v19();
  ::CardProto* temp = _v19_;
  _v19_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v19(::CardProto* _v19) {
  delete _v19_;
  _v19_ = _v19;
  if (_v19) {
    set_has__v19();
  } else {
    clear_has__v19();
  }
}

// optional .CardProto _v20 = 21;
inline bool _PackageSlotProto::has__v20() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void _PackageSlotProto::set_has__v20() {
  _has_bits_[0] |= 0x00100000u;
}
inline void _PackageSlotProto::clear_has__v20() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void _PackageSlotProto::clear__v20() {
  if (_v20_ != NULL) _v20_->::CardProto::Clear();
  clear_has__v20();
}
inline const ::CardProto& _PackageSlotProto::_v20() const {
  return _v20_ != NULL ? *_v20_ : *default_instance_->_v20_;
}
inline ::CardProto* _PackageSlotProto::mutable__v20() {
  set_has__v20();
  if (_v20_ == NULL) _v20_ = new ::CardProto;
  return _v20_;
}
inline ::CardProto* _PackageSlotProto::release__v20() {
  clear_has__v20();
  ::CardProto* temp = _v20_;
  _v20_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v20(::CardProto* _v20) {
  delete _v20_;
  _v20_ = _v20;
  if (_v20) {
    set_has__v20();
  } else {
    clear_has__v20();
  }
}

// optional .CardProto _v21 = 22;
inline bool _PackageSlotProto::has__v21() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void _PackageSlotProto::set_has__v21() {
  _has_bits_[0] |= 0x00200000u;
}
inline void _PackageSlotProto::clear_has__v21() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void _PackageSlotProto::clear__v21() {
  if (_v21_ != NULL) _v21_->::CardProto::Clear();
  clear_has__v21();
}
inline const ::CardProto& _PackageSlotProto::_v21() const {
  return _v21_ != NULL ? *_v21_ : *default_instance_->_v21_;
}
inline ::CardProto* _PackageSlotProto::mutable__v21() {
  set_has__v21();
  if (_v21_ == NULL) _v21_ = new ::CardProto;
  return _v21_;
}
inline ::CardProto* _PackageSlotProto::release__v21() {
  clear_has__v21();
  ::CardProto* temp = _v21_;
  _v21_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v21(::CardProto* _v21) {
  delete _v21_;
  _v21_ = _v21;
  if (_v21) {
    set_has__v21();
  } else {
    clear_has__v21();
  }
}

// optional .CardProto _v22 = 23;
inline bool _PackageSlotProto::has__v22() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void _PackageSlotProto::set_has__v22() {
  _has_bits_[0] |= 0x00400000u;
}
inline void _PackageSlotProto::clear_has__v22() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void _PackageSlotProto::clear__v22() {
  if (_v22_ != NULL) _v22_->::CardProto::Clear();
  clear_has__v22();
}
inline const ::CardProto& _PackageSlotProto::_v22() const {
  return _v22_ != NULL ? *_v22_ : *default_instance_->_v22_;
}
inline ::CardProto* _PackageSlotProto::mutable__v22() {
  set_has__v22();
  if (_v22_ == NULL) _v22_ = new ::CardProto;
  return _v22_;
}
inline ::CardProto* _PackageSlotProto::release__v22() {
  clear_has__v22();
  ::CardProto* temp = _v22_;
  _v22_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v22(::CardProto* _v22) {
  delete _v22_;
  _v22_ = _v22;
  if (_v22) {
    set_has__v22();
  } else {
    clear_has__v22();
  }
}

// optional .CardProto _v23 = 24;
inline bool _PackageSlotProto::has__v23() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void _PackageSlotProto::set_has__v23() {
  _has_bits_[0] |= 0x00800000u;
}
inline void _PackageSlotProto::clear_has__v23() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void _PackageSlotProto::clear__v23() {
  if (_v23_ != NULL) _v23_->::CardProto::Clear();
  clear_has__v23();
}
inline const ::CardProto& _PackageSlotProto::_v23() const {
  return _v23_ != NULL ? *_v23_ : *default_instance_->_v23_;
}
inline ::CardProto* _PackageSlotProto::mutable__v23() {
  set_has__v23();
  if (_v23_ == NULL) _v23_ = new ::CardProto;
  return _v23_;
}
inline ::CardProto* _PackageSlotProto::release__v23() {
  clear_has__v23();
  ::CardProto* temp = _v23_;
  _v23_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v23(::CardProto* _v23) {
  delete _v23_;
  _v23_ = _v23;
  if (_v23) {
    set_has__v23();
  } else {
    clear_has__v23();
  }
}

// optional .CardProto _v24 = 25;
inline bool _PackageSlotProto::has__v24() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void _PackageSlotProto::set_has__v24() {
  _has_bits_[0] |= 0x01000000u;
}
inline void _PackageSlotProto::clear_has__v24() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void _PackageSlotProto::clear__v24() {
  if (_v24_ != NULL) _v24_->::CardProto::Clear();
  clear_has__v24();
}
inline const ::CardProto& _PackageSlotProto::_v24() const {
  return _v24_ != NULL ? *_v24_ : *default_instance_->_v24_;
}
inline ::CardProto* _PackageSlotProto::mutable__v24() {
  set_has__v24();
  if (_v24_ == NULL) _v24_ = new ::CardProto;
  return _v24_;
}
inline ::CardProto* _PackageSlotProto::release__v24() {
  clear_has__v24();
  ::CardProto* temp = _v24_;
  _v24_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v24(::CardProto* _v24) {
  delete _v24_;
  _v24_ = _v24;
  if (_v24) {
    set_has__v24();
  } else {
    clear_has__v24();
  }
}

// optional .CardProto _v25 = 26;
inline bool _PackageSlotProto::has__v25() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void _PackageSlotProto::set_has__v25() {
  _has_bits_[0] |= 0x02000000u;
}
inline void _PackageSlotProto::clear_has__v25() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void _PackageSlotProto::clear__v25() {
  if (_v25_ != NULL) _v25_->::CardProto::Clear();
  clear_has__v25();
}
inline const ::CardProto& _PackageSlotProto::_v25() const {
  return _v25_ != NULL ? *_v25_ : *default_instance_->_v25_;
}
inline ::CardProto* _PackageSlotProto::mutable__v25() {
  set_has__v25();
  if (_v25_ == NULL) _v25_ = new ::CardProto;
  return _v25_;
}
inline ::CardProto* _PackageSlotProto::release__v25() {
  clear_has__v25();
  ::CardProto* temp = _v25_;
  _v25_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v25(::CardProto* _v25) {
  delete _v25_;
  _v25_ = _v25;
  if (_v25) {
    set_has__v25();
  } else {
    clear_has__v25();
  }
}

// optional .CardProto _v26 = 27;
inline bool _PackageSlotProto::has__v26() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void _PackageSlotProto::set_has__v26() {
  _has_bits_[0] |= 0x04000000u;
}
inline void _PackageSlotProto::clear_has__v26() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void _PackageSlotProto::clear__v26() {
  if (_v26_ != NULL) _v26_->::CardProto::Clear();
  clear_has__v26();
}
inline const ::CardProto& _PackageSlotProto::_v26() const {
  return _v26_ != NULL ? *_v26_ : *default_instance_->_v26_;
}
inline ::CardProto* _PackageSlotProto::mutable__v26() {
  set_has__v26();
  if (_v26_ == NULL) _v26_ = new ::CardProto;
  return _v26_;
}
inline ::CardProto* _PackageSlotProto::release__v26() {
  clear_has__v26();
  ::CardProto* temp = _v26_;
  _v26_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v26(::CardProto* _v26) {
  delete _v26_;
  _v26_ = _v26;
  if (_v26) {
    set_has__v26();
  } else {
    clear_has__v26();
  }
}

// optional .CardProto _v27 = 28;
inline bool _PackageSlotProto::has__v27() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void _PackageSlotProto::set_has__v27() {
  _has_bits_[0] |= 0x08000000u;
}
inline void _PackageSlotProto::clear_has__v27() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void _PackageSlotProto::clear__v27() {
  if (_v27_ != NULL) _v27_->::CardProto::Clear();
  clear_has__v27();
}
inline const ::CardProto& _PackageSlotProto::_v27() const {
  return _v27_ != NULL ? *_v27_ : *default_instance_->_v27_;
}
inline ::CardProto* _PackageSlotProto::mutable__v27() {
  set_has__v27();
  if (_v27_ == NULL) _v27_ = new ::CardProto;
  return _v27_;
}
inline ::CardProto* _PackageSlotProto::release__v27() {
  clear_has__v27();
  ::CardProto* temp = _v27_;
  _v27_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v27(::CardProto* _v27) {
  delete _v27_;
  _v27_ = _v27;
  if (_v27) {
    set_has__v27();
  } else {
    clear_has__v27();
  }
}

// optional .CardProto _v28 = 29;
inline bool _PackageSlotProto::has__v28() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void _PackageSlotProto::set_has__v28() {
  _has_bits_[0] |= 0x10000000u;
}
inline void _PackageSlotProto::clear_has__v28() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void _PackageSlotProto::clear__v28() {
  if (_v28_ != NULL) _v28_->::CardProto::Clear();
  clear_has__v28();
}
inline const ::CardProto& _PackageSlotProto::_v28() const {
  return _v28_ != NULL ? *_v28_ : *default_instance_->_v28_;
}
inline ::CardProto* _PackageSlotProto::mutable__v28() {
  set_has__v28();
  if (_v28_ == NULL) _v28_ = new ::CardProto;
  return _v28_;
}
inline ::CardProto* _PackageSlotProto::release__v28() {
  clear_has__v28();
  ::CardProto* temp = _v28_;
  _v28_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v28(::CardProto* _v28) {
  delete _v28_;
  _v28_ = _v28;
  if (_v28) {
    set_has__v28();
  } else {
    clear_has__v28();
  }
}

// optional .CardProto _v29 = 30;
inline bool _PackageSlotProto::has__v29() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void _PackageSlotProto::set_has__v29() {
  _has_bits_[0] |= 0x20000000u;
}
inline void _PackageSlotProto::clear_has__v29() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void _PackageSlotProto::clear__v29() {
  if (_v29_ != NULL) _v29_->::CardProto::Clear();
  clear_has__v29();
}
inline const ::CardProto& _PackageSlotProto::_v29() const {
  return _v29_ != NULL ? *_v29_ : *default_instance_->_v29_;
}
inline ::CardProto* _PackageSlotProto::mutable__v29() {
  set_has__v29();
  if (_v29_ == NULL) _v29_ = new ::CardProto;
  return _v29_;
}
inline ::CardProto* _PackageSlotProto::release__v29() {
  clear_has__v29();
  ::CardProto* temp = _v29_;
  _v29_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v29(::CardProto* _v29) {
  delete _v29_;
  _v29_ = _v29;
  if (_v29) {
    set_has__v29();
  } else {
    clear_has__v29();
  }
}

// optional .CardProto _v30 = 31;
inline bool _PackageSlotProto::has__v30() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void _PackageSlotProto::set_has__v30() {
  _has_bits_[0] |= 0x40000000u;
}
inline void _PackageSlotProto::clear_has__v30() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void _PackageSlotProto::clear__v30() {
  if (_v30_ != NULL) _v30_->::CardProto::Clear();
  clear_has__v30();
}
inline const ::CardProto& _PackageSlotProto::_v30() const {
  return _v30_ != NULL ? *_v30_ : *default_instance_->_v30_;
}
inline ::CardProto* _PackageSlotProto::mutable__v30() {
  set_has__v30();
  if (_v30_ == NULL) _v30_ = new ::CardProto;
  return _v30_;
}
inline ::CardProto* _PackageSlotProto::release__v30() {
  clear_has__v30();
  ::CardProto* temp = _v30_;
  _v30_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v30(::CardProto* _v30) {
  delete _v30_;
  _v30_ = _v30;
  if (_v30) {
    set_has__v30();
  } else {
    clear_has__v30();
  }
}

// optional .CardProto _v31 = 32;
inline bool _PackageSlotProto::has__v31() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void _PackageSlotProto::set_has__v31() {
  _has_bits_[0] |= 0x80000000u;
}
inline void _PackageSlotProto::clear_has__v31() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void _PackageSlotProto::clear__v31() {
  if (_v31_ != NULL) _v31_->::CardProto::Clear();
  clear_has__v31();
}
inline const ::CardProto& _PackageSlotProto::_v31() const {
  return _v31_ != NULL ? *_v31_ : *default_instance_->_v31_;
}
inline ::CardProto* _PackageSlotProto::mutable__v31() {
  set_has__v31();
  if (_v31_ == NULL) _v31_ = new ::CardProto;
  return _v31_;
}
inline ::CardProto* _PackageSlotProto::release__v31() {
  clear_has__v31();
  ::CardProto* temp = _v31_;
  _v31_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v31(::CardProto* _v31) {
  delete _v31_;
  _v31_ = _v31;
  if (_v31) {
    set_has__v31();
  } else {
    clear_has__v31();
  }
}

// optional .CardProto _v32 = 33;
inline bool _PackageSlotProto::has__v32() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void _PackageSlotProto::set_has__v32() {
  _has_bits_[1] |= 0x00000001u;
}
inline void _PackageSlotProto::clear_has__v32() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void _PackageSlotProto::clear__v32() {
  if (_v32_ != NULL) _v32_->::CardProto::Clear();
  clear_has__v32();
}
inline const ::CardProto& _PackageSlotProto::_v32() const {
  return _v32_ != NULL ? *_v32_ : *default_instance_->_v32_;
}
inline ::CardProto* _PackageSlotProto::mutable__v32() {
  set_has__v32();
  if (_v32_ == NULL) _v32_ = new ::CardProto;
  return _v32_;
}
inline ::CardProto* _PackageSlotProto::release__v32() {
  clear_has__v32();
  ::CardProto* temp = _v32_;
  _v32_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v32(::CardProto* _v32) {
  delete _v32_;
  _v32_ = _v32;
  if (_v32) {
    set_has__v32();
  } else {
    clear_has__v32();
  }
}

// optional .CardProto _v33 = 34;
inline bool _PackageSlotProto::has__v33() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void _PackageSlotProto::set_has__v33() {
  _has_bits_[1] |= 0x00000002u;
}
inline void _PackageSlotProto::clear_has__v33() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void _PackageSlotProto::clear__v33() {
  if (_v33_ != NULL) _v33_->::CardProto::Clear();
  clear_has__v33();
}
inline const ::CardProto& _PackageSlotProto::_v33() const {
  return _v33_ != NULL ? *_v33_ : *default_instance_->_v33_;
}
inline ::CardProto* _PackageSlotProto::mutable__v33() {
  set_has__v33();
  if (_v33_ == NULL) _v33_ = new ::CardProto;
  return _v33_;
}
inline ::CardProto* _PackageSlotProto::release__v33() {
  clear_has__v33();
  ::CardProto* temp = _v33_;
  _v33_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v33(::CardProto* _v33) {
  delete _v33_;
  _v33_ = _v33;
  if (_v33) {
    set_has__v33();
  } else {
    clear_has__v33();
  }
}

// optional .CardProto _v34 = 35;
inline bool _PackageSlotProto::has__v34() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void _PackageSlotProto::set_has__v34() {
  _has_bits_[1] |= 0x00000004u;
}
inline void _PackageSlotProto::clear_has__v34() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void _PackageSlotProto::clear__v34() {
  if (_v34_ != NULL) _v34_->::CardProto::Clear();
  clear_has__v34();
}
inline const ::CardProto& _PackageSlotProto::_v34() const {
  return _v34_ != NULL ? *_v34_ : *default_instance_->_v34_;
}
inline ::CardProto* _PackageSlotProto::mutable__v34() {
  set_has__v34();
  if (_v34_ == NULL) _v34_ = new ::CardProto;
  return _v34_;
}
inline ::CardProto* _PackageSlotProto::release__v34() {
  clear_has__v34();
  ::CardProto* temp = _v34_;
  _v34_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v34(::CardProto* _v34) {
  delete _v34_;
  _v34_ = _v34;
  if (_v34) {
    set_has__v34();
  } else {
    clear_has__v34();
  }
}

// optional .CardProto _v35 = 36;
inline bool _PackageSlotProto::has__v35() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void _PackageSlotProto::set_has__v35() {
  _has_bits_[1] |= 0x00000008u;
}
inline void _PackageSlotProto::clear_has__v35() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void _PackageSlotProto::clear__v35() {
  if (_v35_ != NULL) _v35_->::CardProto::Clear();
  clear_has__v35();
}
inline const ::CardProto& _PackageSlotProto::_v35() const {
  return _v35_ != NULL ? *_v35_ : *default_instance_->_v35_;
}
inline ::CardProto* _PackageSlotProto::mutable__v35() {
  set_has__v35();
  if (_v35_ == NULL) _v35_ = new ::CardProto;
  return _v35_;
}
inline ::CardProto* _PackageSlotProto::release__v35() {
  clear_has__v35();
  ::CardProto* temp = _v35_;
  _v35_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v35(::CardProto* _v35) {
  delete _v35_;
  _v35_ = _v35;
  if (_v35) {
    set_has__v35();
  } else {
    clear_has__v35();
  }
}

// optional .CardProto _v36 = 37;
inline bool _PackageSlotProto::has__v36() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void _PackageSlotProto::set_has__v36() {
  _has_bits_[1] |= 0x00000010u;
}
inline void _PackageSlotProto::clear_has__v36() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void _PackageSlotProto::clear__v36() {
  if (_v36_ != NULL) _v36_->::CardProto::Clear();
  clear_has__v36();
}
inline const ::CardProto& _PackageSlotProto::_v36() const {
  return _v36_ != NULL ? *_v36_ : *default_instance_->_v36_;
}
inline ::CardProto* _PackageSlotProto::mutable__v36() {
  set_has__v36();
  if (_v36_ == NULL) _v36_ = new ::CardProto;
  return _v36_;
}
inline ::CardProto* _PackageSlotProto::release__v36() {
  clear_has__v36();
  ::CardProto* temp = _v36_;
  _v36_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v36(::CardProto* _v36) {
  delete _v36_;
  _v36_ = _v36;
  if (_v36) {
    set_has__v36();
  } else {
    clear_has__v36();
  }
}

// optional .CardProto _v37 = 38;
inline bool _PackageSlotProto::has__v37() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void _PackageSlotProto::set_has__v37() {
  _has_bits_[1] |= 0x00000020u;
}
inline void _PackageSlotProto::clear_has__v37() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void _PackageSlotProto::clear__v37() {
  if (_v37_ != NULL) _v37_->::CardProto::Clear();
  clear_has__v37();
}
inline const ::CardProto& _PackageSlotProto::_v37() const {
  return _v37_ != NULL ? *_v37_ : *default_instance_->_v37_;
}
inline ::CardProto* _PackageSlotProto::mutable__v37() {
  set_has__v37();
  if (_v37_ == NULL) _v37_ = new ::CardProto;
  return _v37_;
}
inline ::CardProto* _PackageSlotProto::release__v37() {
  clear_has__v37();
  ::CardProto* temp = _v37_;
  _v37_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v37(::CardProto* _v37) {
  delete _v37_;
  _v37_ = _v37;
  if (_v37) {
    set_has__v37();
  } else {
    clear_has__v37();
  }
}

// optional .CardProto _v38 = 39;
inline bool _PackageSlotProto::has__v38() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void _PackageSlotProto::set_has__v38() {
  _has_bits_[1] |= 0x00000040u;
}
inline void _PackageSlotProto::clear_has__v38() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void _PackageSlotProto::clear__v38() {
  if (_v38_ != NULL) _v38_->::CardProto::Clear();
  clear_has__v38();
}
inline const ::CardProto& _PackageSlotProto::_v38() const {
  return _v38_ != NULL ? *_v38_ : *default_instance_->_v38_;
}
inline ::CardProto* _PackageSlotProto::mutable__v38() {
  set_has__v38();
  if (_v38_ == NULL) _v38_ = new ::CardProto;
  return _v38_;
}
inline ::CardProto* _PackageSlotProto::release__v38() {
  clear_has__v38();
  ::CardProto* temp = _v38_;
  _v38_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v38(::CardProto* _v38) {
  delete _v38_;
  _v38_ = _v38;
  if (_v38) {
    set_has__v38();
  } else {
    clear_has__v38();
  }
}

// optional .CardProto _v39 = 40;
inline bool _PackageSlotProto::has__v39() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void _PackageSlotProto::set_has__v39() {
  _has_bits_[1] |= 0x00000080u;
}
inline void _PackageSlotProto::clear_has__v39() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void _PackageSlotProto::clear__v39() {
  if (_v39_ != NULL) _v39_->::CardProto::Clear();
  clear_has__v39();
}
inline const ::CardProto& _PackageSlotProto::_v39() const {
  return _v39_ != NULL ? *_v39_ : *default_instance_->_v39_;
}
inline ::CardProto* _PackageSlotProto::mutable__v39() {
  set_has__v39();
  if (_v39_ == NULL) _v39_ = new ::CardProto;
  return _v39_;
}
inline ::CardProto* _PackageSlotProto::release__v39() {
  clear_has__v39();
  ::CardProto* temp = _v39_;
  _v39_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v39(::CardProto* _v39) {
  delete _v39_;
  _v39_ = _v39;
  if (_v39) {
    set_has__v39();
  } else {
    clear_has__v39();
  }
}

// optional .CardProto _v40 = 41;
inline bool _PackageSlotProto::has__v40() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void _PackageSlotProto::set_has__v40() {
  _has_bits_[1] |= 0x00000100u;
}
inline void _PackageSlotProto::clear_has__v40() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void _PackageSlotProto::clear__v40() {
  if (_v40_ != NULL) _v40_->::CardProto::Clear();
  clear_has__v40();
}
inline const ::CardProto& _PackageSlotProto::_v40() const {
  return _v40_ != NULL ? *_v40_ : *default_instance_->_v40_;
}
inline ::CardProto* _PackageSlotProto::mutable__v40() {
  set_has__v40();
  if (_v40_ == NULL) _v40_ = new ::CardProto;
  return _v40_;
}
inline ::CardProto* _PackageSlotProto::release__v40() {
  clear_has__v40();
  ::CardProto* temp = _v40_;
  _v40_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v40(::CardProto* _v40) {
  delete _v40_;
  _v40_ = _v40;
  if (_v40) {
    set_has__v40();
  } else {
    clear_has__v40();
  }
}

// optional .CardProto _v41 = 42;
inline bool _PackageSlotProto::has__v41() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void _PackageSlotProto::set_has__v41() {
  _has_bits_[1] |= 0x00000200u;
}
inline void _PackageSlotProto::clear_has__v41() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void _PackageSlotProto::clear__v41() {
  if (_v41_ != NULL) _v41_->::CardProto::Clear();
  clear_has__v41();
}
inline const ::CardProto& _PackageSlotProto::_v41() const {
  return _v41_ != NULL ? *_v41_ : *default_instance_->_v41_;
}
inline ::CardProto* _PackageSlotProto::mutable__v41() {
  set_has__v41();
  if (_v41_ == NULL) _v41_ = new ::CardProto;
  return _v41_;
}
inline ::CardProto* _PackageSlotProto::release__v41() {
  clear_has__v41();
  ::CardProto* temp = _v41_;
  _v41_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v41(::CardProto* _v41) {
  delete _v41_;
  _v41_ = _v41;
  if (_v41) {
    set_has__v41();
  } else {
    clear_has__v41();
  }
}

// optional .CardProto _v42 = 43;
inline bool _PackageSlotProto::has__v42() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void _PackageSlotProto::set_has__v42() {
  _has_bits_[1] |= 0x00000400u;
}
inline void _PackageSlotProto::clear_has__v42() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void _PackageSlotProto::clear__v42() {
  if (_v42_ != NULL) _v42_->::CardProto::Clear();
  clear_has__v42();
}
inline const ::CardProto& _PackageSlotProto::_v42() const {
  return _v42_ != NULL ? *_v42_ : *default_instance_->_v42_;
}
inline ::CardProto* _PackageSlotProto::mutable__v42() {
  set_has__v42();
  if (_v42_ == NULL) _v42_ = new ::CardProto;
  return _v42_;
}
inline ::CardProto* _PackageSlotProto::release__v42() {
  clear_has__v42();
  ::CardProto* temp = _v42_;
  _v42_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v42(::CardProto* _v42) {
  delete _v42_;
  _v42_ = _v42;
  if (_v42) {
    set_has__v42();
  } else {
    clear_has__v42();
  }
}

// optional .CardProto _v43 = 44;
inline bool _PackageSlotProto::has__v43() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void _PackageSlotProto::set_has__v43() {
  _has_bits_[1] |= 0x00000800u;
}
inline void _PackageSlotProto::clear_has__v43() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void _PackageSlotProto::clear__v43() {
  if (_v43_ != NULL) _v43_->::CardProto::Clear();
  clear_has__v43();
}
inline const ::CardProto& _PackageSlotProto::_v43() const {
  return _v43_ != NULL ? *_v43_ : *default_instance_->_v43_;
}
inline ::CardProto* _PackageSlotProto::mutable__v43() {
  set_has__v43();
  if (_v43_ == NULL) _v43_ = new ::CardProto;
  return _v43_;
}
inline ::CardProto* _PackageSlotProto::release__v43() {
  clear_has__v43();
  ::CardProto* temp = _v43_;
  _v43_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v43(::CardProto* _v43) {
  delete _v43_;
  _v43_ = _v43;
  if (_v43) {
    set_has__v43();
  } else {
    clear_has__v43();
  }
}

// optional .CardProto _v44 = 45;
inline bool _PackageSlotProto::has__v44() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void _PackageSlotProto::set_has__v44() {
  _has_bits_[1] |= 0x00001000u;
}
inline void _PackageSlotProto::clear_has__v44() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void _PackageSlotProto::clear__v44() {
  if (_v44_ != NULL) _v44_->::CardProto::Clear();
  clear_has__v44();
}
inline const ::CardProto& _PackageSlotProto::_v44() const {
  return _v44_ != NULL ? *_v44_ : *default_instance_->_v44_;
}
inline ::CardProto* _PackageSlotProto::mutable__v44() {
  set_has__v44();
  if (_v44_ == NULL) _v44_ = new ::CardProto;
  return _v44_;
}
inline ::CardProto* _PackageSlotProto::release__v44() {
  clear_has__v44();
  ::CardProto* temp = _v44_;
  _v44_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v44(::CardProto* _v44) {
  delete _v44_;
  _v44_ = _v44;
  if (_v44) {
    set_has__v44();
  } else {
    clear_has__v44();
  }
}

// optional .CardProto _v45 = 46;
inline bool _PackageSlotProto::has__v45() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void _PackageSlotProto::set_has__v45() {
  _has_bits_[1] |= 0x00002000u;
}
inline void _PackageSlotProto::clear_has__v45() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void _PackageSlotProto::clear__v45() {
  if (_v45_ != NULL) _v45_->::CardProto::Clear();
  clear_has__v45();
}
inline const ::CardProto& _PackageSlotProto::_v45() const {
  return _v45_ != NULL ? *_v45_ : *default_instance_->_v45_;
}
inline ::CardProto* _PackageSlotProto::mutable__v45() {
  set_has__v45();
  if (_v45_ == NULL) _v45_ = new ::CardProto;
  return _v45_;
}
inline ::CardProto* _PackageSlotProto::release__v45() {
  clear_has__v45();
  ::CardProto* temp = _v45_;
  _v45_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v45(::CardProto* _v45) {
  delete _v45_;
  _v45_ = _v45;
  if (_v45) {
    set_has__v45();
  } else {
    clear_has__v45();
  }
}

// optional .CardProto _v46 = 47;
inline bool _PackageSlotProto::has__v46() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void _PackageSlotProto::set_has__v46() {
  _has_bits_[1] |= 0x00004000u;
}
inline void _PackageSlotProto::clear_has__v46() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void _PackageSlotProto::clear__v46() {
  if (_v46_ != NULL) _v46_->::CardProto::Clear();
  clear_has__v46();
}
inline const ::CardProto& _PackageSlotProto::_v46() const {
  return _v46_ != NULL ? *_v46_ : *default_instance_->_v46_;
}
inline ::CardProto* _PackageSlotProto::mutable__v46() {
  set_has__v46();
  if (_v46_ == NULL) _v46_ = new ::CardProto;
  return _v46_;
}
inline ::CardProto* _PackageSlotProto::release__v46() {
  clear_has__v46();
  ::CardProto* temp = _v46_;
  _v46_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v46(::CardProto* _v46) {
  delete _v46_;
  _v46_ = _v46;
  if (_v46) {
    set_has__v46();
  } else {
    clear_has__v46();
  }
}

// optional .CardProto _v47 = 48;
inline bool _PackageSlotProto::has__v47() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void _PackageSlotProto::set_has__v47() {
  _has_bits_[1] |= 0x00008000u;
}
inline void _PackageSlotProto::clear_has__v47() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void _PackageSlotProto::clear__v47() {
  if (_v47_ != NULL) _v47_->::CardProto::Clear();
  clear_has__v47();
}
inline const ::CardProto& _PackageSlotProto::_v47() const {
  return _v47_ != NULL ? *_v47_ : *default_instance_->_v47_;
}
inline ::CardProto* _PackageSlotProto::mutable__v47() {
  set_has__v47();
  if (_v47_ == NULL) _v47_ = new ::CardProto;
  return _v47_;
}
inline ::CardProto* _PackageSlotProto::release__v47() {
  clear_has__v47();
  ::CardProto* temp = _v47_;
  _v47_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v47(::CardProto* _v47) {
  delete _v47_;
  _v47_ = _v47;
  if (_v47) {
    set_has__v47();
  } else {
    clear_has__v47();
  }
}

// optional .CardProto _v48 = 49;
inline bool _PackageSlotProto::has__v48() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void _PackageSlotProto::set_has__v48() {
  _has_bits_[1] |= 0x00010000u;
}
inline void _PackageSlotProto::clear_has__v48() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void _PackageSlotProto::clear__v48() {
  if (_v48_ != NULL) _v48_->::CardProto::Clear();
  clear_has__v48();
}
inline const ::CardProto& _PackageSlotProto::_v48() const {
  return _v48_ != NULL ? *_v48_ : *default_instance_->_v48_;
}
inline ::CardProto* _PackageSlotProto::mutable__v48() {
  set_has__v48();
  if (_v48_ == NULL) _v48_ = new ::CardProto;
  return _v48_;
}
inline ::CardProto* _PackageSlotProto::release__v48() {
  clear_has__v48();
  ::CardProto* temp = _v48_;
  _v48_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v48(::CardProto* _v48) {
  delete _v48_;
  _v48_ = _v48;
  if (_v48) {
    set_has__v48();
  } else {
    clear_has__v48();
  }
}

// optional .CardProto _v49 = 50;
inline bool _PackageSlotProto::has__v49() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void _PackageSlotProto::set_has__v49() {
  _has_bits_[1] |= 0x00020000u;
}
inline void _PackageSlotProto::clear_has__v49() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void _PackageSlotProto::clear__v49() {
  if (_v49_ != NULL) _v49_->::CardProto::Clear();
  clear_has__v49();
}
inline const ::CardProto& _PackageSlotProto::_v49() const {
  return _v49_ != NULL ? *_v49_ : *default_instance_->_v49_;
}
inline ::CardProto* _PackageSlotProto::mutable__v49() {
  set_has__v49();
  if (_v49_ == NULL) _v49_ = new ::CardProto;
  return _v49_;
}
inline ::CardProto* _PackageSlotProto::release__v49() {
  clear_has__v49();
  ::CardProto* temp = _v49_;
  _v49_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v49(::CardProto* _v49) {
  delete _v49_;
  _v49_ = _v49;
  if (_v49) {
    set_has__v49();
  } else {
    clear_has__v49();
  }
}

// optional .CardProto _v50 = 51;
inline bool _PackageSlotProto::has__v50() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void _PackageSlotProto::set_has__v50() {
  _has_bits_[1] |= 0x00040000u;
}
inline void _PackageSlotProto::clear_has__v50() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void _PackageSlotProto::clear__v50() {
  if (_v50_ != NULL) _v50_->::CardProto::Clear();
  clear_has__v50();
}
inline const ::CardProto& _PackageSlotProto::_v50() const {
  return _v50_ != NULL ? *_v50_ : *default_instance_->_v50_;
}
inline ::CardProto* _PackageSlotProto::mutable__v50() {
  set_has__v50();
  if (_v50_ == NULL) _v50_ = new ::CardProto;
  return _v50_;
}
inline ::CardProto* _PackageSlotProto::release__v50() {
  clear_has__v50();
  ::CardProto* temp = _v50_;
  _v50_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v50(::CardProto* _v50) {
  delete _v50_;
  _v50_ = _v50;
  if (_v50) {
    set_has__v50();
  } else {
    clear_has__v50();
  }
}

// optional .CardProto _v51 = 52;
inline bool _PackageSlotProto::has__v51() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void _PackageSlotProto::set_has__v51() {
  _has_bits_[1] |= 0x00080000u;
}
inline void _PackageSlotProto::clear_has__v51() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void _PackageSlotProto::clear__v51() {
  if (_v51_ != NULL) _v51_->::CardProto::Clear();
  clear_has__v51();
}
inline const ::CardProto& _PackageSlotProto::_v51() const {
  return _v51_ != NULL ? *_v51_ : *default_instance_->_v51_;
}
inline ::CardProto* _PackageSlotProto::mutable__v51() {
  set_has__v51();
  if (_v51_ == NULL) _v51_ = new ::CardProto;
  return _v51_;
}
inline ::CardProto* _PackageSlotProto::release__v51() {
  clear_has__v51();
  ::CardProto* temp = _v51_;
  _v51_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v51(::CardProto* _v51) {
  delete _v51_;
  _v51_ = _v51;
  if (_v51) {
    set_has__v51();
  } else {
    clear_has__v51();
  }
}

// optional .CardProto _v52 = 53;
inline bool _PackageSlotProto::has__v52() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void _PackageSlotProto::set_has__v52() {
  _has_bits_[1] |= 0x00100000u;
}
inline void _PackageSlotProto::clear_has__v52() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void _PackageSlotProto::clear__v52() {
  if (_v52_ != NULL) _v52_->::CardProto::Clear();
  clear_has__v52();
}
inline const ::CardProto& _PackageSlotProto::_v52() const {
  return _v52_ != NULL ? *_v52_ : *default_instance_->_v52_;
}
inline ::CardProto* _PackageSlotProto::mutable__v52() {
  set_has__v52();
  if (_v52_ == NULL) _v52_ = new ::CardProto;
  return _v52_;
}
inline ::CardProto* _PackageSlotProto::release__v52() {
  clear_has__v52();
  ::CardProto* temp = _v52_;
  _v52_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v52(::CardProto* _v52) {
  delete _v52_;
  _v52_ = _v52;
  if (_v52) {
    set_has__v52();
  } else {
    clear_has__v52();
  }
}

// optional .CardProto _v53 = 54;
inline bool _PackageSlotProto::has__v53() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void _PackageSlotProto::set_has__v53() {
  _has_bits_[1] |= 0x00200000u;
}
inline void _PackageSlotProto::clear_has__v53() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void _PackageSlotProto::clear__v53() {
  if (_v53_ != NULL) _v53_->::CardProto::Clear();
  clear_has__v53();
}
inline const ::CardProto& _PackageSlotProto::_v53() const {
  return _v53_ != NULL ? *_v53_ : *default_instance_->_v53_;
}
inline ::CardProto* _PackageSlotProto::mutable__v53() {
  set_has__v53();
  if (_v53_ == NULL) _v53_ = new ::CardProto;
  return _v53_;
}
inline ::CardProto* _PackageSlotProto::release__v53() {
  clear_has__v53();
  ::CardProto* temp = _v53_;
  _v53_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v53(::CardProto* _v53) {
  delete _v53_;
  _v53_ = _v53;
  if (_v53) {
    set_has__v53();
  } else {
    clear_has__v53();
  }
}

// optional .CardProto _v54 = 55;
inline bool _PackageSlotProto::has__v54() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void _PackageSlotProto::set_has__v54() {
  _has_bits_[1] |= 0x00400000u;
}
inline void _PackageSlotProto::clear_has__v54() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void _PackageSlotProto::clear__v54() {
  if (_v54_ != NULL) _v54_->::CardProto::Clear();
  clear_has__v54();
}
inline const ::CardProto& _PackageSlotProto::_v54() const {
  return _v54_ != NULL ? *_v54_ : *default_instance_->_v54_;
}
inline ::CardProto* _PackageSlotProto::mutable__v54() {
  set_has__v54();
  if (_v54_ == NULL) _v54_ = new ::CardProto;
  return _v54_;
}
inline ::CardProto* _PackageSlotProto::release__v54() {
  clear_has__v54();
  ::CardProto* temp = _v54_;
  _v54_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v54(::CardProto* _v54) {
  delete _v54_;
  _v54_ = _v54;
  if (_v54) {
    set_has__v54();
  } else {
    clear_has__v54();
  }
}

// optional .CardProto _v55 = 56;
inline bool _PackageSlotProto::has__v55() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void _PackageSlotProto::set_has__v55() {
  _has_bits_[1] |= 0x00800000u;
}
inline void _PackageSlotProto::clear_has__v55() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void _PackageSlotProto::clear__v55() {
  if (_v55_ != NULL) _v55_->::CardProto::Clear();
  clear_has__v55();
}
inline const ::CardProto& _PackageSlotProto::_v55() const {
  return _v55_ != NULL ? *_v55_ : *default_instance_->_v55_;
}
inline ::CardProto* _PackageSlotProto::mutable__v55() {
  set_has__v55();
  if (_v55_ == NULL) _v55_ = new ::CardProto;
  return _v55_;
}
inline ::CardProto* _PackageSlotProto::release__v55() {
  clear_has__v55();
  ::CardProto* temp = _v55_;
  _v55_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v55(::CardProto* _v55) {
  delete _v55_;
  _v55_ = _v55;
  if (_v55) {
    set_has__v55();
  } else {
    clear_has__v55();
  }
}

// optional .CardProto _v56 = 57;
inline bool _PackageSlotProto::has__v56() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void _PackageSlotProto::set_has__v56() {
  _has_bits_[1] |= 0x01000000u;
}
inline void _PackageSlotProto::clear_has__v56() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void _PackageSlotProto::clear__v56() {
  if (_v56_ != NULL) _v56_->::CardProto::Clear();
  clear_has__v56();
}
inline const ::CardProto& _PackageSlotProto::_v56() const {
  return _v56_ != NULL ? *_v56_ : *default_instance_->_v56_;
}
inline ::CardProto* _PackageSlotProto::mutable__v56() {
  set_has__v56();
  if (_v56_ == NULL) _v56_ = new ::CardProto;
  return _v56_;
}
inline ::CardProto* _PackageSlotProto::release__v56() {
  clear_has__v56();
  ::CardProto* temp = _v56_;
  _v56_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v56(::CardProto* _v56) {
  delete _v56_;
  _v56_ = _v56;
  if (_v56) {
    set_has__v56();
  } else {
    clear_has__v56();
  }
}

// optional .CardProto _v57 = 58;
inline bool _PackageSlotProto::has__v57() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void _PackageSlotProto::set_has__v57() {
  _has_bits_[1] |= 0x02000000u;
}
inline void _PackageSlotProto::clear_has__v57() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void _PackageSlotProto::clear__v57() {
  if (_v57_ != NULL) _v57_->::CardProto::Clear();
  clear_has__v57();
}
inline const ::CardProto& _PackageSlotProto::_v57() const {
  return _v57_ != NULL ? *_v57_ : *default_instance_->_v57_;
}
inline ::CardProto* _PackageSlotProto::mutable__v57() {
  set_has__v57();
  if (_v57_ == NULL) _v57_ = new ::CardProto;
  return _v57_;
}
inline ::CardProto* _PackageSlotProto::release__v57() {
  clear_has__v57();
  ::CardProto* temp = _v57_;
  _v57_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v57(::CardProto* _v57) {
  delete _v57_;
  _v57_ = _v57;
  if (_v57) {
    set_has__v57();
  } else {
    clear_has__v57();
  }
}

// optional .CardProto _v58 = 59;
inline bool _PackageSlotProto::has__v58() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void _PackageSlotProto::set_has__v58() {
  _has_bits_[1] |= 0x04000000u;
}
inline void _PackageSlotProto::clear_has__v58() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void _PackageSlotProto::clear__v58() {
  if (_v58_ != NULL) _v58_->::CardProto::Clear();
  clear_has__v58();
}
inline const ::CardProto& _PackageSlotProto::_v58() const {
  return _v58_ != NULL ? *_v58_ : *default_instance_->_v58_;
}
inline ::CardProto* _PackageSlotProto::mutable__v58() {
  set_has__v58();
  if (_v58_ == NULL) _v58_ = new ::CardProto;
  return _v58_;
}
inline ::CardProto* _PackageSlotProto::release__v58() {
  clear_has__v58();
  ::CardProto* temp = _v58_;
  _v58_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v58(::CardProto* _v58) {
  delete _v58_;
  _v58_ = _v58;
  if (_v58) {
    set_has__v58();
  } else {
    clear_has__v58();
  }
}

// optional .CardProto _v59 = 60;
inline bool _PackageSlotProto::has__v59() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void _PackageSlotProto::set_has__v59() {
  _has_bits_[1] |= 0x08000000u;
}
inline void _PackageSlotProto::clear_has__v59() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void _PackageSlotProto::clear__v59() {
  if (_v59_ != NULL) _v59_->::CardProto::Clear();
  clear_has__v59();
}
inline const ::CardProto& _PackageSlotProto::_v59() const {
  return _v59_ != NULL ? *_v59_ : *default_instance_->_v59_;
}
inline ::CardProto* _PackageSlotProto::mutable__v59() {
  set_has__v59();
  if (_v59_ == NULL) _v59_ = new ::CardProto;
  return _v59_;
}
inline ::CardProto* _PackageSlotProto::release__v59() {
  clear_has__v59();
  ::CardProto* temp = _v59_;
  _v59_ = NULL;
  return temp;
}
inline void _PackageSlotProto::set_allocated__v59(::CardProto* _v59) {
  delete _v59_;
  _v59_ = _v59;
  if (_v59) {
    set_has__v59();
  } else {
    clear_has__v59();
  }
}

// -------------------------------------------------------------------

// PackageProto

// optional ._PackageSlotProto Slot = 1;
inline bool PackageProto::has_slot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageProto::set_has_slot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackageProto::clear_has_slot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackageProto::clear_slot() {
  if (slot_ != NULL) slot_->::_PackageSlotProto::Clear();
  clear_has_slot();
}
inline const ::_PackageSlotProto& PackageProto::slot() const {
  return slot_ != NULL ? *slot_ : *default_instance_->slot_;
}
inline ::_PackageSlotProto* PackageProto::mutable_slot() {
  set_has_slot();
  if (slot_ == NULL) slot_ = new ::_PackageSlotProto;
  return slot_;
}
inline ::_PackageSlotProto* PackageProto::release_slot() {
  clear_has_slot();
  ::_PackageSlotProto* temp = slot_;
  slot_ = NULL;
  return temp;
}
inline void PackageProto::set_allocated_slot(::_PackageSlotProto* slot) {
  delete slot_;
  slot_ = slot;
  if (slot) {
    set_has_slot();
  } else {
    clear_has_slot();
  }
}

// -------------------------------------------------------------------

// _TeamInfoTeamMemberProto

// optional .CardProto _v0 = 1;
inline bool _TeamInfoTeamMemberProto::has__v0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _TeamInfoTeamMemberProto::set_has__v0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _TeamInfoTeamMemberProto::clear_has__v0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _TeamInfoTeamMemberProto::clear__v0() {
  if (_v0_ != NULL) _v0_->::CardProto::Clear();
  clear_has__v0();
}
inline const ::CardProto& _TeamInfoTeamMemberProto::_v0() const {
  return _v0_ != NULL ? *_v0_ : *default_instance_->_v0_;
}
inline ::CardProto* _TeamInfoTeamMemberProto::mutable__v0() {
  set_has__v0();
  if (_v0_ == NULL) _v0_ = new ::CardProto;
  return _v0_;
}
inline ::CardProto* _TeamInfoTeamMemberProto::release__v0() {
  clear_has__v0();
  ::CardProto* temp = _v0_;
  _v0_ = NULL;
  return temp;
}
inline void _TeamInfoTeamMemberProto::set_allocated__v0(::CardProto* _v0) {
  delete _v0_;
  _v0_ = _v0;
  if (_v0) {
    set_has__v0();
  } else {
    clear_has__v0();
  }
}

// optional .CardProto _v1 = 2;
inline bool _TeamInfoTeamMemberProto::has__v1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _TeamInfoTeamMemberProto::set_has__v1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _TeamInfoTeamMemberProto::clear_has__v1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _TeamInfoTeamMemberProto::clear__v1() {
  if (_v1_ != NULL) _v1_->::CardProto::Clear();
  clear_has__v1();
}
inline const ::CardProto& _TeamInfoTeamMemberProto::_v1() const {
  return _v1_ != NULL ? *_v1_ : *default_instance_->_v1_;
}
inline ::CardProto* _TeamInfoTeamMemberProto::mutable__v1() {
  set_has__v1();
  if (_v1_ == NULL) _v1_ = new ::CardProto;
  return _v1_;
}
inline ::CardProto* _TeamInfoTeamMemberProto::release__v1() {
  clear_has__v1();
  ::CardProto* temp = _v1_;
  _v1_ = NULL;
  return temp;
}
inline void _TeamInfoTeamMemberProto::set_allocated__v1(::CardProto* _v1) {
  delete _v1_;
  _v1_ = _v1;
  if (_v1) {
    set_has__v1();
  } else {
    clear_has__v1();
  }
}

// optional .CardProto _v2 = 3;
inline bool _TeamInfoTeamMemberProto::has__v2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _TeamInfoTeamMemberProto::set_has__v2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _TeamInfoTeamMemberProto::clear_has__v2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _TeamInfoTeamMemberProto::clear__v2() {
  if (_v2_ != NULL) _v2_->::CardProto::Clear();
  clear_has__v2();
}
inline const ::CardProto& _TeamInfoTeamMemberProto::_v2() const {
  return _v2_ != NULL ? *_v2_ : *default_instance_->_v2_;
}
inline ::CardProto* _TeamInfoTeamMemberProto::mutable__v2() {
  set_has__v2();
  if (_v2_ == NULL) _v2_ = new ::CardProto;
  return _v2_;
}
inline ::CardProto* _TeamInfoTeamMemberProto::release__v2() {
  clear_has__v2();
  ::CardProto* temp = _v2_;
  _v2_ = NULL;
  return temp;
}
inline void _TeamInfoTeamMemberProto::set_allocated__v2(::CardProto* _v2) {
  delete _v2_;
  _v2_ = _v2;
  if (_v2) {
    set_has__v2();
  } else {
    clear_has__v2();
  }
}

// optional .CardProto _v3 = 4;
inline bool _TeamInfoTeamMemberProto::has__v3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _TeamInfoTeamMemberProto::set_has__v3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _TeamInfoTeamMemberProto::clear_has__v3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _TeamInfoTeamMemberProto::clear__v3() {
  if (_v3_ != NULL) _v3_->::CardProto::Clear();
  clear_has__v3();
}
inline const ::CardProto& _TeamInfoTeamMemberProto::_v3() const {
  return _v3_ != NULL ? *_v3_ : *default_instance_->_v3_;
}
inline ::CardProto* _TeamInfoTeamMemberProto::mutable__v3() {
  set_has__v3();
  if (_v3_ == NULL) _v3_ = new ::CardProto;
  return _v3_;
}
inline ::CardProto* _TeamInfoTeamMemberProto::release__v3() {
  clear_has__v3();
  ::CardProto* temp = _v3_;
  _v3_ = NULL;
  return temp;
}
inline void _TeamInfoTeamMemberProto::set_allocated__v3(::CardProto* _v3) {
  delete _v3_;
  _v3_ = _v3;
  if (_v3) {
    set_has__v3();
  } else {
    clear_has__v3();
  }
}

// optional .CardProto _v4 = 5;
inline bool _TeamInfoTeamMemberProto::has__v4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _TeamInfoTeamMemberProto::set_has__v4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _TeamInfoTeamMemberProto::clear_has__v4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _TeamInfoTeamMemberProto::clear__v4() {
  if (_v4_ != NULL) _v4_->::CardProto::Clear();
  clear_has__v4();
}
inline const ::CardProto& _TeamInfoTeamMemberProto::_v4() const {
  return _v4_ != NULL ? *_v4_ : *default_instance_->_v4_;
}
inline ::CardProto* _TeamInfoTeamMemberProto::mutable__v4() {
  set_has__v4();
  if (_v4_ == NULL) _v4_ = new ::CardProto;
  return _v4_;
}
inline ::CardProto* _TeamInfoTeamMemberProto::release__v4() {
  clear_has__v4();
  ::CardProto* temp = _v4_;
  _v4_ = NULL;
  return temp;
}
inline void _TeamInfoTeamMemberProto::set_allocated__v4(::CardProto* _v4) {
  delete _v4_;
  _v4_ = _v4;
  if (_v4) {
    set_has__v4();
  } else {
    clear_has__v4();
  }
}

// -------------------------------------------------------------------

// TeamInfoProto

// optional ._TeamInfoTeamMemberProto TeamMember = 1;
inline bool TeamInfoProto::has_teammember() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamInfoProto::set_has_teammember() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamInfoProto::clear_has_teammember() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamInfoProto::clear_teammember() {
  if (teammember_ != NULL) teammember_->::_TeamInfoTeamMemberProto::Clear();
  clear_has_teammember();
}
inline const ::_TeamInfoTeamMemberProto& TeamInfoProto::teammember() const {
  return teammember_ != NULL ? *teammember_ : *default_instance_->teammember_;
}
inline ::_TeamInfoTeamMemberProto* TeamInfoProto::mutable_teammember() {
  set_has_teammember();
  if (teammember_ == NULL) teammember_ = new ::_TeamInfoTeamMemberProto;
  return teammember_;
}
inline ::_TeamInfoTeamMemberProto* TeamInfoProto::release_teammember() {
  clear_has_teammember();
  ::_TeamInfoTeamMemberProto* temp = teammember_;
  teammember_ = NULL;
  return temp;
}
inline void TeamInfoProto::set_allocated_teammember(::_TeamInfoTeamMemberProto* teammember) {
  delete teammember_;
  teammember_ = teammember;
  if (teammember) {
    set_has_teammember();
  } else {
    clear_has_teammember();
  }
}

// -------------------------------------------------------------------

// _PlayerDataFriendsProto

// optional .FriendInfoProto _v0 = 1;
inline bool _PlayerDataFriendsProto::has__v0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void _PlayerDataFriendsProto::clear_has__v0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void _PlayerDataFriendsProto::clear__v0() {
  if (_v0_ != NULL) _v0_->::FriendInfoProto::Clear();
  clear_has__v0();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v0() const {
  return _v0_ != NULL ? *_v0_ : *default_instance_->_v0_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v0() {
  set_has__v0();
  if (_v0_ == NULL) _v0_ = new ::FriendInfoProto;
  return _v0_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v0() {
  clear_has__v0();
  ::FriendInfoProto* temp = _v0_;
  _v0_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v0(::FriendInfoProto* _v0) {
  delete _v0_;
  _v0_ = _v0;
  if (_v0) {
    set_has__v0();
  } else {
    clear_has__v0();
  }
}

// optional .FriendInfoProto _v1 = 2;
inline bool _PlayerDataFriendsProto::has__v1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void _PlayerDataFriendsProto::clear_has__v1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void _PlayerDataFriendsProto::clear__v1() {
  if (_v1_ != NULL) _v1_->::FriendInfoProto::Clear();
  clear_has__v1();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v1() const {
  return _v1_ != NULL ? *_v1_ : *default_instance_->_v1_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v1() {
  set_has__v1();
  if (_v1_ == NULL) _v1_ = new ::FriendInfoProto;
  return _v1_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v1() {
  clear_has__v1();
  ::FriendInfoProto* temp = _v1_;
  _v1_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v1(::FriendInfoProto* _v1) {
  delete _v1_;
  _v1_ = _v1;
  if (_v1) {
    set_has__v1();
  } else {
    clear_has__v1();
  }
}

// optional .FriendInfoProto _v2 = 3;
inline bool _PlayerDataFriendsProto::has__v2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void _PlayerDataFriendsProto::clear_has__v2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void _PlayerDataFriendsProto::clear__v2() {
  if (_v2_ != NULL) _v2_->::FriendInfoProto::Clear();
  clear_has__v2();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v2() const {
  return _v2_ != NULL ? *_v2_ : *default_instance_->_v2_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v2() {
  set_has__v2();
  if (_v2_ == NULL) _v2_ = new ::FriendInfoProto;
  return _v2_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v2() {
  clear_has__v2();
  ::FriendInfoProto* temp = _v2_;
  _v2_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v2(::FriendInfoProto* _v2) {
  delete _v2_;
  _v2_ = _v2;
  if (_v2) {
    set_has__v2();
  } else {
    clear_has__v2();
  }
}

// optional .FriendInfoProto _v3 = 4;
inline bool _PlayerDataFriendsProto::has__v3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void _PlayerDataFriendsProto::clear_has__v3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void _PlayerDataFriendsProto::clear__v3() {
  if (_v3_ != NULL) _v3_->::FriendInfoProto::Clear();
  clear_has__v3();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v3() const {
  return _v3_ != NULL ? *_v3_ : *default_instance_->_v3_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v3() {
  set_has__v3();
  if (_v3_ == NULL) _v3_ = new ::FriendInfoProto;
  return _v3_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v3() {
  clear_has__v3();
  ::FriendInfoProto* temp = _v3_;
  _v3_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v3(::FriendInfoProto* _v3) {
  delete _v3_;
  _v3_ = _v3;
  if (_v3) {
    set_has__v3();
  } else {
    clear_has__v3();
  }
}

// optional .FriendInfoProto _v4 = 5;
inline bool _PlayerDataFriendsProto::has__v4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void _PlayerDataFriendsProto::clear_has__v4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void _PlayerDataFriendsProto::clear__v4() {
  if (_v4_ != NULL) _v4_->::FriendInfoProto::Clear();
  clear_has__v4();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v4() const {
  return _v4_ != NULL ? *_v4_ : *default_instance_->_v4_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v4() {
  set_has__v4();
  if (_v4_ == NULL) _v4_ = new ::FriendInfoProto;
  return _v4_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v4() {
  clear_has__v4();
  ::FriendInfoProto* temp = _v4_;
  _v4_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v4(::FriendInfoProto* _v4) {
  delete _v4_;
  _v4_ = _v4;
  if (_v4) {
    set_has__v4();
  } else {
    clear_has__v4();
  }
}

// optional .FriendInfoProto _v5 = 6;
inline bool _PlayerDataFriendsProto::has__v5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v5() {
  _has_bits_[0] |= 0x00000020u;
}
inline void _PlayerDataFriendsProto::clear_has__v5() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void _PlayerDataFriendsProto::clear__v5() {
  if (_v5_ != NULL) _v5_->::FriendInfoProto::Clear();
  clear_has__v5();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v5() const {
  return _v5_ != NULL ? *_v5_ : *default_instance_->_v5_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v5() {
  set_has__v5();
  if (_v5_ == NULL) _v5_ = new ::FriendInfoProto;
  return _v5_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v5() {
  clear_has__v5();
  ::FriendInfoProto* temp = _v5_;
  _v5_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v5(::FriendInfoProto* _v5) {
  delete _v5_;
  _v5_ = _v5;
  if (_v5) {
    set_has__v5();
  } else {
    clear_has__v5();
  }
}

// optional .FriendInfoProto _v6 = 7;
inline bool _PlayerDataFriendsProto::has__v6() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v6() {
  _has_bits_[0] |= 0x00000040u;
}
inline void _PlayerDataFriendsProto::clear_has__v6() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void _PlayerDataFriendsProto::clear__v6() {
  if (_v6_ != NULL) _v6_->::FriendInfoProto::Clear();
  clear_has__v6();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v6() const {
  return _v6_ != NULL ? *_v6_ : *default_instance_->_v6_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v6() {
  set_has__v6();
  if (_v6_ == NULL) _v6_ = new ::FriendInfoProto;
  return _v6_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v6() {
  clear_has__v6();
  ::FriendInfoProto* temp = _v6_;
  _v6_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v6(::FriendInfoProto* _v6) {
  delete _v6_;
  _v6_ = _v6;
  if (_v6) {
    set_has__v6();
  } else {
    clear_has__v6();
  }
}

// optional .FriendInfoProto _v7 = 8;
inline bool _PlayerDataFriendsProto::has__v7() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v7() {
  _has_bits_[0] |= 0x00000080u;
}
inline void _PlayerDataFriendsProto::clear_has__v7() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void _PlayerDataFriendsProto::clear__v7() {
  if (_v7_ != NULL) _v7_->::FriendInfoProto::Clear();
  clear_has__v7();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v7() const {
  return _v7_ != NULL ? *_v7_ : *default_instance_->_v7_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v7() {
  set_has__v7();
  if (_v7_ == NULL) _v7_ = new ::FriendInfoProto;
  return _v7_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v7() {
  clear_has__v7();
  ::FriendInfoProto* temp = _v7_;
  _v7_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v7(::FriendInfoProto* _v7) {
  delete _v7_;
  _v7_ = _v7;
  if (_v7) {
    set_has__v7();
  } else {
    clear_has__v7();
  }
}

// optional .FriendInfoProto _v8 = 9;
inline bool _PlayerDataFriendsProto::has__v8() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v8() {
  _has_bits_[0] |= 0x00000100u;
}
inline void _PlayerDataFriendsProto::clear_has__v8() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void _PlayerDataFriendsProto::clear__v8() {
  if (_v8_ != NULL) _v8_->::FriendInfoProto::Clear();
  clear_has__v8();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v8() const {
  return _v8_ != NULL ? *_v8_ : *default_instance_->_v8_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v8() {
  set_has__v8();
  if (_v8_ == NULL) _v8_ = new ::FriendInfoProto;
  return _v8_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v8() {
  clear_has__v8();
  ::FriendInfoProto* temp = _v8_;
  _v8_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v8(::FriendInfoProto* _v8) {
  delete _v8_;
  _v8_ = _v8;
  if (_v8) {
    set_has__v8();
  } else {
    clear_has__v8();
  }
}

// optional .FriendInfoProto _v9 = 10;
inline bool _PlayerDataFriendsProto::has__v9() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v9() {
  _has_bits_[0] |= 0x00000200u;
}
inline void _PlayerDataFriendsProto::clear_has__v9() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void _PlayerDataFriendsProto::clear__v9() {
  if (_v9_ != NULL) _v9_->::FriendInfoProto::Clear();
  clear_has__v9();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v9() const {
  return _v9_ != NULL ? *_v9_ : *default_instance_->_v9_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v9() {
  set_has__v9();
  if (_v9_ == NULL) _v9_ = new ::FriendInfoProto;
  return _v9_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v9() {
  clear_has__v9();
  ::FriendInfoProto* temp = _v9_;
  _v9_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v9(::FriendInfoProto* _v9) {
  delete _v9_;
  _v9_ = _v9;
  if (_v9) {
    set_has__v9();
  } else {
    clear_has__v9();
  }
}

// optional .FriendInfoProto _v10 = 11;
inline bool _PlayerDataFriendsProto::has__v10() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v10() {
  _has_bits_[0] |= 0x00000400u;
}
inline void _PlayerDataFriendsProto::clear_has__v10() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void _PlayerDataFriendsProto::clear__v10() {
  if (_v10_ != NULL) _v10_->::FriendInfoProto::Clear();
  clear_has__v10();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v10() const {
  return _v10_ != NULL ? *_v10_ : *default_instance_->_v10_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v10() {
  set_has__v10();
  if (_v10_ == NULL) _v10_ = new ::FriendInfoProto;
  return _v10_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v10() {
  clear_has__v10();
  ::FriendInfoProto* temp = _v10_;
  _v10_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v10(::FriendInfoProto* _v10) {
  delete _v10_;
  _v10_ = _v10;
  if (_v10) {
    set_has__v10();
  } else {
    clear_has__v10();
  }
}

// optional .FriendInfoProto _v11 = 12;
inline bool _PlayerDataFriendsProto::has__v11() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v11() {
  _has_bits_[0] |= 0x00000800u;
}
inline void _PlayerDataFriendsProto::clear_has__v11() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void _PlayerDataFriendsProto::clear__v11() {
  if (_v11_ != NULL) _v11_->::FriendInfoProto::Clear();
  clear_has__v11();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v11() const {
  return _v11_ != NULL ? *_v11_ : *default_instance_->_v11_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v11() {
  set_has__v11();
  if (_v11_ == NULL) _v11_ = new ::FriendInfoProto;
  return _v11_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v11() {
  clear_has__v11();
  ::FriendInfoProto* temp = _v11_;
  _v11_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v11(::FriendInfoProto* _v11) {
  delete _v11_;
  _v11_ = _v11;
  if (_v11) {
    set_has__v11();
  } else {
    clear_has__v11();
  }
}

// optional .FriendInfoProto _v12 = 13;
inline bool _PlayerDataFriendsProto::has__v12() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v12() {
  _has_bits_[0] |= 0x00001000u;
}
inline void _PlayerDataFriendsProto::clear_has__v12() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void _PlayerDataFriendsProto::clear__v12() {
  if (_v12_ != NULL) _v12_->::FriendInfoProto::Clear();
  clear_has__v12();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v12() const {
  return _v12_ != NULL ? *_v12_ : *default_instance_->_v12_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v12() {
  set_has__v12();
  if (_v12_ == NULL) _v12_ = new ::FriendInfoProto;
  return _v12_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v12() {
  clear_has__v12();
  ::FriendInfoProto* temp = _v12_;
  _v12_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v12(::FriendInfoProto* _v12) {
  delete _v12_;
  _v12_ = _v12;
  if (_v12) {
    set_has__v12();
  } else {
    clear_has__v12();
  }
}

// optional .FriendInfoProto _v13 = 14;
inline bool _PlayerDataFriendsProto::has__v13() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v13() {
  _has_bits_[0] |= 0x00002000u;
}
inline void _PlayerDataFriendsProto::clear_has__v13() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void _PlayerDataFriendsProto::clear__v13() {
  if (_v13_ != NULL) _v13_->::FriendInfoProto::Clear();
  clear_has__v13();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v13() const {
  return _v13_ != NULL ? *_v13_ : *default_instance_->_v13_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v13() {
  set_has__v13();
  if (_v13_ == NULL) _v13_ = new ::FriendInfoProto;
  return _v13_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v13() {
  clear_has__v13();
  ::FriendInfoProto* temp = _v13_;
  _v13_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v13(::FriendInfoProto* _v13) {
  delete _v13_;
  _v13_ = _v13;
  if (_v13) {
    set_has__v13();
  } else {
    clear_has__v13();
  }
}

// optional .FriendInfoProto _v14 = 15;
inline bool _PlayerDataFriendsProto::has__v14() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v14() {
  _has_bits_[0] |= 0x00004000u;
}
inline void _PlayerDataFriendsProto::clear_has__v14() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void _PlayerDataFriendsProto::clear__v14() {
  if (_v14_ != NULL) _v14_->::FriendInfoProto::Clear();
  clear_has__v14();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v14() const {
  return _v14_ != NULL ? *_v14_ : *default_instance_->_v14_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v14() {
  set_has__v14();
  if (_v14_ == NULL) _v14_ = new ::FriendInfoProto;
  return _v14_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v14() {
  clear_has__v14();
  ::FriendInfoProto* temp = _v14_;
  _v14_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v14(::FriendInfoProto* _v14) {
  delete _v14_;
  _v14_ = _v14;
  if (_v14) {
    set_has__v14();
  } else {
    clear_has__v14();
  }
}

// optional .FriendInfoProto _v15 = 16;
inline bool _PlayerDataFriendsProto::has__v15() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v15() {
  _has_bits_[0] |= 0x00008000u;
}
inline void _PlayerDataFriendsProto::clear_has__v15() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void _PlayerDataFriendsProto::clear__v15() {
  if (_v15_ != NULL) _v15_->::FriendInfoProto::Clear();
  clear_has__v15();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v15() const {
  return _v15_ != NULL ? *_v15_ : *default_instance_->_v15_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v15() {
  set_has__v15();
  if (_v15_ == NULL) _v15_ = new ::FriendInfoProto;
  return _v15_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v15() {
  clear_has__v15();
  ::FriendInfoProto* temp = _v15_;
  _v15_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v15(::FriendInfoProto* _v15) {
  delete _v15_;
  _v15_ = _v15;
  if (_v15) {
    set_has__v15();
  } else {
    clear_has__v15();
  }
}

// optional .FriendInfoProto _v16 = 17;
inline bool _PlayerDataFriendsProto::has__v16() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v16() {
  _has_bits_[0] |= 0x00010000u;
}
inline void _PlayerDataFriendsProto::clear_has__v16() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void _PlayerDataFriendsProto::clear__v16() {
  if (_v16_ != NULL) _v16_->::FriendInfoProto::Clear();
  clear_has__v16();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v16() const {
  return _v16_ != NULL ? *_v16_ : *default_instance_->_v16_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v16() {
  set_has__v16();
  if (_v16_ == NULL) _v16_ = new ::FriendInfoProto;
  return _v16_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v16() {
  clear_has__v16();
  ::FriendInfoProto* temp = _v16_;
  _v16_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v16(::FriendInfoProto* _v16) {
  delete _v16_;
  _v16_ = _v16;
  if (_v16) {
    set_has__v16();
  } else {
    clear_has__v16();
  }
}

// optional .FriendInfoProto _v17 = 18;
inline bool _PlayerDataFriendsProto::has__v17() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v17() {
  _has_bits_[0] |= 0x00020000u;
}
inline void _PlayerDataFriendsProto::clear_has__v17() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void _PlayerDataFriendsProto::clear__v17() {
  if (_v17_ != NULL) _v17_->::FriendInfoProto::Clear();
  clear_has__v17();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v17() const {
  return _v17_ != NULL ? *_v17_ : *default_instance_->_v17_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v17() {
  set_has__v17();
  if (_v17_ == NULL) _v17_ = new ::FriendInfoProto;
  return _v17_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v17() {
  clear_has__v17();
  ::FriendInfoProto* temp = _v17_;
  _v17_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v17(::FriendInfoProto* _v17) {
  delete _v17_;
  _v17_ = _v17;
  if (_v17) {
    set_has__v17();
  } else {
    clear_has__v17();
  }
}

// optional .FriendInfoProto _v18 = 19;
inline bool _PlayerDataFriendsProto::has__v18() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v18() {
  _has_bits_[0] |= 0x00040000u;
}
inline void _PlayerDataFriendsProto::clear_has__v18() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void _PlayerDataFriendsProto::clear__v18() {
  if (_v18_ != NULL) _v18_->::FriendInfoProto::Clear();
  clear_has__v18();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v18() const {
  return _v18_ != NULL ? *_v18_ : *default_instance_->_v18_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v18() {
  set_has__v18();
  if (_v18_ == NULL) _v18_ = new ::FriendInfoProto;
  return _v18_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v18() {
  clear_has__v18();
  ::FriendInfoProto* temp = _v18_;
  _v18_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v18(::FriendInfoProto* _v18) {
  delete _v18_;
  _v18_ = _v18;
  if (_v18) {
    set_has__v18();
  } else {
    clear_has__v18();
  }
}

// optional .FriendInfoProto _v19 = 20;
inline bool _PlayerDataFriendsProto::has__v19() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v19() {
  _has_bits_[0] |= 0x00080000u;
}
inline void _PlayerDataFriendsProto::clear_has__v19() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void _PlayerDataFriendsProto::clear__v19() {
  if (_v19_ != NULL) _v19_->::FriendInfoProto::Clear();
  clear_has__v19();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v19() const {
  return _v19_ != NULL ? *_v19_ : *default_instance_->_v19_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v19() {
  set_has__v19();
  if (_v19_ == NULL) _v19_ = new ::FriendInfoProto;
  return _v19_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v19() {
  clear_has__v19();
  ::FriendInfoProto* temp = _v19_;
  _v19_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v19(::FriendInfoProto* _v19) {
  delete _v19_;
  _v19_ = _v19;
  if (_v19) {
    set_has__v19();
  } else {
    clear_has__v19();
  }
}

// optional .FriendInfoProto _v20 = 21;
inline bool _PlayerDataFriendsProto::has__v20() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v20() {
  _has_bits_[0] |= 0x00100000u;
}
inline void _PlayerDataFriendsProto::clear_has__v20() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void _PlayerDataFriendsProto::clear__v20() {
  if (_v20_ != NULL) _v20_->::FriendInfoProto::Clear();
  clear_has__v20();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v20() const {
  return _v20_ != NULL ? *_v20_ : *default_instance_->_v20_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v20() {
  set_has__v20();
  if (_v20_ == NULL) _v20_ = new ::FriendInfoProto;
  return _v20_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v20() {
  clear_has__v20();
  ::FriendInfoProto* temp = _v20_;
  _v20_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v20(::FriendInfoProto* _v20) {
  delete _v20_;
  _v20_ = _v20;
  if (_v20) {
    set_has__v20();
  } else {
    clear_has__v20();
  }
}

// optional .FriendInfoProto _v21 = 22;
inline bool _PlayerDataFriendsProto::has__v21() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v21() {
  _has_bits_[0] |= 0x00200000u;
}
inline void _PlayerDataFriendsProto::clear_has__v21() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void _PlayerDataFriendsProto::clear__v21() {
  if (_v21_ != NULL) _v21_->::FriendInfoProto::Clear();
  clear_has__v21();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v21() const {
  return _v21_ != NULL ? *_v21_ : *default_instance_->_v21_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v21() {
  set_has__v21();
  if (_v21_ == NULL) _v21_ = new ::FriendInfoProto;
  return _v21_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v21() {
  clear_has__v21();
  ::FriendInfoProto* temp = _v21_;
  _v21_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v21(::FriendInfoProto* _v21) {
  delete _v21_;
  _v21_ = _v21;
  if (_v21) {
    set_has__v21();
  } else {
    clear_has__v21();
  }
}

// optional .FriendInfoProto _v22 = 23;
inline bool _PlayerDataFriendsProto::has__v22() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v22() {
  _has_bits_[0] |= 0x00400000u;
}
inline void _PlayerDataFriendsProto::clear_has__v22() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void _PlayerDataFriendsProto::clear__v22() {
  if (_v22_ != NULL) _v22_->::FriendInfoProto::Clear();
  clear_has__v22();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v22() const {
  return _v22_ != NULL ? *_v22_ : *default_instance_->_v22_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v22() {
  set_has__v22();
  if (_v22_ == NULL) _v22_ = new ::FriendInfoProto;
  return _v22_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v22() {
  clear_has__v22();
  ::FriendInfoProto* temp = _v22_;
  _v22_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v22(::FriendInfoProto* _v22) {
  delete _v22_;
  _v22_ = _v22;
  if (_v22) {
    set_has__v22();
  } else {
    clear_has__v22();
  }
}

// optional .FriendInfoProto _v23 = 24;
inline bool _PlayerDataFriendsProto::has__v23() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v23() {
  _has_bits_[0] |= 0x00800000u;
}
inline void _PlayerDataFriendsProto::clear_has__v23() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void _PlayerDataFriendsProto::clear__v23() {
  if (_v23_ != NULL) _v23_->::FriendInfoProto::Clear();
  clear_has__v23();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v23() const {
  return _v23_ != NULL ? *_v23_ : *default_instance_->_v23_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v23() {
  set_has__v23();
  if (_v23_ == NULL) _v23_ = new ::FriendInfoProto;
  return _v23_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v23() {
  clear_has__v23();
  ::FriendInfoProto* temp = _v23_;
  _v23_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v23(::FriendInfoProto* _v23) {
  delete _v23_;
  _v23_ = _v23;
  if (_v23) {
    set_has__v23();
  } else {
    clear_has__v23();
  }
}

// optional .FriendInfoProto _v24 = 25;
inline bool _PlayerDataFriendsProto::has__v24() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v24() {
  _has_bits_[0] |= 0x01000000u;
}
inline void _PlayerDataFriendsProto::clear_has__v24() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void _PlayerDataFriendsProto::clear__v24() {
  if (_v24_ != NULL) _v24_->::FriendInfoProto::Clear();
  clear_has__v24();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v24() const {
  return _v24_ != NULL ? *_v24_ : *default_instance_->_v24_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v24() {
  set_has__v24();
  if (_v24_ == NULL) _v24_ = new ::FriendInfoProto;
  return _v24_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v24() {
  clear_has__v24();
  ::FriendInfoProto* temp = _v24_;
  _v24_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v24(::FriendInfoProto* _v24) {
  delete _v24_;
  _v24_ = _v24;
  if (_v24) {
    set_has__v24();
  } else {
    clear_has__v24();
  }
}

// optional .FriendInfoProto _v25 = 26;
inline bool _PlayerDataFriendsProto::has__v25() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v25() {
  _has_bits_[0] |= 0x02000000u;
}
inline void _PlayerDataFriendsProto::clear_has__v25() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void _PlayerDataFriendsProto::clear__v25() {
  if (_v25_ != NULL) _v25_->::FriendInfoProto::Clear();
  clear_has__v25();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v25() const {
  return _v25_ != NULL ? *_v25_ : *default_instance_->_v25_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v25() {
  set_has__v25();
  if (_v25_ == NULL) _v25_ = new ::FriendInfoProto;
  return _v25_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v25() {
  clear_has__v25();
  ::FriendInfoProto* temp = _v25_;
  _v25_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v25(::FriendInfoProto* _v25) {
  delete _v25_;
  _v25_ = _v25;
  if (_v25) {
    set_has__v25();
  } else {
    clear_has__v25();
  }
}

// optional .FriendInfoProto _v26 = 27;
inline bool _PlayerDataFriendsProto::has__v26() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v26() {
  _has_bits_[0] |= 0x04000000u;
}
inline void _PlayerDataFriendsProto::clear_has__v26() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void _PlayerDataFriendsProto::clear__v26() {
  if (_v26_ != NULL) _v26_->::FriendInfoProto::Clear();
  clear_has__v26();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v26() const {
  return _v26_ != NULL ? *_v26_ : *default_instance_->_v26_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v26() {
  set_has__v26();
  if (_v26_ == NULL) _v26_ = new ::FriendInfoProto;
  return _v26_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v26() {
  clear_has__v26();
  ::FriendInfoProto* temp = _v26_;
  _v26_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v26(::FriendInfoProto* _v26) {
  delete _v26_;
  _v26_ = _v26;
  if (_v26) {
    set_has__v26();
  } else {
    clear_has__v26();
  }
}

// optional .FriendInfoProto _v27 = 28;
inline bool _PlayerDataFriendsProto::has__v27() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v27() {
  _has_bits_[0] |= 0x08000000u;
}
inline void _PlayerDataFriendsProto::clear_has__v27() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void _PlayerDataFriendsProto::clear__v27() {
  if (_v27_ != NULL) _v27_->::FriendInfoProto::Clear();
  clear_has__v27();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v27() const {
  return _v27_ != NULL ? *_v27_ : *default_instance_->_v27_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v27() {
  set_has__v27();
  if (_v27_ == NULL) _v27_ = new ::FriendInfoProto;
  return _v27_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v27() {
  clear_has__v27();
  ::FriendInfoProto* temp = _v27_;
  _v27_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v27(::FriendInfoProto* _v27) {
  delete _v27_;
  _v27_ = _v27;
  if (_v27) {
    set_has__v27();
  } else {
    clear_has__v27();
  }
}

// optional .FriendInfoProto _v28 = 29;
inline bool _PlayerDataFriendsProto::has__v28() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v28() {
  _has_bits_[0] |= 0x10000000u;
}
inline void _PlayerDataFriendsProto::clear_has__v28() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void _PlayerDataFriendsProto::clear__v28() {
  if (_v28_ != NULL) _v28_->::FriendInfoProto::Clear();
  clear_has__v28();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v28() const {
  return _v28_ != NULL ? *_v28_ : *default_instance_->_v28_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v28() {
  set_has__v28();
  if (_v28_ == NULL) _v28_ = new ::FriendInfoProto;
  return _v28_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v28() {
  clear_has__v28();
  ::FriendInfoProto* temp = _v28_;
  _v28_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v28(::FriendInfoProto* _v28) {
  delete _v28_;
  _v28_ = _v28;
  if (_v28) {
    set_has__v28();
  } else {
    clear_has__v28();
  }
}

// optional .FriendInfoProto _v29 = 30;
inline bool _PlayerDataFriendsProto::has__v29() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void _PlayerDataFriendsProto::set_has__v29() {
  _has_bits_[0] |= 0x20000000u;
}
inline void _PlayerDataFriendsProto::clear_has__v29() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void _PlayerDataFriendsProto::clear__v29() {
  if (_v29_ != NULL) _v29_->::FriendInfoProto::Clear();
  clear_has__v29();
}
inline const ::FriendInfoProto& _PlayerDataFriendsProto::_v29() const {
  return _v29_ != NULL ? *_v29_ : *default_instance_->_v29_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::mutable__v29() {
  set_has__v29();
  if (_v29_ == NULL) _v29_ = new ::FriendInfoProto;
  return _v29_;
}
inline ::FriendInfoProto* _PlayerDataFriendsProto::release__v29() {
  clear_has__v29();
  ::FriendInfoProto* temp = _v29_;
  _v29_ = NULL;
  return temp;
}
inline void _PlayerDataFriendsProto::set_allocated__v29(::FriendInfoProto* _v29) {
  delete _v29_;
  _v29_ = _v29;
  if (_v29) {
    set_has__v29();
  } else {
    clear_has__v29();
  }
}

// -------------------------------------------------------------------

// PlayerDataProto

// optional ._PlayerDataFriendsProto Friends = 5;
inline bool PlayerDataProto::has_friends() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerDataProto::set_has_friends() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerDataProto::clear_has_friends() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerDataProto::clear_friends() {
  if (friends_ != NULL) friends_->::_PlayerDataFriendsProto::Clear();
  clear_has_friends();
}
inline const ::_PlayerDataFriendsProto& PlayerDataProto::friends() const {
  return friends_ != NULL ? *friends_ : *default_instance_->friends_;
}
inline ::_PlayerDataFriendsProto* PlayerDataProto::mutable_friends() {
  set_has_friends();
  if (friends_ == NULL) friends_ = new ::_PlayerDataFriendsProto;
  return friends_;
}
inline ::_PlayerDataFriendsProto* PlayerDataProto::release_friends() {
  clear_has_friends();
  ::_PlayerDataFriendsProto* temp = friends_;
  friends_ = NULL;
  return temp;
}
inline void PlayerDataProto::set_allocated_friends(::_PlayerDataFriendsProto* friends) {
  delete friends_;
  friends_ = friends;
  if (friends) {
    set_has_friends();
  } else {
    clear_has_friends();
  }
}

// optional .TeamInfoProto TeamInfo = 3;
inline bool PlayerDataProto::has_teaminfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerDataProto::set_has_teaminfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerDataProto::clear_has_teaminfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerDataProto::clear_teaminfo() {
  if (teaminfo_ != NULL) teaminfo_->::TeamInfoProto::Clear();
  clear_has_teaminfo();
}
inline const ::TeamInfoProto& PlayerDataProto::teaminfo() const {
  return teaminfo_ != NULL ? *teaminfo_ : *default_instance_->teaminfo_;
}
inline ::TeamInfoProto* PlayerDataProto::mutable_teaminfo() {
  set_has_teaminfo();
  if (teaminfo_ == NULL) teaminfo_ = new ::TeamInfoProto;
  return teaminfo_;
}
inline ::TeamInfoProto* PlayerDataProto::release_teaminfo() {
  clear_has_teaminfo();
  ::TeamInfoProto* temp = teaminfo_;
  teaminfo_ = NULL;
  return temp;
}
inline void PlayerDataProto::set_allocated_teaminfo(::TeamInfoProto* teaminfo) {
  delete teaminfo_;
  teaminfo_ = teaminfo;
  if (teaminfo) {
    set_has_teaminfo();
  } else {
    clear_has_teaminfo();
  }
}

// optional .SysInfoProto SysInfo = 1;
inline bool PlayerDataProto::has_sysinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerDataProto::set_has_sysinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerDataProto::clear_has_sysinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerDataProto::clear_sysinfo() {
  if (sysinfo_ != NULL) sysinfo_->::SysInfoProto::Clear();
  clear_has_sysinfo();
}
inline const ::SysInfoProto& PlayerDataProto::sysinfo() const {
  return sysinfo_ != NULL ? *sysinfo_ : *default_instance_->sysinfo_;
}
inline ::SysInfoProto* PlayerDataProto::mutable_sysinfo() {
  set_has_sysinfo();
  if (sysinfo_ == NULL) sysinfo_ = new ::SysInfoProto;
  return sysinfo_;
}
inline ::SysInfoProto* PlayerDataProto::release_sysinfo() {
  clear_has_sysinfo();
  ::SysInfoProto* temp = sysinfo_;
  sysinfo_ = NULL;
  return temp;
}
inline void PlayerDataProto::set_allocated_sysinfo(::SysInfoProto* sysinfo) {
  delete sysinfo_;
  sysinfo_ = sysinfo;
  if (sysinfo) {
    set_has_sysinfo();
  } else {
    clear_has_sysinfo();
  }
}

// optional .PackageProto Package = 4;
inline bool PlayerDataProto::has_package() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerDataProto::set_has_package() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerDataProto::clear_has_package() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerDataProto::clear_package() {
  if (package_ != NULL) package_->::PackageProto::Clear();
  clear_has_package();
}
inline const ::PackageProto& PlayerDataProto::package() const {
  return package_ != NULL ? *package_ : *default_instance_->package_;
}
inline ::PackageProto* PlayerDataProto::mutable_package() {
  set_has_package();
  if (package_ == NULL) package_ = new ::PackageProto;
  return package_;
}
inline ::PackageProto* PlayerDataProto::release_package() {
  clear_has_package();
  ::PackageProto* temp = package_;
  package_ = NULL;
  return temp;
}
inline void PlayerDataProto::set_allocated_package(::PackageProto* package) {
  delete package_;
  package_ = package;
  if (package) {
    set_has_package();
  } else {
    clear_has_package();
  }
}

// optional .BaseInfoProto BaseInfo = 2;
inline bool PlayerDataProto::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerDataProto::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerDataProto::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerDataProto::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::BaseInfoProto::Clear();
  clear_has_baseinfo();
}
inline const ::BaseInfoProto& PlayerDataProto::baseinfo() const {
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::BaseInfoProto* PlayerDataProto::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::BaseInfoProto;
  return baseinfo_;
}
inline ::BaseInfoProto* PlayerDataProto::release_baseinfo() {
  clear_has_baseinfo();
  ::BaseInfoProto* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void PlayerDataProto::set_allocated_baseinfo(::BaseInfoProto* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gamedata_2eproto__INCLUDED
